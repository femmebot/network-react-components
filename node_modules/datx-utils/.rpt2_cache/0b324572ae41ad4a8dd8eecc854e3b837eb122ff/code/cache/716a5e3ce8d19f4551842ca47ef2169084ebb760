{"code":"import { extendObservable } from 'mobx';\r\nexport function mapItems(data, fn) {\r\n    if (data instanceof Array) {\r\n        // tslint:disable-next-line:no-unnecessary-callback-wrapper\r\n        return data.map(function (item) { return fn(item); });\r\n    }\r\n    return data === null ? null : fn(data);\r\n}\r\n/**\r\n * Flatten a 2D array to a single array\r\n *\r\n * @export\r\n * @template T\r\n * @param {Array<Array<T>>} data Arrays to flatten\r\n * @returns {Array<T>} Flattened array\r\n */\r\nexport function flatten(data) {\r\n    return (_a = []).concat.apply(_a, data);\r\n    var _a;\r\n}\r\n/**\r\n * Return a unique set of items in an array\r\n *\r\n * @export\r\n * @template T\r\n * @param {Array<T>} data Array to filter\r\n * @returns {Array<T>} Filtered array\r\n */\r\nexport function uniq(data) {\r\n    return Array.from(new Set(data));\r\n}\r\n/**\r\n * Check if the given variable is an array with at least one falsy value\r\n *\r\n * @export\r\n * @param {any} value A variable to check\r\n * @returns {boolean} The given variable is an array with at least one falsy value\r\n */\r\nexport function isFalsyArray(value) {\r\n    return value instanceof Array && !value.every(Boolean);\r\n}\r\n/**\r\n * Add a computed property to an observable object\r\n *\r\n * @export\r\n * @param {object} obj Observable object\r\n * @param {string} key Property to add\r\n * @param {() => any} getter Getter function\r\n * @param {(value: any) => void} [setter] Setter function\r\n */\r\nexport function assignComputed(obj, key, getter, setter) {\r\n    var value;\r\n    if (key in obj) {\r\n        value = obj[key];\r\n        delete obj[key];\r\n    }\r\n    if (setter) {\r\n        extendObservable(obj, (_a = {},\r\n            Object.defineProperty(_a, key, {\r\n                get: function () {\r\n                    return getter();\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            }),\r\n            Object.defineProperty(_a, key, {\r\n                set: function (val) {\r\n                    if (setter) {\r\n                        setter(val);\r\n                    }\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            }),\r\n            _a));\r\n    }\r\n    else {\r\n        extendObservable(obj, (_b = {},\r\n            Object.defineProperty(_b, key, {\r\n                get: function () {\r\n                    return getter();\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            }),\r\n            _b));\r\n    }\r\n    if (value !== undefined) {\r\n        obj[key] = value;\r\n    }\r\n    var _a, _b;\r\n}\r\nexport function error() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    // tslint:disable-next-line:no-console\r\n    console.error.apply(console, [\"[datx error]\"].concat(args));\r\n}\r\nexport function warn() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'test') {\r\n        return;\r\n    }\r\n    // tslint:disable-next-line:no-console\r\n    console.warn.apply(console, [\"[datx warning]\"].concat(args));\r\n}\r\nexport function deprecated() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'test') {\r\n        return;\r\n    }\r\n    // tslint:disable-next-line:no-console\r\n    console.warn.apply(console, [\"[datx deprecated]\"].concat(args));\r\n}\r\nexport function info() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'test') {\r\n        return;\r\n    }\r\n    // tslint:disable-next-line:no-console\r\n    console.info.apply(console, [\"[datx info]\"].concat(args));\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBcUIsZ0JBQWdCLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFjMUQsTUFBTSxtQkFBeUIsSUFBZ0IsRUFBRSxFQUFrQjtJQUNqRSxJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7UUFDekIsMkRBQTJEO1FBQzNELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBUixDQUFRLENBQUMsQ0FBQztLQUNyQztJQUVELE9BQU8sSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLGtCQUFxQixJQUFxQjtJQUM5QyxPQUFPLENBQUEsS0FBQyxFQUFlLENBQUEsQ0FBQyxNQUFNLFdBQUksSUFBSSxFQUFFOztBQUMxQyxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sZUFBa0IsSUFBYztJQUNwQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSx1QkFBdUIsS0FBVTtJQUNyQyxPQUFPLEtBQUssWUFBWSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0seUJBQ0osR0FBVyxFQUNYLEdBQVcsRUFDWCxNQUFlLEVBQ2YsTUFBMkI7SUFFM0IsSUFBSSxLQUFLLENBQUM7SUFDVixJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUU7UUFDZCxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxNQUFNLEVBQUU7UUFDVixnQkFBZ0IsQ0FBQyxHQUFHO2tDQUNkLE9BQUs7cUJBQVQ7b0JBQ0UsT0FBTyxNQUFNLEVBQUUsQ0FBQztnQkFDbEIsQ0FBQzs7OztrQ0FDRyxPQUFLO3FCQUFULFVBQVUsR0FBRztvQkFDWCxJQUFJLE1BQU0sRUFBRTt3QkFDVixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ2I7Z0JBQ0gsQ0FBQzs7OztnQkFDRCxDQUFDO0tBQ0o7U0FBTTtRQUNMLGdCQUFnQixDQUFDLEdBQUc7a0NBQ2QsT0FBSztxQkFBVDtvQkFDRSxPQUFPLE1BQU0sRUFBRSxDQUFDO2dCQUNsQixDQUFDOzs7O2dCQUNELENBQUM7S0FDSjtJQUVELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ2xCOztBQUNILENBQUM7QUFFRCxNQUFNO0lBQWdCLGNBQU87U0FBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1FBQVAseUJBQU87O0lBQzNCLHNDQUFzQztJQUN0QyxPQUFPLENBQUMsS0FBSyxPQUFiLE9BQU8sR0FBTyxjQUFjLFNBQUssSUFBSSxHQUFFO0FBQ3pDLENBQUM7QUFFRCxNQUFNO0lBQWUsY0FBTztTQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87UUFBUCx5QkFBTzs7SUFDMUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO1FBQzVFLE9BQU87S0FDUjtJQUVELHNDQUFzQztJQUN0QyxPQUFPLENBQUMsSUFBSSxPQUFaLE9BQU8sR0FBTSxnQkFBZ0IsU0FBSyxJQUFJLEdBQUU7QUFDMUMsQ0FBQztBQUVELE1BQU07SUFBcUIsY0FBTztTQUFQLFVBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87UUFBUCx5QkFBTzs7SUFDaEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO1FBQzVFLE9BQU87S0FDUjtJQUVELHNDQUFzQztJQUN0QyxPQUFPLENBQUMsSUFBSSxPQUFaLE9BQU8sR0FBTSxtQkFBbUIsU0FBSyxJQUFJLEdBQUU7QUFDN0MsQ0FBQztBQUVELE1BQU07SUFBZSxjQUFPO1NBQVAsVUFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztRQUFQLHlCQUFPOztJQUMxQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7UUFDNUUsT0FBTztLQUNSO0lBRUQsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxJQUFJLE9BQVosT0FBTyxHQUFNLGFBQWEsU0FBSyxJQUFJLEdBQUU7QUFDdkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29tcHV0ZWQsIGRlY29yYXRlLCBleHRlbmRPYnNlcnZhYmxlfSBmcm9tICdtb2J4JztcblxuLyoqXG4gKiBNYXAgYSBzaW5nbGUgaXRlbSBvciBhbiBhcnJheSBvZiBpdGVtc1xuICpcbiAqIEBleHBvcnRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdGVtcGxhdGUgVVxuICogQHBhcmFtIHsoVHxBcnJheTxUPil9IGRhdGEgRGF0YSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7KGl0ZW06IFQpID0+IFV9IGZuIEZ1bmN0aW9uIGNhbGxlZCBmb3IgZXZlcnkgZGF0YSBpdGVtXG4gKiBAcmV0dXJucyB7KFV8QXJyYXk8VT58bnVsbCl9IFJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEl0ZW1zPFQsIFU+KGRhdGE6IEFycmF5PFQ+LCBmbjogKGl0ZW06IFQpID0+IFUpOiBBcnJheTxVPjtcbmV4cG9ydCBmdW5jdGlvbiBtYXBJdGVtczxULCBVPihkYXRhOiBULCBmbjogKGl0ZW06IFQpID0+IFUpOiBVfG51bGw7XG5leHBvcnQgZnVuY3Rpb24gbWFwSXRlbXM8VCwgVT4oZGF0YTogVHxBcnJheTxUPiwgZm46IChpdGVtOiBUKSA9PiBVKTogVXxBcnJheTxVPnxudWxsIHtcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bm5lY2Vzc2FyeS1jYWxsYmFjay13cmFwcGVyXG4gICAgcmV0dXJuIGRhdGEubWFwKChpdGVtKSA9PiBmbihpdGVtKSk7XG4gIH1cblxuICByZXR1cm4gZGF0YSA9PT0gbnVsbCA/IG51bGwgOiBmbihkYXRhKTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGEgMkQgYXJyYXkgdG8gYSBzaW5nbGUgYXJyYXlcbiAqXG4gKiBAZXhwb3J0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxUPj59IGRhdGEgQXJyYXlzIHRvIGZsYXR0ZW5cbiAqIEByZXR1cm5zIHtBcnJheTxUPn0gRmxhdHRlbmVkIGFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+KGRhdGE6IEFycmF5PEFycmF5PFQ+Pik6IEFycmF5PFQ+IHtcbiAgcmV0dXJuIChbXSBhcyBBcnJheTxUPikuY29uY2F0KC4uLmRhdGEpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIHVuaXF1ZSBzZXQgb2YgaXRlbXMgaW4gYW4gYXJyYXlcbiAqXG4gKiBAZXhwb3J0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtBcnJheTxUPn0gZGF0YSBBcnJheSB0byBmaWx0ZXJcbiAqIEByZXR1cm5zIHtBcnJheTxUPn0gRmlsdGVyZWQgYXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuaXE8VD4oZGF0YTogQXJyYXk8VD4pOiBBcnJheTxUPiB7XG4gIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoZGF0YSkpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhbiBhcnJheSB3aXRoIGF0IGxlYXN0IG9uZSBmYWxzeSB2YWx1ZVxuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSBBIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIGdpdmVuIHZhcmlhYmxlIGlzIGFuIGFycmF5IHdpdGggYXQgbGVhc3Qgb25lIGZhbHN5IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ZhbHN5QXJyYXkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBcnJheSAmJiAhdmFsdWUuZXZlcnkoQm9vbGVhbik7XG59XG5cbi8qKlxuICogQWRkIGEgY29tcHV0ZWQgcHJvcGVydHkgdG8gYW4gb2JzZXJ2YWJsZSBvYmplY3RcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIE9ic2VydmFibGUgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFByb3BlcnR5IHRvIGFkZFxuICogQHBhcmFtIHsoKSA9PiBhbnl9IGdldHRlciBHZXR0ZXIgZnVuY3Rpb25cbiAqIEBwYXJhbSB7KHZhbHVlOiBhbnkpID0+IHZvaWR9IFtzZXR0ZXJdIFNldHRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduQ29tcHV0ZWQ8VCA9IGFueT4oXG4gIG9iajogb2JqZWN0LFxuICBrZXk6IHN0cmluZyxcbiAgZ2V0dGVyOiAoKSA9PiBULFxuICBzZXR0ZXI/OiAodmFsdWU6IFQpID0+IHZvaWQsXG4pIHtcbiAgbGV0IHZhbHVlO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIHZhbHVlID0gb2JqW2tleV07XG4gICAgZGVsZXRlIG9ialtrZXldO1xuICB9XG5cbiAgaWYgKHNldHRlcikge1xuICAgIGV4dGVuZE9ic2VydmFibGUob2JqLCB7XG4gICAgICBnZXQgW2tleV0oKSB7XG4gICAgICAgIHJldHVybiBnZXR0ZXIoKTtcbiAgICAgIH0sXG4gICAgICBzZXQgW2tleV0odmFsKSB7XG4gICAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgICBzZXR0ZXIodmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBleHRlbmRPYnNlcnZhYmxlKG9iaiwge1xuICAgICAgZ2V0IFtrZXldKCkge1xuICAgICAgICByZXR1cm4gZ2V0dGVyKCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvciguLi5hcmdzKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoYFtkYXR4IGVycm9yXWAsIC4uLmFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybiguLi5hcmdzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICBjb25zb2xlLndhcm4oYFtkYXR4IHdhcm5pbmddYCwgLi4uYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGVkKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gIGNvbnNvbGUud2FybihgW2RhdHggZGVwcmVjYXRlZF1gLCAuLi5hcmdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZm8oLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgY29uc29sZS5pbmZvKGBbZGF0eCBpbmZvXWAsIC4uLmFyZ3MpO1xufVxuIl19","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-utils/helpers.d.ts","text":"/**\r\n * Map a single item or an array of items\r\n *\r\n * @export\r\n * @template T\r\n * @template U\r\n * @param {(T|Array<T>)} data Data to iterate over\r\n * @param {(item: T) => U} fn Function called for every data item\r\n * @returns {(U|Array<U>|null)} Return value of the callback function\r\n */\r\nexport declare function mapItems<T, U>(data: Array<T>, fn: (item: T) => U): Array<U>;\r\nexport declare function mapItems<T, U>(data: T, fn: (item: T) => U): U | null;\r\n/**\r\n * Flatten a 2D array to a single array\r\n *\r\n * @export\r\n * @template T\r\n * @param {Array<Array<T>>} data Arrays to flatten\r\n * @returns {Array<T>} Flattened array\r\n */\r\nexport declare function flatten<T>(data: Array<Array<T>>): Array<T>;\r\n/**\r\n * Return a unique set of items in an array\r\n *\r\n * @export\r\n * @template T\r\n * @param {Array<T>} data Array to filter\r\n * @returns {Array<T>} Filtered array\r\n */\r\nexport declare function uniq<T>(data: Array<T>): Array<T>;\r\n/**\r\n * Check if the given variable is an array with at least one falsy value\r\n *\r\n * @export\r\n * @param {any} value A variable to check\r\n * @returns {boolean} The given variable is an array with at least one falsy value\r\n */\r\nexport declare function isFalsyArray(value: any): boolean;\r\n/**\r\n * Add a computed property to an observable object\r\n *\r\n * @export\r\n * @param {object} obj Observable object\r\n * @param {string} key Property to add\r\n * @param {() => any} getter Getter function\r\n * @param {(value: any) => void} [setter] Setter function\r\n */\r\nexport declare function assignComputed<T = any>(obj: object, key: string, getter: () => T, setter?: (value: T) => void): void;\r\nexport declare function error(...args: any[]): void;\r\nexport declare function warn(...args: any[]): void;\r\nexport declare function deprecated(...args: any[]): void;\r\nexport declare function info(...args: any[]): void;\r\n"}}

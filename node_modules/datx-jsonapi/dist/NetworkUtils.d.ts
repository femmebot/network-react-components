import { View } from 'datx';
import { IDictionary } from 'datx-utils';
import { fetch } from 'isomorphic-fetch';
import { ParamArrayType } from './enums/ParamArrayType';
import { IHeaders } from './interfaces/IHeaders';
import { IJsonapiCollection } from './interfaces/IJsonapiCollection';
import { IJsonapiModel } from './interfaces/IJsonapiModel';
import { IRawResponse } from './interfaces/IRawResponse';
import { IRequestOptions } from './interfaces/IRequestOptions';
import { IResponseHeaders } from './interfaces/IResponseHeaders';
import { ILink, IResponse } from './interfaces/JsonApi';
import { Response as LibResponse } from './Response';
export declare type FetchType = (method: string, url: string, body?: object, requestHeaders?: IHeaders) => Promise<IRawResponse>;
export interface ICollectionFetchOpts {
    url: string;
    options?: IRequestOptions & {
        headers?: IHeaders;
    };
    data?: object;
    method: string;
    collection?: IJsonapiCollection;
    skipCache?: boolean;
    views?: Array<View>;
}
export declare type CollectionFetchType = <T extends IJsonapiModel>(options: ICollectionFetchOpts) => Promise<LibResponse<T>>;
export interface IResponseObject {
    data: IResponse;
    error?: Error;
    headers: IResponseHeaders;
    requestHeaders: IHeaders;
    status: number;
}
export interface IConfigType {
    baseFetch: FetchType;
    baseUrl: string;
    cache: boolean;
    defaultFetchOptions: IDictionary;
    fetchReference: fetch;
    paramArrayType: ParamArrayType;
    onError(IResponseObject: any): IResponseObject;
    transformRequest(options: ICollectionFetchOpts): ICollectionFetchOpts;
    transformResponse(response: IRawResponse): IRawResponse;
}
export declare const config: IConfigType;
export declare function fetch<T extends IJsonapiModel = IJsonapiModel>(options: ICollectionFetchOpts): Promise<LibResponse<T>>;
/**
 * API call used to get data from the server
 *
 * @export
 * @param {IJsonapiCollection} collection Related collection
 * @param {string} url API call URL
 * @param {IHeaders} [headers] Headers to be sent
 * @param {IRequestOptions} [options] Server options
 * @param {Array<View>} [views] Request view
 * @returns {Promise<Response>} Resolves with a Response object
 */
export declare function read<T extends IJsonapiModel = IJsonapiModel>(url: string, collection?: IJsonapiCollection, headers?: IHeaders, options?: IRequestOptions, views?: Array<View>): Promise<LibResponse<T>>;
/**
 * API call used to create data on the server
 *
 * @export
 * @param {IJsonapiCollection} collection Related collection
 * @param {string} url API call URL
 * @param {object} [data] Request body
 * @param {IHeaders} [headers] Headers to be sent
 * @param {IRequestOptions} [options] Server options
 * @param {Array<View>} [views] Request view
 * @returns {Promise<Response>} Resolves with a Response object
 */
export declare function create<T extends IJsonapiModel = IJsonapiModel>(url: string, data?: object, collection?: IJsonapiCollection, headers?: IHeaders, options?: IRequestOptions, views?: Array<View>): Promise<LibResponse<T>>;
/**
 * API call used to update data on the server
 *
 * @export
 * @param {IJsonapiCollection} collection Related collection
 * @param {string} url API call URL
 * @param {object} [data] Request body
 * @param {IHeaders} [headers] Headers to be sent
 * @param {IRequestOptions} [options] Server options
 * @param {Array<View>} [views] Request view
 * @returns {Promise<Response>} Resolves with a Response object
 */
export declare function update<T extends IJsonapiModel = IJsonapiModel>(url: string, data?: object, collection?: IJsonapiCollection, headers?: IHeaders, options?: IRequestOptions, views?: Array<View>): Promise<LibResponse<T>>;
/**
 * API call used to remove data from the server
 *
 * @export
 * @param {IJsonapiCollection} collection Related collection
 * @param {string} url API call URL
 * @param {IHeaders} [headers] Headers to be sent
 * @param {IRequestOptions} [options] Server options
 * @param {Array<View>} [views] Request view
 * @returns {Promise<Response>} Resolves with a Response object
 */
export declare function remove<T extends IJsonapiModel = IJsonapiModel>(url: string, collection?: IJsonapiCollection, headers?: IHeaders, options?: IRequestOptions, views?: Array<View>): Promise<LibResponse<T>>;
/**
 * Fetch a link from the server
 *
 * @export
 * @param {JsonApi.ILink} link Link URL or a link object
 * @param {IJsonapiCollection} collection Store that will be used to save the response
 * @param {IDictionary<string>} [requestHeaders] Request headers
 * @param {IRequestOptions} [options] Server options
 * @param {Array<View>} [views] Request view
 * @returns {Promise<LibResponse>} Response promise
 */
export declare function fetchLink<T extends IJsonapiModel = IJsonapiModel>(link: ILink, collection?: IJsonapiCollection, requestHeaders?: IDictionary<string>, options?: IRequestOptions, views?: Array<View>): Promise<LibResponse<T>>;
export declare function handleResponse<T extends IJsonapiModel = IJsonapiModel>(record: T, prop?: string): (response: LibResponse<T>) => T;

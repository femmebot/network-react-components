import { PureModel } from 'datx';
import { IDictionary, IRawModel } from 'datx-utils';
import { IJsonapiModel } from '../interfaces/IJsonapiModel';
import { IRequestOptions } from '../interfaces/IRequestOptions';
import { ILink, IRecord } from '../interfaces/JsonApi';
import { Response } from '../Response';
export declare function flattenModel(): null;
export declare function flattenModel(data?: IRecord): IRawModel;
export declare function getModelMeta(model: PureModel): IDictionary;
export declare function getModelLinks(model: PureModel): IDictionary<ILink>;
export declare function fetchModelLink<T extends IJsonapiModel = IJsonapiModel>(model: PureModel, key: string, requestHeaders?: IDictionary<string>, options?: IRequestOptions): Promise<Response<T>>;
export declare function fetchModelRefLink<T extends IJsonapiModel = IJsonapiModel>(model: PureModel, ref: string, key: string, requestHeaders?: IDictionary<string>, options?: IRequestOptions): Promise<Response<T>>;
export declare function getModelRefLinks(model: PureModel): IDictionary<IDictionary<ILink>>;
export declare function getModelRefMeta(model: PureModel): IDictionary;
export declare function modelToJsonApi(model: IJsonapiModel): IRecord;
export declare function saveModel(model: IJsonapiModel, options?: IRequestOptions): Promise<IJsonapiModel>;
export declare function removeModel<T extends IJsonapiModel>(model: T, options?: IRequestOptions): Promise<void>;
export declare function saveRelationship<T extends IJsonapiModel>(model: T, ref: string, options?: IRequestOptions): Promise<T>;

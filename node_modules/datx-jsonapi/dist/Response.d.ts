import { View } from 'datx';
import { IDictionary } from 'datx-utils';
import { IHeaders } from './interfaces/IHeaders';
import { IJsonapiModel } from './interfaces/IJsonapiModel';
import { IRawResponse } from './interfaces/IRawResponse';
import { IRequestOptions } from './interfaces/IRequestOptions';
import { IResponseHeaders } from './interfaces/IResponseHeaders';
import { IError, IJsonApiObject, ILink } from './interfaces/JsonApi';
import { IJsonapiCollection } from './interfaces/IJsonapiCollection';
export declare class Response<T extends IJsonapiModel> {
    /**
     * API response data (synced with the store)
     *
     * @type {(PureModel|Array<PureModel>)}
     * @memberOf Response
     */
    data: T | Array<T> | null;
    /**
     * API response metadata
     *
     * @type {object}
     * @memberOf Response
     */
    meta?: object;
    /**
     * API response links
     *
     * @type {object}
     * @memberOf Response
     */
    links?: IDictionary<ILink>;
    /**
     * The JSON API object returned by the server
     *
     * @type {JsonApi.IJsonApiObject}
     * @memberOf Response
     */
    jsonapi?: IJsonApiObject;
    /**
     * Headers received from the API call
     *
     * @type {IResponseHeaders}
     * @memberOf Response
     */
    headers?: IResponseHeaders;
    /**
     * Headers sent to the server
     *
     * @type {IHeaders}
     * @memberOf Response
     */
    requestHeaders?: IHeaders;
    /**
     * Request error
     *
     * @type {(Array<JsonApi.IError>|Error)}
     * @memberOf Response
     */
    error?: Array<IError> | Error;
    /**
     * First data page
     *
     * @type {Promise<Response>}
     * @memberOf Response
     */
    first?: Promise<Response<T>>;
    /**
     * Previous data page
     *
     * @type {Promise<Response>}
     * @memberOf Response
     */
    prev?: Promise<Response<T>>;
    /**
     * Next data page
     *
     * @type {Promise<Response>}
     * @memberOf Response
     */
    next?: Promise<Response<T>>;
    /**
     * Last data page
     *
     * @type {Promise<Response>}
     * @memberOf Response
     */
    last?: Promise<Response<T>>;
    /**
     * Received HTTP status
     *
     * @type {number}
     * @memberOf Response
     */
    status?: number;
    views: Array<View>;
    /**
     * Related Store
     *
     * @private
     * @type {IJsonapiCollection}
     * @memberOf Response
     */
    private __collection?;
    /**
     * Server options
     *
     * @private
     * @type {IRequestOptions}
     * @memberOf Response
     */
    private __options?;
    /**
     * Original server response
     *
     * @private
     * @type {IRawResponse}
     * @memberOf Response
     */
    private __response;
    /**
     * Cache used for the link requests
     *
     * @private
     * @type {IDictionary<Promise<Response>>}
     * @memberOf Response
     */
    private __cache;
    constructor(response: IRawResponse, collection?: IJsonapiCollection, options?: IRequestOptions, overrideData?: T | Array<T>, views?: Array<View>);
    /**
     * Replace the response record with a different record. Used to replace a record while keeping the same reference
     *
     * @param {PureModel} data New data
     * @returns {Response}
     *
     * @memberOf Response
     */
    replaceData(data: T): Response<T>;
    /**
     * Function called when a link is being fetched. The returned value is cached
     *
     * @private
     * @param {any} name Link name
     * @returns Promise that resolves with a Response object
     *
     * @memberOf Response
     */
    private __fetchLink(name);
}

{"code":"import * as tslib_1 from \"tslib\";\r\nexport function decorateView(BaseClass) {\r\n    var JsonapiView = /** @class */ (function (_super) {\r\n        tslib_1.__extends(JsonapiView, _super);\r\n        function JsonapiView(modelType, collection, sortMethod, models, unique) {\r\n            if (models === void 0) { models = []; }\r\n            if (unique === void 0) { unique = false; }\r\n            var _this = _super.call(this, modelType, collection, sortMethod, models, unique) || this;\r\n            _this.__collection = collection;\r\n            return _this;\r\n        }\r\n        JsonapiView.prototype.sync = function (body) {\r\n            var data = this.__collection.sync(body);\r\n            if (data) {\r\n                this.add(data);\r\n            }\r\n            return data;\r\n        };\r\n        /**\r\n         * Fetch the records with the given type and id\r\n         *\r\n         * @param {number|string} type Record id\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiView.prototype.fetch = function (id, options) {\r\n            return this.__collection\r\n                .fetch(this.modelType, id, options)\r\n                .then(this.__addFromResponse.bind(this));\r\n        };\r\n        /**\r\n         * Fetch the first page of records of the given type\r\n         *\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiView.prototype.fetchAll = function (options) {\r\n            return this.__collection\r\n                .fetchAll(this.modelType, options)\r\n                .then(this.__addFromResponse.bind(this));\r\n        };\r\n        JsonapiView.prototype.__addFromResponse = function (response) {\r\n            if (response.data) {\r\n                this.add(response.data);\r\n            }\r\n            response.views.push(this);\r\n            return response;\r\n        };\r\n        return JsonapiView;\r\n    }(BaseClass));\r\n    // @ts-ignore\r\n    return JsonapiView;\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/decorateView.d.ts","text":"import { IViewConstructor, View } from 'datx';\r\nimport { IJsonapiModel } from './interfaces/IJsonapiModel';\r\nimport { IJsonapiView } from './interfaces/IJsonapiView';\r\nexport declare function decorateView<U>(BaseClass: typeof View): IViewConstructor<IJsonapiModel, U & IJsonapiView>;\r\n"}}

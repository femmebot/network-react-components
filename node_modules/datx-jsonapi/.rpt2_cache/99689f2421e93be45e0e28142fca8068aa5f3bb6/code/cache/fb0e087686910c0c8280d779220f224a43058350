{"code":"import * as tslib_1 from \"tslib\";\r\nimport { getModelType, initModelRef, ReferenceType, updateModel, } from 'datx';\r\nimport { mapItems } from 'datx-utils';\r\nimport { clearAllCache, clearCacheByType } from './cache';\r\nimport { URL_REGEX } from './consts';\r\nimport { ParamArrayType } from './enums/ParamArrayType';\r\nimport { GenericModel } from './GenericModel';\r\nimport { flattenModel, removeModel } from './helpers/model';\r\nimport { getValue } from './helpers/utils';\r\nimport { config, fetch, read } from './NetworkUtils';\r\nexport function decorateCollection(BaseClass) {\r\n    var JsonapiCollection = /** @class */ (function (_super) {\r\n        tslib_1.__extends(JsonapiCollection, _super);\r\n        function JsonapiCollection() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        JsonapiCollection.prototype.sync = function (body) {\r\n            var _this = this;\r\n            if (!body) {\r\n                return null;\r\n            }\r\n            var data = this.__iterateEntries(body, function (obj) { return _this.__addRecord(obj); });\r\n            this.__iterateEntries(body, this.__updateRelationships.bind(this));\r\n            return data;\r\n        };\r\n        /**\r\n         * Fetch the records with the given type and id\r\n         *\r\n         * @param {string} type Record type\r\n         * @param {number|string} type Record id\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiCollection.prototype.fetch = function (type, id, options) {\r\n            var _this = this;\r\n            var modelType = getModelType(type);\r\n            var query = this.__prepareQuery(modelType, id, undefined, options);\r\n            return read(query.url, this, query.headers, options)\r\n                .then(function (res) { return _this.__handleErrors(res); });\r\n        };\r\n        /**\r\n         * Fetch the first page of records of the given type\r\n         *\r\n         * @param {string} type Record type\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiCollection.prototype.fetchAll = function (type, options) {\r\n            var _this = this;\r\n            var modelType = getModelType(type);\r\n            var query = this.__prepareQuery(modelType, undefined, undefined, options);\r\n            return read(query.url, this, query.headers, options)\r\n                .then(function (res) { return _this.__handleErrors(res); });\r\n        };\r\n        JsonapiCollection.prototype.request = function (url, method, data, options) {\r\n            if (method === void 0) { method = 'GET'; }\r\n            var query = this.__buildUrl(url, data, options);\r\n            return fetch({ url: query.url, options: options, data: data, method: method, collection: this });\r\n        };\r\n        JsonapiCollection.prototype.remove = function (obj, id, remote) {\r\n            var remove = (typeof id === 'boolean' || typeof id === 'object') ? id : remote;\r\n            var modelId = (typeof id !== 'boolean' && typeof id !== 'object') ? id : undefined;\r\n            var type = getModelType(obj);\r\n            var model = this.find(type, modelId);\r\n            if (model && remove) {\r\n                return removeModel(model, typeof remove === 'object' ? remove : undefined);\r\n            }\r\n            if (model) {\r\n                _super.prototype.remove.call(this, model);\r\n            }\r\n            return Promise.resolve();\r\n        };\r\n        JsonapiCollection.prototype.removeAll = function (type) {\r\n            _super.prototype.removeAll.call(this, type);\r\n            clearCacheByType(getModelType(type));\r\n        };\r\n        JsonapiCollection.prototype.reset = function () {\r\n            _super.prototype.reset.call(this);\r\n            clearAllCache();\r\n        };\r\n        /**\r\n         * Function used to handle response errors\r\n         *\r\n         * @private\r\n         * @param {Response} response API response\r\n         * @returns API response\r\n         */\r\n        JsonapiCollection.prototype.__handleErrors = function (response) {\r\n            if (response.error) {\r\n                throw response.error;\r\n            }\r\n            return response;\r\n        };\r\n        JsonapiCollection.prototype.__addRecord = function (obj) {\r\n            var staticCollection = this.constructor;\r\n            var type = obj.type, id = obj.id;\r\n            var record = this.find(type, id);\r\n            var flattened = flattenModel(obj);\r\n            if (record) {\r\n                updateModel(record, flattened);\r\n            }\r\n            else if (staticCollection.types.filter(function (item) { return item.type === type; }).length) {\r\n                record = this.add(flattened, type);\r\n            }\r\n            else {\r\n                record = this.add(new GenericModel(flattened));\r\n            }\r\n            return record;\r\n        };\r\n        JsonapiCollection.prototype.__updateRelationships = function (obj) {\r\n            var _this = this;\r\n            var record = this.find(obj.type, obj.id);\r\n            var refs = obj.relationships ? Object.keys(obj.relationships) : [];\r\n            refs.forEach(function (ref) {\r\n                var items = obj.relationships[ref].data;\r\n                if (items instanceof Array && items.length < 1) {\r\n                    // it's only possible to update items with one ore more refs. Early exit\r\n                    return;\r\n                }\r\n                if (items && record) {\r\n                    var models = mapItems(items, function (def) { return _this.find(def.type, def.id) || def.id; }) || null;\r\n                    var itemType = items instanceof Array ? items[0].type : items.type;\r\n                    if (ref in record) {\r\n                        record[ref] = models;\r\n                    }\r\n                    else {\r\n                        initModelRef(record, ref, { model: itemType, type: ReferenceType.TO_ONE_OR_MANY }, models);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        JsonapiCollection.prototype.__iterateEntries = function (body, fn) {\r\n            mapItems((body && body.included) || [], fn);\r\n            return mapItems((body && body.data) || [], fn);\r\n        };\r\n        JsonapiCollection.prototype.__prepareQuery = function (type, id, data, options) {\r\n            var staticCollection = this.constructor;\r\n            var model = staticCollection.types.filter(function (item) { return item.type === type; })[0];\r\n            var path = model\r\n                ? (getValue(model['endpoint']) || model['baseUrl'] || getModelType(model))\r\n                : type;\r\n            var url = id ? path + \"/\" + id : \"\" + path;\r\n            return this.__buildUrl(url, data, options);\r\n        };\r\n        JsonapiCollection.prototype.__buildUrl = function (url, data, options) {\r\n            var headers = (options && options.headers) || {};\r\n            var params = this.__prepareFilters((options && options.filter) || {}).concat(this.__prepareSort(options && options.sort), this.__prepareIncludes(options && options.include), this.__prepareFields((options && options.fields) || {}), this.__prepareRawParams((options && options.params) || []));\r\n            var baseUrl = this.__appendParams(this.__prefixUrl(url), params);\r\n            return { data: data, headers: headers, url: baseUrl };\r\n        };\r\n        JsonapiCollection.prototype.__prepareFilters = function (filters) {\r\n            return this.__parametrize(filters).map(function (item) { return \"filter[\" + item.key + \"]=\" + item.value; });\r\n        };\r\n        JsonapiCollection.prototype.__prepareSort = function (sort) {\r\n            return sort ? [\"sort=\" + sort] : [];\r\n        };\r\n        JsonapiCollection.prototype.__prepareIncludes = function (include) {\r\n            return include ? [\"include=\" + include] : [];\r\n        };\r\n        JsonapiCollection.prototype.__prepareFields = function (fields) {\r\n            var list = [];\r\n            Object.keys(fields).forEach(function (key) {\r\n                list.push(\"fields[\" + key + \"]=\" + fields[key]);\r\n            });\r\n            return list;\r\n        };\r\n        JsonapiCollection.prototype.__prepareRawParams = function (params) {\r\n            return params.map(function (param) {\r\n                if (typeof param === 'string') {\r\n                    return param;\r\n                }\r\n                return param.key + \"=\" + param.value;\r\n            });\r\n        };\r\n        JsonapiCollection.prototype.__prefixUrl = function (url) {\r\n            if (URL_REGEX.test(url)) {\r\n                return url;\r\n            }\r\n            return \"\" + config.baseUrl + url;\r\n        };\r\n        JsonapiCollection.prototype.__appendParams = function (url, params) {\r\n            if (params.length) {\r\n                var separator = url.indexOf('?') === -1 ? '?' : '&';\r\n                url += separator + params.join('&');\r\n            }\r\n            return url;\r\n        };\r\n        JsonapiCollection.prototype.__parametrize = function (params, scope) {\r\n            var _this = this;\r\n            if (scope === void 0) { scope = ''; }\r\n            var list = [];\r\n            Object.keys(params).forEach(function (key) {\r\n                if (params[key] instanceof Array) {\r\n                    if (config.paramArrayType === ParamArrayType.OBJECT_PATH) {\r\n                        list.push.apply(list, _this.__parametrize(params[key], key + \".\"));\r\n                    }\r\n                    else if (config.paramArrayType === ParamArrayType.COMMA_SEPARATED) {\r\n                        list.push({ key: \"\" + scope + key, value: params[key].join(',') });\r\n                    }\r\n                    else if (config.paramArrayType === ParamArrayType.MULTIPLE_PARAMS) {\r\n                        list.push.apply(list, params[key].map(function (param) { return ({ key: \"\" + scope + key, value: param }); }));\r\n                    }\r\n                    else if (config.paramArrayType === ParamArrayType.PARAM_ARRAY) {\r\n                        list.push.apply(list, params[key].map(function (param) { return ({ key: \"\" + scope + key + \"][\", value: param }); }));\r\n                    }\r\n                }\r\n                else if (typeof params[key] === 'object') {\r\n                    list.push.apply(list, _this.__parametrize(params[key], key + \".\"));\r\n                }\r\n                else {\r\n                    list.push({ key: \"\" + scope + key, value: params[key] });\r\n                }\r\n            });\r\n            return list;\r\n        };\r\n        JsonapiCollection.types = (BaseClass.types && BaseClass.types.length)\r\n            ? BaseClass.types.concat(GenericModel)\r\n            : [GenericModel];\r\n        JsonapiCollection.cache = BaseClass['cache'] === undefined\r\n            ? typeof window !== 'undefined'\r\n            : BaseClass['cache'];\r\n        JsonapiCollection.defaultModel = BaseClass['defaultModel'] || GenericModel;\r\n        return JsonapiCollection;\r\n    }(BaseClass));\r\n    return JsonapiCollection;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/decorateCollection.d.ts","text":"import { ICollectionConstructor, PureCollection } from 'datx';\r\nimport { IJsonapiCollection } from './interfaces/IJsonapiCollection';\r\nexport declare function decorateCollection(BaseClass: typeof PureCollection): ICollectionConstructor<PureCollection & IJsonapiCollection>;\r\n"}}

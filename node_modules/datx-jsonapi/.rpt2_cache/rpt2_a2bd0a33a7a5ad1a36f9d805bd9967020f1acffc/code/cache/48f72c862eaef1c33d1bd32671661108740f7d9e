{"map":"{\"version\":3,\"file\":\"decorateView.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/decorateView.ts\"],\"names\":[],\"mappings\":\";AAYA,MAAM,uBAA0B,SAAsB;IACpD;QAAmE,uCAAS;QAG1E,qBACE,SAAqC,EACrC,UAA8B,EAC9B,UAAsC,EACtC,MAAyC,EACzC,MAAuB;YADvB,uBAAA,EAAA,WAAyC;YACzC,uBAAA,EAAA,cAAuB;YALzB,YAOE,kBAAM,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,SAEzD;YADC,KAAI,CAAC,YAAY,GAAG,UAAU,CAAC;;QACjC,CAAC;QAEM,0BAAI,GAAX,UAAY,IAAgB;YAC1B,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAChB;YAED,OAAO,IAAuB,CAAC;QACjC,CAAC;QAED;;;;;;WAMG;QACI,2BAAK,GAAZ,UACE,EAAiB,EACjB,OAAyB;YAEzB,OAAO,IAAI,CAAC,YAAY;iBACrB,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,OAAO,CAAC;iBAClC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAyB,CAAC;QACrE,CAAC;QAED;;;;;WAKG;QACI,8BAAQ,GAAf,UACE,OAAyB;YAEzB,OAAO,IAAI,CAAC,YAAY;iBACrB,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC;iBACjC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAyB,CAAC;QACrE,CAAC;QAEO,uCAAiB,GAAzB,UAA0B,QAAqB;YAC7C,IAAI,QAAQ,CAAC,IAAI,EAAE;gBACjB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACzB;YACD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1B,OAAO,QAAQ,CAAC;QAClB,CAAC;QACH,kBAAC;IAAD,CAAC,AA7DD,CAAmE,SAAS,GA6D3E;IAED,aAAa;IACb,OAAO,WAAgE,CAAC;AAC1E,CAAC\",\"sourcesContent\":[\"import {IIdentifier, IModelConstructor, IType, IViewConstructor, PureModel, View} from 'datx';\\nimport {IDictionary, IRawModel, mapItems} from 'datx-utils';\\n\\nimport {IJsonapiCollection} from './interfaces/IJsonapiCollection';\\nimport {IJsonapiModel} from './interfaces/IJsonapiModel';\\nimport {IJsonapiView} from './interfaces/IJsonapiView';\\nimport {IRequestOptions} from './interfaces/IRequestOptions';\\nimport {IDefinition, IRelationship, IRequest, IResponse} from './interfaces/JsonApi';\\nimport {Response} from './Response';\\n\\ndeclare var window: object|undefined;\\n\\nexport function decorateView<U>(BaseClass: typeof View) {\\n  class JsonapiView<M extends IJsonapiModel = IJsonapiModel> extends BaseClass {\\n    protected __collection: IJsonapiCollection;\\n\\n    constructor(\\n      modelType: IModelConstructor<M>|IType,\\n      collection: IJsonapiCollection,\\n      sortMethod?: string|((item: M) => any),\\n      models: Array<IIdentifier|PureModel> = [],\\n      unique: boolean = false,\\n    ) {\\n      super(modelType, collection, sortMethod, models, unique);\\n      this.__collection = collection;\\n    }\\n\\n    public sync(body?: IResponse): M|Array<M>|null {\\n      const data = this.__collection.sync(body);\\n      if (data) {\\n        this.add(data);\\n      }\\n\\n      return data as M|Array<M>|null;\\n    }\\n\\n    /**\\n     * Fetch the records with the given type and id\\n     *\\n     * @param {number|string} type Record id\\n     * @param {IRequestOptions} [options] Server options\\n     * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\\n     */\\n    public fetch(\\n      id: number|string,\\n      options?: IRequestOptions,\\n    ): Promise<Response<M>> {\\n      return this.__collection\\n        .fetch(this.modelType, id, options)\\n        .then(this.__addFromResponse.bind(this)) as Promise<Response<M>>;\\n    }\\n\\n    /**\\n     * Fetch the first page of records of the given type\\n     *\\n     * @param {IRequestOptions} [options] Server options\\n     * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\\n     */\\n    public fetchAll(\\n      options?: IRequestOptions,\\n    ): Promise<Response<M>> {\\n      return this.__collection\\n        .fetchAll(this.modelType, options)\\n        .then(this.__addFromResponse.bind(this)) as Promise<Response<M>>;\\n    }\\n\\n    private __addFromResponse(response: Response<M>) {\\n      if (response.data) {\\n        this.add(response.data);\\n      }\\n      response.views.push(this);\\n\\n      return response;\\n    }\\n  }\\n\\n  // @ts-ignore\\n  return JsonapiView as IViewConstructor<IJsonapiModel, U & IJsonapiView>;\\n}\\n\"]}","code":"import * as tslib_1 from \"tslib\";\r\nexport function decorateView(BaseClass) {\r\n    var JsonapiView = /** @class */ (function (_super) {\r\n        tslib_1.__extends(JsonapiView, _super);\r\n        function JsonapiView(modelType, collection, sortMethod, models, unique) {\r\n            if (models === void 0) { models = []; }\r\n            if (unique === void 0) { unique = false; }\r\n            var _this = _super.call(this, modelType, collection, sortMethod, models, unique) || this;\r\n            _this.__collection = collection;\r\n            return _this;\r\n        }\r\n        JsonapiView.prototype.sync = function (body) {\r\n            var data = this.__collection.sync(body);\r\n            if (data) {\r\n                this.add(data);\r\n            }\r\n            return data;\r\n        };\r\n        /**\r\n         * Fetch the records with the given type and id\r\n         *\r\n         * @param {number|string} type Record id\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiView.prototype.fetch = function (id, options) {\r\n            return this.__collection\r\n                .fetch(this.modelType, id, options)\r\n                .then(this.__addFromResponse.bind(this));\r\n        };\r\n        /**\r\n         * Fetch the first page of records of the given type\r\n         *\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiView.prototype.fetchAll = function (options) {\r\n            return this.__collection\r\n                .fetchAll(this.modelType, options)\r\n                .then(this.__addFromResponse.bind(this));\r\n        };\r\n        JsonapiView.prototype.__addFromResponse = function (response) {\r\n            if (response.data) {\r\n                this.add(response.data);\r\n            }\r\n            response.views.push(this);\r\n            return response;\r\n        };\r\n        return JsonapiView;\r\n    }(BaseClass));\r\n    // @ts-ignore\r\n    return JsonapiView;\r\n}\r\n//# sourceMappingURL=decorateView.js.map","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/decorateView.d.ts","text":"import { IViewConstructor, View } from 'datx';\r\nimport { IJsonapiModel } from './interfaces/IJsonapiModel';\r\nimport { IJsonapiView } from './interfaces/IJsonapiView';\r\nexport declare function decorateView<U>(BaseClass: typeof View): IViewConstructor<IJsonapiModel, U & IJsonapiView>;\r\n"}}

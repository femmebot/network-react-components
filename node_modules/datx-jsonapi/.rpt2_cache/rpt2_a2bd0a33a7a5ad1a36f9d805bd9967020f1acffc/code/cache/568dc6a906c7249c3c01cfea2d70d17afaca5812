{"map":"{\"version\":3,\"file\":\"Response.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/Response.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import {getModelId, getModelType, modelToJSON, PureModel, updateModel, updateModelId, View} from 'datx';\\nimport {assignComputed, IDictionary} from 'datx-utils';\\nimport {action, extendObservable, IComputedValue} from 'mobx';\\n\\nimport {IHeaders} from './interfaces/IHeaders';\\nimport {IJsonapiModel} from './interfaces/IJsonapiModel';\\nimport {IRawResponse} from './interfaces/IRawResponse';\\nimport {IRequestOptions} from './interfaces/IRequestOptions';\\nimport {IResponseHeaders} from './interfaces/IResponseHeaders';\\nimport {IError, IJsonApiObject, ILink} from './interfaces/JsonApi';\\n\\nimport {GenericModel} from './GenericModel';\\nimport {flattenModel} from './helpers/model';\\nimport {IJsonapiCollection} from './interfaces/IJsonapiCollection';\\nimport {fetchLink} from './NetworkUtils';\\n\\nexport class Response<T extends IJsonapiModel> {\\n  /**\\n   * API response data (synced with the store)\\n   *\\n   * @type {(PureModel|Array<PureModel>)}\\n   * @memberOf Response\\n   */\\n  public data: T|Array<T>|null = null;\\n\\n  /**\\n   * API response metadata\\n   *\\n   * @type {object}\\n   * @memberOf Response\\n   */\\n  public meta?: object;\\n\\n  /**\\n   * API response links\\n   *\\n   * @type {object}\\n   * @memberOf Response\\n   */\\n  public links?: IDictionary<ILink>;\\n\\n  /**\\n   * The JSON API object returned by the server\\n   *\\n   * @type {JsonApi.IJsonApiObject}\\n   * @memberOf Response\\n   */\\n  public jsonapi?: IJsonApiObject;\\n\\n  /**\\n   * Headers received from the API call\\n   *\\n   * @type {IResponseHeaders}\\n   * @memberOf Response\\n   */\\n  public headers?: IResponseHeaders;\\n\\n  /**\\n   * Headers sent to the server\\n   *\\n   * @type {IHeaders}\\n   * @memberOf Response\\n   */\\n  public requestHeaders?: IHeaders;\\n\\n  /**\\n   * Request error\\n   *\\n   * @type {(Array<JsonApi.IError>|Error)}\\n   * @memberOf Response\\n   */\\n  public error?: Array<IError>|Error;\\n\\n  /**\\n   * First data page\\n   *\\n   * @type {Promise<Response>}\\n   * @memberOf Response\\n   */\\n  public first?: Promise<Response<T>>; // Handled by the __fetchLink\\n\\n  /**\\n   * Previous data page\\n   *\\n   * @type {Promise<Response>}\\n   * @memberOf Response\\n   */\\n  public prev?: Promise<Response<T>>; // Handled by the __fetchLink\\n\\n  /**\\n   * Next data page\\n   *\\n   * @type {Promise<Response>}\\n   * @memberOf Response\\n   */\\n  public next?: Promise<Response<T>>; // Handled by the __fetchLink\\n\\n  /**\\n   * Last data page\\n   *\\n   * @type {Promise<Response>}\\n   * @memberOf Response\\n   */\\n  public last?: Promise<Response<T>>; // Handled by the __fetchLink\\n\\n  /**\\n   * Received HTTP status\\n   *\\n   * @type {number}\\n   * @memberOf Response\\n   */\\n  public status?: number;\\n\\n  public views: Array<View> = [];\\n\\n  /**\\n   * Related Store\\n   *\\n   * @private\\n   * @type {IJsonapiCollection}\\n   * @memberOf Response\\n   */\\n  private __collection?: IJsonapiCollection;\\n\\n  /**\\n   * Server options\\n   *\\n   * @private\\n   * @type {IRequestOptions}\\n   * @memberOf Response\\n   */\\n  private __options?: IRequestOptions;\\n\\n  /**\\n   * Original server response\\n   *\\n   * @private\\n   * @type {IRawResponse}\\n   * @memberOf Response\\n   */\\n  private __response: IRawResponse;\\n\\n  /**\\n   * Cache used for the link requests\\n   *\\n   * @private\\n   * @type {IDictionary<Promise<Response>>}\\n   * @memberOf Response\\n   */\\n  private __cache: IDictionary<Promise<Response<T>>> = {};\\n\\n  constructor(\\n    response: IRawResponse,\\n    collection?: IJsonapiCollection,\\n    options?: IRequestOptions,\\n    overrideData?: T|Array<T>,\\n    views?: Array<View>,\\n  ) {\\n    this.__collection = collection;\\n    this.__options = options;\\n    this.__response = response;\\n    this.status = response.status;\\n    if (views) {\\n      this.views = views;\\n    }\\n\\n    if (collection) {\\n      this.data = overrideData ? collection.add<T>(overrideData as T) : collection.sync<T>(response.data);\\n    } else if (response.data) {\\n      // The case when a record is not in a store and save/remove are used\\n      const resp = response.data;\\n\\n      if (resp.data) {\\n        if (resp.data instanceof Array) {\\n          throw new Error('A save/remove operation should not return an array of results');\\n        }\\n\\n        this.data = overrideData || new GenericModel(flattenModel(resp.data)) as T;\\n      }\\n    }\\n\\n    this.views.forEach((view) => {\\n      if (this.data) {\\n        view.add(this.data);\\n      }\\n    });\\n\\n    this.meta = (response.data && response.data.meta) || {};\\n    this.links = (response.data && response.data.links) || {};\\n    this.jsonapi = (response.data && response.data.jsonapi) || {};\\n    this.headers = response.headers;\\n    this.requestHeaders = response.requestHeaders;\\n    this.error = (response.data && response.data.errors) || response.error;\\n\\n    const linkGetter: IDictionary<IComputedValue<Promise<Response<T>>>> = {};\\n    if (this.links) {\\n      Object.keys(this.links).forEach((link: string) => {\\n        assignComputed(this, link, () => this.__fetchLink(link));\\n      });\\n    }\\n\\n    Object.freeze(this);\\n\\n    if (this.error) {\\n      throw this;\\n    }\\n  }\\n\\n  /**\\n   * Replace the response record with a different record. Used to replace a record while keeping the same reference\\n   *\\n   * @param {PureModel} data New data\\n   * @returns {Response}\\n   *\\n   * @memberOf Response\\n   */\\n  @action public replaceData(data: T): Response<T> {\\n    const record: PureModel = this.data as PureModel;\\n    if (record === data) {\\n      return this;\\n    }\\n\\n    const oldId = getModelId(data);\\n    const newId = getModelId(record);\\n    const type = getModelType(record);\\n\\n    const viewIndexes = this.views.map((view) => view.list.indexOf(record));\\n\\n    if (this.__collection) {\\n      this.__collection.remove(record);\\n      this.__collection.add(data);\\n    }\\n\\n    updateModel(data, modelToJSON(record));\\n    updateModelId(data, newId);\\n\\n    this.views.forEach((view, index) => {\\n      if (viewIndexes[index] !== -1) {\\n        view.list[viewIndexes[index]] = data;\\n      }\\n    });\\n\\n    return new Response(this.__response, this.__collection, this.__options, data);\\n  }\\n\\n  /**\\n   * Function called when a link is being fetched. The returned value is cached\\n   *\\n   * @private\\n   * @param {any} name Link name\\n   * @returns Promise that resolves with a Response object\\n   *\\n   * @memberOf Response\\n   */\\n  private __fetchLink(name) {\\n    if (!this.__cache[name]) {\\n      const link: ILink|null = (this.links && name in this.links) ? this.links[name] : null;\\n\\n      if (link) {\\n        this.__cache[name] = fetchLink<T>(\\n          link, this.__collection, this.requestHeaders, this.__options, this.views,\\n        );\\n      }\\n    }\\n\\n    return this.__cache[name];\\n  }\\n}\\n\"]}","code":"import * as tslib_1 from \"tslib\";\r\nimport { getModelId, getModelType, modelToJSON, updateModel, updateModelId } from 'datx';\r\nimport { assignComputed } from 'datx-utils';\r\nimport { action } from 'mobx';\r\nimport { GenericModel } from './GenericModel';\r\nimport { flattenModel } from './helpers/model';\r\nimport { fetchLink } from './NetworkUtils';\r\nvar Response = /** @class */ (function () {\r\n    function Response(response, collection, options, overrideData, views) {\r\n        var _this = this;\r\n        /**\r\n         * API response data (synced with the store)\r\n         *\r\n         * @type {(PureModel|Array<PureModel>)}\r\n         * @memberOf Response\r\n         */\r\n        this.data = null;\r\n        this.views = [];\r\n        /**\r\n         * Cache used for the link requests\r\n         *\r\n         * @private\r\n         * @type {IDictionary<Promise<Response>>}\r\n         * @memberOf Response\r\n         */\r\n        this.__cache = {};\r\n        this.__collection = collection;\r\n        this.__options = options;\r\n        this.__response = response;\r\n        this.status = response.status;\r\n        if (views) {\r\n            this.views = views;\r\n        }\r\n        if (collection) {\r\n            this.data = overrideData ? collection.add(overrideData) : collection.sync(response.data);\r\n        }\r\n        else if (response.data) {\r\n            // The case when a record is not in a store and save/remove are used\r\n            var resp = response.data;\r\n            if (resp.data) {\r\n                if (resp.data instanceof Array) {\r\n                    throw new Error('A save/remove operation should not return an array of results');\r\n                }\r\n                this.data = overrideData || new GenericModel(flattenModel(resp.data));\r\n            }\r\n        }\r\n        this.views.forEach(function (view) {\r\n            if (_this.data) {\r\n                view.add(_this.data);\r\n            }\r\n        });\r\n        this.meta = (response.data && response.data.meta) || {};\r\n        this.links = (response.data && response.data.links) || {};\r\n        this.jsonapi = (response.data && response.data.jsonapi) || {};\r\n        this.headers = response.headers;\r\n        this.requestHeaders = response.requestHeaders;\r\n        this.error = (response.data && response.data.errors) || response.error;\r\n        var linkGetter = {};\r\n        if (this.links) {\r\n            Object.keys(this.links).forEach(function (link) {\r\n                assignComputed(_this, link, function () { return _this.__fetchLink(link); });\r\n            });\r\n        }\r\n        Object.freeze(this);\r\n        if (this.error) {\r\n            throw this;\r\n        }\r\n    }\r\n    /**\r\n     * Replace the response record with a different record. Used to replace a record while keeping the same reference\r\n     *\r\n     * @param {PureModel} data New data\r\n     * @returns {Response}\r\n     *\r\n     * @memberOf Response\r\n     */\r\n    Response.prototype.replaceData = function (data) {\r\n        var record = this.data;\r\n        if (record === data) {\r\n            return this;\r\n        }\r\n        var oldId = getModelId(data);\r\n        var newId = getModelId(record);\r\n        var type = getModelType(record);\r\n        var viewIndexes = this.views.map(function (view) { return view.list.indexOf(record); });\r\n        if (this.__collection) {\r\n            this.__collection.remove(record);\r\n            this.__collection.add(data);\r\n        }\r\n        updateModel(data, modelToJSON(record));\r\n        updateModelId(data, newId);\r\n        this.views.forEach(function (view, index) {\r\n            if (viewIndexes[index] !== -1) {\r\n                view.list[viewIndexes[index]] = data;\r\n            }\r\n        });\r\n        return new Response(this.__response, this.__collection, this.__options, data);\r\n    };\r\n    /**\r\n     * Function called when a link is being fetched. The returned value is cached\r\n     *\r\n     * @private\r\n     * @param {any} name Link name\r\n     * @returns Promise that resolves with a Response object\r\n     *\r\n     * @memberOf Response\r\n     */\r\n    Response.prototype.__fetchLink = function (name) {\r\n        if (!this.__cache[name]) {\r\n            var link = (this.links && name in this.links) ? this.links[name] : null;\r\n            if (link) {\r\n                this.__cache[name] = fetchLink(link, this.__collection, this.requestHeaders, this.__options, this.views);\r\n            }\r\n        }\r\n        return this.__cache[name];\r\n    };\r\n    tslib_1.__decorate([\r\n        action\r\n    ], Response.prototype, \"replaceData\", null);\r\n    return Response;\r\n}());\r\nexport { Response };\r\n//# sourceMappingURL=Response.js.map","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/Response.d.ts","text":"import { View } from 'datx';\r\nimport { IDictionary } from 'datx-utils';\r\nimport { IHeaders } from './interfaces/IHeaders';\r\nimport { IJsonapiModel } from './interfaces/IJsonapiModel';\r\nimport { IRawResponse } from './interfaces/IRawResponse';\r\nimport { IRequestOptions } from './interfaces/IRequestOptions';\r\nimport { IResponseHeaders } from './interfaces/IResponseHeaders';\r\nimport { IError, IJsonApiObject, ILink } from './interfaces/JsonApi';\r\nimport { IJsonapiCollection } from './interfaces/IJsonapiCollection';\r\nexport declare class Response<T extends IJsonapiModel> {\r\n    /**\r\n     * API response data (synced with the store)\r\n     *\r\n     * @type {(PureModel|Array<PureModel>)}\r\n     * @memberOf Response\r\n     */\r\n    data: T | Array<T> | null;\r\n    /**\r\n     * API response metadata\r\n     *\r\n     * @type {object}\r\n     * @memberOf Response\r\n     */\r\n    meta?: object;\r\n    /**\r\n     * API response links\r\n     *\r\n     * @type {object}\r\n     * @memberOf Response\r\n     */\r\n    links?: IDictionary<ILink>;\r\n    /**\r\n     * The JSON API object returned by the server\r\n     *\r\n     * @type {JsonApi.IJsonApiObject}\r\n     * @memberOf Response\r\n     */\r\n    jsonapi?: IJsonApiObject;\r\n    /**\r\n     * Headers received from the API call\r\n     *\r\n     * @type {IResponseHeaders}\r\n     * @memberOf Response\r\n     */\r\n    headers?: IResponseHeaders;\r\n    /**\r\n     * Headers sent to the server\r\n     *\r\n     * @type {IHeaders}\r\n     * @memberOf Response\r\n     */\r\n    requestHeaders?: IHeaders;\r\n    /**\r\n     * Request error\r\n     *\r\n     * @type {(Array<JsonApi.IError>|Error)}\r\n     * @memberOf Response\r\n     */\r\n    error?: Array<IError> | Error;\r\n    /**\r\n     * First data page\r\n     *\r\n     * @type {Promise<Response>}\r\n     * @memberOf Response\r\n     */\r\n    first?: Promise<Response<T>>;\r\n    /**\r\n     * Previous data page\r\n     *\r\n     * @type {Promise<Response>}\r\n     * @memberOf Response\r\n     */\r\n    prev?: Promise<Response<T>>;\r\n    /**\r\n     * Next data page\r\n     *\r\n     * @type {Promise<Response>}\r\n     * @memberOf Response\r\n     */\r\n    next?: Promise<Response<T>>;\r\n    /**\r\n     * Last data page\r\n     *\r\n     * @type {Promise<Response>}\r\n     * @memberOf Response\r\n     */\r\n    last?: Promise<Response<T>>;\r\n    /**\r\n     * Received HTTP status\r\n     *\r\n     * @type {number}\r\n     * @memberOf Response\r\n     */\r\n    status?: number;\r\n    views: Array<View>;\r\n    /**\r\n     * Related Store\r\n     *\r\n     * @private\r\n     * @type {IJsonapiCollection}\r\n     * @memberOf Response\r\n     */\r\n    private __collection?;\r\n    /**\r\n     * Server options\r\n     *\r\n     * @private\r\n     * @type {IRequestOptions}\r\n     * @memberOf Response\r\n     */\r\n    private __options?;\r\n    /**\r\n     * Original server response\r\n     *\r\n     * @private\r\n     * @type {IRawResponse}\r\n     * @memberOf Response\r\n     */\r\n    private __response;\r\n    /**\r\n     * Cache used for the link requests\r\n     *\r\n     * @private\r\n     * @type {IDictionary<Promise<Response>>}\r\n     * @memberOf Response\r\n     */\r\n    private __cache;\r\n    constructor(response: IRawResponse, collection?: IJsonapiCollection, options?: IRequestOptions, overrideData?: T | Array<T>, views?: Array<View>);\r\n    /**\r\n     * Replace the response record with a different record. Used to replace a record while keeping the same reference\r\n     *\r\n     * @param {PureModel} data New data\r\n     * @returns {Response}\r\n     *\r\n     * @memberOf Response\r\n     */\r\n    replaceData(data: T): Response<T>;\r\n    /**\r\n     * Function called when a link is being fetched. The returned value is cached\r\n     *\r\n     * @private\r\n     * @param {any} name Link name\r\n     * @returns Promise that resolves with a Response object\r\n     *\r\n     * @memberOf Response\r\n     */\r\n    private __fetchLink(name);\r\n}\r\n"}}

{"map":"{\"version\":3,\"file\":\"decorateCollection.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/decorateCollection.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import {\\n  getModelType,\\n  ICollectionConstructor,\\n  IIdentifier,\\n  IModelConstructor,\\n  initModelRef,\\n  IType,\\n  PureCollection,\\n  PureModel,\\n  ReferenceType,\\n  updateModel,\\n} from 'datx';\\nimport {IDictionary, IRawModel, mapItems} from 'datx-utils';\\nimport {action} from 'mobx';\\n\\nimport {clearAllCache, clearCacheByType} from './cache';\\nimport {URL_REGEX} from './consts';\\nimport {ParamArrayType} from './enums/ParamArrayType';\\nimport {GenericModel} from './GenericModel';\\nimport {flattenModel, removeModel} from './helpers/model';\\nimport {getValue, isBrowser} from './helpers/utils';\\nimport {IFilters} from './interfaces/IFilters';\\nimport {IHeaders} from './interfaces/IHeaders';\\nimport {IJsonapiCollection} from './interfaces/IJsonapiCollection';\\nimport {IJsonapiModel} from './interfaces/IJsonapiModel';\\nimport {IRequestOptions} from './interfaces/IRequestOptions';\\nimport {IDefinition, IRecord, IRelationship, IRequest, IResponse} from './interfaces/JsonApi';\\nimport {config, fetch, read} from './NetworkUtils';\\nimport {Response} from './Response';\\n\\nexport function decorateCollection(BaseClass: typeof PureCollection) {\\n  class JsonapiCollection extends BaseClass {\\n    public static types = (BaseClass.types && BaseClass.types.length)\\n      ? BaseClass.types.concat(GenericModel)\\n      : [GenericModel];\\n\\n    public static cache: boolean = BaseClass['cache'] === undefined\\n      ? isBrowser\\n      : BaseClass['cache'];\\n\\n    public static defaultModel = BaseClass['defaultModel'] || GenericModel;\\n\\n    @action public sync<T extends IJsonapiModel = IJsonapiModel>(body?: IResponse): T|Array<T>|null {\\n      if (!body) {\\n        return null;\\n      }\\n      const data: T|Array<T>|null = this.__iterateEntries(body, (obj: IRecord) => this.__addRecord<T>(obj));\\n      this.__iterateEntries(body, this.__updateRelationships.bind(this));\\n\\n      return data;\\n    }\\n\\n    /**\\n     * Fetch the records with the given type and id\\n     *\\n     * @param {string} type Record type\\n     * @param {number|string} type Record id\\n     * @param {IRequestOptions} [options] Server options\\n     * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\\n     */\\n    public fetch<T extends IJsonapiModel = IJsonapiModel>(\\n      type: IType|IModelConstructor<T>,\\n      id: number|string,\\n      options?: IRequestOptions,\\n    ): Promise<Response<T>> {\\n      const modelType = getModelType(type);\\n      const query = this.__prepareQuery(modelType, id, undefined, options);\\n\\n      return read<T>(query.url, this, query.headers, options)\\n        .then((res) => this.__handleErrors<T>(res));\\n    }\\n\\n    /**\\n     * Fetch the first page of records of the given type\\n     *\\n     * @param {string} type Record type\\n     * @param {IRequestOptions} [options] Server options\\n     * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\\n     */\\n    public fetchAll<T extends IJsonapiModel = IJsonapiModel>(\\n      type: IType|IModelConstructor<T>,\\n      options?: IRequestOptions,\\n    ): Promise<Response<T>> {\\n      const modelType = getModelType(type);\\n      const query = this.__prepareQuery(modelType, undefined, undefined, options);\\n\\n      return read<T>(query.url, this, query.headers, options)\\n        .then((res) => this.__handleErrors<T>(res));\\n    }\\n\\n    public request<T extends IJsonapiModel = IJsonapiModel>(\\n      url: string,\\n      method: string = 'GET',\\n      data?: object,\\n      options?: IRequestOptions,\\n    ): Promise<Response<T>> {\\n      const query = this.__buildUrl(url, data, options);\\n\\n      return fetch<T>({url: query.url, options, data, method, collection: this});\\n    }\\n\\n    public remove(type: IType|typeof PureModel, id?: IIdentifier, remote?: boolean|IRequestOptions);\\n    public remove(model: PureModel, remote?: boolean|IRequestOptions);\\n    @action public remove(\\n      obj: IType|typeof PureModel|PureModel,\\n      id?: IIdentifier|boolean|IRequestOptions,\\n      remote?: boolean|IRequestOptions,\\n    ) {\\n      const remove = (typeof id === 'boolean' || typeof id === 'object') ? id : remote;\\n      const modelId = (typeof id !== 'boolean' && typeof id !== 'object') ? id : undefined;\\n      const type = getModelType(obj);\\n      const model = this.find(type, modelId);\\n\\n      if (model && remove) {\\n        return removeModel(model, typeof remove === 'object' ? remove : undefined);\\n      }\\n\\n      if (model) {\\n        super.remove(model);\\n      }\\n      clearCacheByType(type);\\n\\n      return Promise.resolve();\\n    }\\n\\n    @action public removeAll(type: string | number | typeof PureModel) {\\n      super.removeAll(type);\\n      clearCacheByType(getModelType(type));\\n    }\\n\\n    @action public reset() {\\n      super.reset();\\n      clearAllCache();\\n    }\\n\\n    /**\\n     * Function used to handle response errors\\n     *\\n     * @private\\n     * @param {Response} response API response\\n     * @returns API response\\n     */\\n    private __handleErrors<T extends IJsonapiModel>(response: Response<T>) {\\n      if (response.error) {\\n        throw response.error;\\n      }\\n\\n      return response;\\n    }\\n\\n    private __addRecord<T extends IJsonapiModel = IJsonapiModel>(obj: IRecord): T {\\n      const staticCollection = this.constructor as typeof PureCollection;\\n      const {type, id} = obj;\\n      let record: T|null = this.find(type, id) as T|null;\\n      const flattened: IRawModel = flattenModel(obj);\\n\\n      if (record) {\\n        updateModel(record, flattened);\\n      } else if (staticCollection.types.filter((item) => item.type === type).length) {\\n        record = this.add<T>(flattened, type);\\n      } else {\\n        record = this.add(new GenericModel(flattened)) as T;\\n      }\\n\\n      return record;\\n    }\\n\\n    private __updateRelationships(obj: IRecord): void {\\n      const record: PureModel|null = this.find(obj.type, obj.id);\\n      const refs: Array<string> = obj.relationships ? Object.keys(obj.relationships) : [];\\n      refs.forEach((ref: string) => {\\n        const items = (obj.relationships as IDictionary<IRelationship>)[ref].data;\\n        if (items instanceof Array && items.length < 1) {\\n          // it's only possible to update items with one ore more refs. Early exit\\n          return;\\n        }\\n        if (items && record) {\\n          const models: PureModel|Array<PureModel>|IIdentifier|null = mapItems(\\n            items,\\n            (def: IDefinition) => this.find(def.type, def.id) || def.id,\\n          ) || null;\\n\\n          const itemType: string = items instanceof Array ? items[0].type : items.type;\\n          if (ref in record) {\\n            record[ref] = models;\\n          } else {\\n            initModelRef(record, ref, {model: itemType, type: ReferenceType.TO_ONE_OR_MANY}, models);\\n          }\\n        }\\n      });\\n    }\\n\\n    private __iterateEntries<T extends IJsonapiModel>(body: IResponse, fn: (item: IRecord) => T) {\\n      mapItems((body && body.included) || [], fn);\\n\\n      return mapItems((body && body.data) || [], fn);\\n    }\\n\\n    private __prepareQuery(\\n      type: IType,\\n      id?: number|string,\\n      data?: IRequest,\\n      options?: IRequestOptions,\\n    ): {\\n      url: string;\\n      data?: object;\\n      headers: IHeaders;\\n    } {\\n      const staticCollection = this.constructor as typeof PureCollection;\\n      const model: PureModel = staticCollection.types.filter((item) => item.type === type)[0];\\n      const path: string = model\\n        ? (getValue<string>(model['endpoint']) || model['baseUrl'] || getModelType(model))\\n        : type;\\n\\n      const url: string = id ? `${path}/${id}` : `${path}`;\\n\\n      return this.__buildUrl(url, data, options);\\n    }\\n\\n    private __buildUrl(url: string, data?: IRequest, options?: IRequestOptions) {\\n      const headers: IDictionary<string> = (options && options.headers) || {};\\n\\n      const params: Array<string> = [\\n        ...this.__prepareFilters((options && options.filter) || {}),\\n        ...this.__prepareSort(options && options.sort),\\n        ...this.__prepareIncludes(options && options.include),\\n        ...this.__prepareFields((options && options.fields) || {}),\\n        ...this.__prepareRawParams((options && options.params) || []),\\n      ];\\n\\n      const baseUrl: string = this.__appendParams(this.__prefixUrl(url), params);\\n\\n      return {data, headers, url: baseUrl};\\n    }\\n\\n    private __prepareFilters(filters: IFilters): Array<string> {\\n      return this.__parametrize(filters).map((item) => `filter[${item.key}]=${item.value}`);\\n    }\\n\\n    private __prepareSort(sort?: string|Array<string>): Array<string> {\\n      return sort ? [`sort=${sort}`] : [];\\n    }\\n\\n    private __prepareIncludes(include?: string|Array<string>): Array<string> {\\n      return include ? [`include=${include}`] : [];\\n    }\\n\\n    private __prepareFields(fields: IDictionary<string|Array<string>>): Array<string> {\\n      const list: Array<string> = [];\\n\\n      Object.keys(fields).forEach((key) => {\\n        list.push(`fields[${key}]=${fields[key]}`);\\n      });\\n\\n      return list;\\n    }\\n\\n    private __prepareRawParams(params: Array<{key: string; value: string}|string>): Array<string> {\\n      return params.map((param) => {\\n        if (typeof param === 'string') {\\n          return param;\\n        }\\n\\n        return `${param.key}=${param.value}`;\\n      });\\n    }\\n\\n    private __prefixUrl(url) {\\n      if (URL_REGEX.test(url)) {\\n        return url;\\n      }\\n\\n      return `${config.baseUrl}${url}`;\\n    }\\n\\n    private __appendParams(url: string, params: Array<string>): string {\\n      let newUrl = url;\\n      if (params.length) {\\n        const separator = newUrl.indexOf('?') === -1 ? '?' : '&';\\n        newUrl += separator + params.join('&');\\n      }\\n\\n      return newUrl;\\n    }\\n\\n    private __parametrize(params: object, scope: string = '') {\\n      const list: Array<{key: string; value: string}> = [];\\n\\n      Object.keys(params).forEach((key) => {\\n        if (params[key] instanceof Array) {\\n          if (config.paramArrayType === ParamArrayType.OBJECT_PATH) {\\n            list.push(...this.__parametrize(params[key], `${key}.`));\\n          } else if (config.paramArrayType === ParamArrayType.COMMA_SEPARATED) {\\n            list.push({key: `${scope}${key}`, value: params[key].join(',')});\\n          } else if (config.paramArrayType === ParamArrayType.MULTIPLE_PARAMS) {\\n            list.push(...params[key].map((param) => ({key: `${scope}${key}`, value: param})));\\n          } else if (config.paramArrayType === ParamArrayType.PARAM_ARRAY) {\\n            list.push(...params[key].map((param) => ({key: `${scope}${key}][`, value: param})));\\n          }\\n        } else if (typeof params[key] === 'object') {\\n          list.push(...this.__parametrize(params[key], `${key}.`));\\n        } else {\\n          list.push({key: `${scope}${key}`, value: params[key]});\\n        }\\n      });\\n\\n      return list;\\n    }\\n  }\\n\\n  return JsonapiCollection as ICollectionConstructor<PureCollection & IJsonapiCollection>;\\n}\\n\"]}","code":"import * as tslib_1 from \"tslib\";\r\nimport { getModelType, initModelRef, ReferenceType, updateModel, } from 'datx';\r\nimport { mapItems } from 'datx-utils';\r\nimport { action } from 'mobx';\r\nimport { clearAllCache, clearCacheByType } from './cache';\r\nimport { URL_REGEX } from './consts';\r\nimport { ParamArrayType } from './enums/ParamArrayType';\r\nimport { GenericModel } from './GenericModel';\r\nimport { flattenModel, removeModel } from './helpers/model';\r\nimport { getValue, isBrowser } from './helpers/utils';\r\nimport { config, fetch, read } from './NetworkUtils';\r\nexport function decorateCollection(BaseClass) {\r\n    var JsonapiCollection = /** @class */ (function (_super) {\r\n        tslib_1.__extends(JsonapiCollection, _super);\r\n        function JsonapiCollection() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        JsonapiCollection.prototype.sync = function (body) {\r\n            var _this = this;\r\n            if (!body) {\r\n                return null;\r\n            }\r\n            var data = this.__iterateEntries(body, function (obj) { return _this.__addRecord(obj); });\r\n            this.__iterateEntries(body, this.__updateRelationships.bind(this));\r\n            return data;\r\n        };\r\n        /**\r\n         * Fetch the records with the given type and id\r\n         *\r\n         * @param {string} type Record type\r\n         * @param {number|string} type Record id\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiCollection.prototype.fetch = function (type, id, options) {\r\n            var _this = this;\r\n            var modelType = getModelType(type);\r\n            var query = this.__prepareQuery(modelType, id, undefined, options);\r\n            return read(query.url, this, query.headers, options)\r\n                .then(function (res) { return _this.__handleErrors(res); });\r\n        };\r\n        /**\r\n         * Fetch the first page of records of the given type\r\n         *\r\n         * @param {string} type Record type\r\n         * @param {IRequestOptions} [options] Server options\r\n         * @returns {Promise<Response>} Resolves with the Response object or rejects with an error\r\n         */\r\n        JsonapiCollection.prototype.fetchAll = function (type, options) {\r\n            var _this = this;\r\n            var modelType = getModelType(type);\r\n            var query = this.__prepareQuery(modelType, undefined, undefined, options);\r\n            return read(query.url, this, query.headers, options)\r\n                .then(function (res) { return _this.__handleErrors(res); });\r\n        };\r\n        JsonapiCollection.prototype.request = function (url, method, data, options) {\r\n            if (method === void 0) { method = 'GET'; }\r\n            var query = this.__buildUrl(url, data, options);\r\n            return fetch({ url: query.url, options: options, data: data, method: method, collection: this });\r\n        };\r\n        JsonapiCollection.prototype.remove = function (obj, id, remote) {\r\n            var remove = (typeof id === 'boolean' || typeof id === 'object') ? id : remote;\r\n            var modelId = (typeof id !== 'boolean' && typeof id !== 'object') ? id : undefined;\r\n            var type = getModelType(obj);\r\n            var model = this.find(type, modelId);\r\n            if (model && remove) {\r\n                return removeModel(model, typeof remove === 'object' ? remove : undefined);\r\n            }\r\n            if (model) {\r\n                _super.prototype.remove.call(this, model);\r\n            }\r\n            clearCacheByType(type);\r\n            return Promise.resolve();\r\n        };\r\n        JsonapiCollection.prototype.removeAll = function (type) {\r\n            _super.prototype.removeAll.call(this, type);\r\n            clearCacheByType(getModelType(type));\r\n        };\r\n        JsonapiCollection.prototype.reset = function () {\r\n            _super.prototype.reset.call(this);\r\n            clearAllCache();\r\n        };\r\n        /**\r\n         * Function used to handle response errors\r\n         *\r\n         * @private\r\n         * @param {Response} response API response\r\n         * @returns API response\r\n         */\r\n        JsonapiCollection.prototype.__handleErrors = function (response) {\r\n            if (response.error) {\r\n                throw response.error;\r\n            }\r\n            return response;\r\n        };\r\n        JsonapiCollection.prototype.__addRecord = function (obj) {\r\n            var staticCollection = this.constructor;\r\n            var type = obj.type, id = obj.id;\r\n            var record = this.find(type, id);\r\n            var flattened = flattenModel(obj);\r\n            if (record) {\r\n                updateModel(record, flattened);\r\n            }\r\n            else if (staticCollection.types.filter(function (item) { return item.type === type; }).length) {\r\n                record = this.add(flattened, type);\r\n            }\r\n            else {\r\n                record = this.add(new GenericModel(flattened));\r\n            }\r\n            return record;\r\n        };\r\n        JsonapiCollection.prototype.__updateRelationships = function (obj) {\r\n            var _this = this;\r\n            var record = this.find(obj.type, obj.id);\r\n            var refs = obj.relationships ? Object.keys(obj.relationships) : [];\r\n            refs.forEach(function (ref) {\r\n                var items = obj.relationships[ref].data;\r\n                if (items instanceof Array && items.length < 1) {\r\n                    // it's only possible to update items with one ore more refs. Early exit\r\n                    return;\r\n                }\r\n                if (items && record) {\r\n                    var models = mapItems(items, function (def) { return _this.find(def.type, def.id) || def.id; }) || null;\r\n                    var itemType = items instanceof Array ? items[0].type : items.type;\r\n                    if (ref in record) {\r\n                        record[ref] = models;\r\n                    }\r\n                    else {\r\n                        initModelRef(record, ref, { model: itemType, type: ReferenceType.TO_ONE_OR_MANY }, models);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        JsonapiCollection.prototype.__iterateEntries = function (body, fn) {\r\n            mapItems((body && body.included) || [], fn);\r\n            return mapItems((body && body.data) || [], fn);\r\n        };\r\n        JsonapiCollection.prototype.__prepareQuery = function (type, id, data, options) {\r\n            var staticCollection = this.constructor;\r\n            var model = staticCollection.types.filter(function (item) { return item.type === type; })[0];\r\n            var path = model\r\n                ? (getValue(model['endpoint']) || model['baseUrl'] || getModelType(model))\r\n                : type;\r\n            var url = id ? path + \"/\" + id : \"\" + path;\r\n            return this.__buildUrl(url, data, options);\r\n        };\r\n        JsonapiCollection.prototype.__buildUrl = function (url, data, options) {\r\n            var headers = (options && options.headers) || {};\r\n            var params = this.__prepareFilters((options && options.filter) || {}).concat(this.__prepareSort(options && options.sort), this.__prepareIncludes(options && options.include), this.__prepareFields((options && options.fields) || {}), this.__prepareRawParams((options && options.params) || []));\r\n            var baseUrl = this.__appendParams(this.__prefixUrl(url), params);\r\n            return { data: data, headers: headers, url: baseUrl };\r\n        };\r\n        JsonapiCollection.prototype.__prepareFilters = function (filters) {\r\n            return this.__parametrize(filters).map(function (item) { return \"filter[\" + item.key + \"]=\" + item.value; });\r\n        };\r\n        JsonapiCollection.prototype.__prepareSort = function (sort) {\r\n            return sort ? [\"sort=\" + sort] : [];\r\n        };\r\n        JsonapiCollection.prototype.__prepareIncludes = function (include) {\r\n            return include ? [\"include=\" + include] : [];\r\n        };\r\n        JsonapiCollection.prototype.__prepareFields = function (fields) {\r\n            var list = [];\r\n            Object.keys(fields).forEach(function (key) {\r\n                list.push(\"fields[\" + key + \"]=\" + fields[key]);\r\n            });\r\n            return list;\r\n        };\r\n        JsonapiCollection.prototype.__prepareRawParams = function (params) {\r\n            return params.map(function (param) {\r\n                if (typeof param === 'string') {\r\n                    return param;\r\n                }\r\n                return param.key + \"=\" + param.value;\r\n            });\r\n        };\r\n        JsonapiCollection.prototype.__prefixUrl = function (url) {\r\n            if (URL_REGEX.test(url)) {\r\n                return url;\r\n            }\r\n            return \"\" + config.baseUrl + url;\r\n        };\r\n        JsonapiCollection.prototype.__appendParams = function (url, params) {\r\n            var newUrl = url;\r\n            if (params.length) {\r\n                var separator = newUrl.indexOf('?') === -1 ? '?' : '&';\r\n                newUrl += separator + params.join('&');\r\n            }\r\n            return newUrl;\r\n        };\r\n        JsonapiCollection.prototype.__parametrize = function (params, scope) {\r\n            var _this = this;\r\n            if (scope === void 0) { scope = ''; }\r\n            var list = [];\r\n            Object.keys(params).forEach(function (key) {\r\n                if (params[key] instanceof Array) {\r\n                    if (config.paramArrayType === ParamArrayType.OBJECT_PATH) {\r\n                        list.push.apply(list, _this.__parametrize(params[key], key + \".\"));\r\n                    }\r\n                    else if (config.paramArrayType === ParamArrayType.COMMA_SEPARATED) {\r\n                        list.push({ key: \"\" + scope + key, value: params[key].join(',') });\r\n                    }\r\n                    else if (config.paramArrayType === ParamArrayType.MULTIPLE_PARAMS) {\r\n                        list.push.apply(list, params[key].map(function (param) { return ({ key: \"\" + scope + key, value: param }); }));\r\n                    }\r\n                    else if (config.paramArrayType === ParamArrayType.PARAM_ARRAY) {\r\n                        list.push.apply(list, params[key].map(function (param) { return ({ key: \"\" + scope + key + \"][\", value: param }); }));\r\n                    }\r\n                }\r\n                else if (typeof params[key] === 'object') {\r\n                    list.push.apply(list, _this.__parametrize(params[key], key + \".\"));\r\n                }\r\n                else {\r\n                    list.push({ key: \"\" + scope + key, value: params[key] });\r\n                }\r\n            });\r\n            return list;\r\n        };\r\n        JsonapiCollection.types = (BaseClass.types && BaseClass.types.length)\r\n            ? BaseClass.types.concat(GenericModel)\r\n            : [GenericModel];\r\n        JsonapiCollection.cache = BaseClass['cache'] === undefined\r\n            ? isBrowser\r\n            : BaseClass['cache'];\r\n        JsonapiCollection.defaultModel = BaseClass['defaultModel'] || GenericModel;\r\n        tslib_1.__decorate([\r\n            action\r\n        ], JsonapiCollection.prototype, \"sync\", null);\r\n        tslib_1.__decorate([\r\n            action\r\n        ], JsonapiCollection.prototype, \"remove\", null);\r\n        tslib_1.__decorate([\r\n            action\r\n        ], JsonapiCollection.prototype, \"removeAll\", null);\r\n        tslib_1.__decorate([\r\n            action\r\n        ], JsonapiCollection.prototype, \"reset\", null);\r\n        return JsonapiCollection;\r\n    }(BaseClass));\r\n    return JsonapiCollection;\r\n}\r\n//# sourceMappingURL=decorateCollection.js.map","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/decorateCollection.d.ts","text":"import { ICollectionConstructor, PureCollection } from 'datx';\r\nimport { IJsonapiCollection } from './interfaces/IJsonapiCollection';\r\nexport declare function decorateCollection(BaseClass: typeof PureCollection): ICollectionConstructor<PureCollection & IJsonapiCollection>;\r\n"}}

{"map":"{\"version\":3,\"file\":\"mixin.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/mixin.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAGL,YAAY,EACZ,OAAO,EACP,MAAM,GAKP,MAAM,MAAM,CAAC;AAEd,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAC,aAAa,EAAC,MAAM,iBAAiB,CAAC;AAC9C,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAiB5C,MAAM,kBACJ,IAAwE;IAExE,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;QACjB,aAAa;QACb,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC;KAC5B;SAAM,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;QAC7B,aAAa;QACb,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC;KACjC;SAAM,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;QACvB,aAAa;QACb,OAAO,YAAY,CAAI,IAAI,CAAC,CAAC;KAC9B;IAED,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;AAC5E,CAAC\",\"sourcesContent\":[\"import {\\n  ICollectionConstructor,\\n  IModelConstructor,\\n  isCollection,\\n  isModel,\\n  isView,\\n  IViewConstructor,\\n  PureCollection,\\n  PureModel,\\n  View,\\n} from 'datx';\\n\\nimport {decorateCollection} from './decorateCollection';\\nimport {decorateModel} from './decorateModel';\\nimport {decorateView} from './decorateView';\\nimport {IJsonapiCollection} from './interfaces/IJsonapiCollection';\\nimport {IJsonapiModel} from './interfaces/IJsonapiModel';\\nimport {IJsonapiView} from './interfaces/IJsonapiView';\\n\\nexport function jsonapi<T extends PureModel>(\\n  Base: IModelConstructor<T>,\\n): IModelConstructor<T & IJsonapiModel>;\\n\\nexport function jsonapi<T extends PureCollection>(\\n  Base: ICollectionConstructor<T>,\\n): ICollectionConstructor<T & IJsonapiCollection>;\\n\\nexport function jsonapi<T extends PureModel>(\\n  Base: IViewConstructor<T>,\\n): IViewConstructor<IJsonapiModel, T & IJsonapiView>;\\n\\nexport function jsonapi<T>(\\n  Base: IModelConstructor<T>|ICollectionConstructor<T>|IViewConstructor<T>,\\n) {\\n  if (isModel(Base)) {\\n    // @ts-ignore\\n    return decorateModel(Base);\\n  } else if (isCollection(Base)) {\\n    // @ts-ignore\\n    return decorateCollection(Base);\\n  } else if (isView(Base)) {\\n    // @ts-ignore\\n    return decorateView<T>(Base);\\n  }\\n\\n  throw new Error('The instance needs to be a model, collection or a view');\\n}\\n\"]}","code":"import { isCollection, isModel, isView, } from 'datx';\r\nimport { decorateCollection } from './decorateCollection';\r\nimport { decorateModel } from './decorateModel';\r\nimport { decorateView } from './decorateView';\r\nexport function jsonapi(Base) {\r\n    if (isModel(Base)) {\r\n        // @ts-ignore\r\n        return decorateModel(Base);\r\n    }\r\n    else if (isCollection(Base)) {\r\n        // @ts-ignore\r\n        return decorateCollection(Base);\r\n    }\r\n    else if (isView(Base)) {\r\n        // @ts-ignore\r\n        return decorateView(Base);\r\n    }\r\n    throw new Error('The instance needs to be a model, collection or a view');\r\n}\r\n//# sourceMappingURL=mixin.js.map","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/mixin.d.ts","text":"import { ICollectionConstructor, IModelConstructor, IViewConstructor, PureCollection, PureModel } from 'datx';\r\nimport { IJsonapiCollection } from './interfaces/IJsonapiCollection';\r\nimport { IJsonapiModel } from './interfaces/IJsonapiModel';\r\nimport { IJsonapiView } from './interfaces/IJsonapiView';\r\nexport declare function jsonapi<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<T & IJsonapiModel>;\r\nexport declare function jsonapi<T extends PureCollection>(Base: ICollectionConstructor<T>): ICollectionConstructor<T & IJsonapiCollection>;\r\nexport declare function jsonapi<T extends PureModel>(Base: IViewConstructor<T>): IViewConstructor<IJsonapiModel, T & IJsonapiView>;\r\n"}}

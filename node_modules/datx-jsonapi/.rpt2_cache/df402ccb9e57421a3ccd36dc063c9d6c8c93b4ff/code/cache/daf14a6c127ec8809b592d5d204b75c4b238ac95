{"code":"import { isCollection, isModel, isView, } from 'datx';\r\nimport { decorateCollection } from './decorateCollection';\r\nimport { decorateModel } from './decorateModel';\r\nimport { decorateView } from './decorateView';\r\nexport function jsonapi(Base) {\r\n    if (isModel(Base)) {\r\n        // @ts-ignore\r\n        return decorateModel(Base);\r\n    }\r\n    else if (isCollection(Base)) {\r\n        // @ts-ignore\r\n        return decorateCollection(Base);\r\n    }\r\n    else if (isView(Base)) {\r\n        // @ts-ignore\r\n        return decorateView(Base);\r\n    }\r\n    throw new Error('The instance needs to be a model, collection or a view');\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/mixin.d.ts","text":"import { ICollectionConstructor, IModelConstructor, IViewConstructor, PureCollection, PureModel } from 'datx';\r\nimport { IJsonapiCollection } from './interfaces/IJsonapiCollection';\r\nimport { IJsonapiModel } from './interfaces/IJsonapiModel';\r\nimport { IJsonapiView } from './interfaces/IJsonapiView';\r\nexport declare function jsonapi<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<T & IJsonapiModel>;\r\nexport declare function jsonapi<T extends PureCollection>(Base: ICollectionConstructor<T>): ICollectionConstructor<T & IJsonapiCollection>;\r\nexport declare function jsonapi<T extends PureModel>(Base: IViewConstructor<T>): IViewConstructor<IJsonapiModel, T & IJsonapiView>;\r\n"}}

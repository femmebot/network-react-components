{"code":"import { getModelType } from 'datx';\r\nvar cacheStorage = [];\r\nexport function saveCache(url, response, modelType) {\r\n    if ('data' in response && (!('error' in response) || !response.error) && response.data) {\r\n        // The type might need to be 100% correct - used only to clear the cache\r\n        var type = modelType || getModelType(response.data instanceof Array ? response.data[0] : response.data);\r\n        cacheStorage.push({ response: response, time: new Date(), type: type, url: url });\r\n    }\r\n}\r\nexport function getCache(url) {\r\n    return cacheStorage.find(function (item) { return item.url === url; });\r\n}\r\nexport function clearAllCache() {\r\n    cacheStorage.length = 0;\r\n}\r\nexport function clearCacheByType(type) {\r\n    cacheStorage = cacheStorage.filter(function (item) { return item.type !== type; });\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx-jsonapi/cache.d.ts","text":"import { IType } from 'datx';\r\nimport { IJsonapiModel } from './interfaces/IJsonapiModel';\r\nimport { Response } from './Response';\r\nexport interface ICache {\r\n    response: Response<IJsonapiModel>;\r\n    time: Date;\r\n    type: IType;\r\n    url: string;\r\n}\r\nexport declare function saveCache(url: string, response: Response<IJsonapiModel>, modelType?: string): void;\r\nexport declare function getCache(url: string): ICache | undefined;\r\nexport declare function clearAllCache(): void;\r\nexport declare function clearCacheByType(type: IType): void;\r\n"}}

{"code":"import * as tslib_1 from \"tslib\";\r\nimport { computed } from 'mobx';\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport { getRefId } from '../helpers/model/fields';\r\nimport { getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, } from '../helpers/model/utils';\r\n/**\r\n * Extends the model with the exposed meta data\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport function withMeta(Base) {\r\n    var BaseClass = Base;\r\n    if (!isModel(BaseClass)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var WithMeta = /** @class */ (function (_super) {\r\n        tslib_1.__extends(WithMeta, _super);\r\n        function WithMeta() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        Object.defineProperty(WithMeta.prototype, \"meta\", {\r\n            get: function () {\r\n                var _this = this;\r\n                var refDefs = getModelMetaKey(this, 'refs');\r\n                var refs = {};\r\n                Object.keys(refDefs).forEach(function (key) {\r\n                    refs[key] = getRefId(_this, key);\r\n                });\r\n                return Object.freeze({\r\n                    collection: getModelCollection(this),\r\n                    id: getModelId(this),\r\n                    original: getModelMetaKey(this, 'originalId') && getOriginalModel(this) || undefined,\r\n                    refs: refs,\r\n                    snapshot: modelToJSON(this),\r\n                    type: getModelType(this),\r\n                });\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        tslib_1.__decorate([\r\n            computed\r\n        ], WithMeta.prototype, \"meta\", null);\r\n        return WithMeta;\r\n    }(BaseClass));\r\n    return WithMeta;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aE1ldGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWl4aW5zL3dpdGhNZXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRTlCLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDakQsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsZUFBZSxFQUNmLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsV0FBVyxHQUNaLE1BQU0sd0JBQXdCLENBQUM7QUFLaEM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sbUJBQXdDLElBQTBCO0lBQ3RFLElBQU0sU0FBUyxHQUFHLElBQXdCLENBQUM7SUFFM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUN2QixNQUFNLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUM3QjtJQUVEO1FBQXVCLG9DQUFTO1FBQWhDOztRQWlCQSxDQUFDO1FBaEJXLHNCQUFXLDBCQUFJO2lCQUFmO2dCQUFWLGlCQWVDO2dCQWRDLElBQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzlDLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO29CQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO29CQUNuQixVQUFVLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDO29CQUNwQyxFQUFFLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDcEIsUUFBUSxFQUFFLGVBQWUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUztvQkFDcEYsSUFBSSxNQUFBO29CQUNKLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDO29CQUMzQixJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQztpQkFDekIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQzs7O1dBQUE7UUFmUztZQUFULFFBQVE7NENBZVI7UUFDSCxlQUFDO0tBQUEsQUFqQkQsQ0FBdUIsU0FBUyxHQWlCL0I7SUFFRCxPQUFPLFFBQWdELENBQUM7QUFDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29tcHV0ZWR9IGZyb20gJ21vYngnO1xuXG5pbXBvcnQge0RFQ09SQVRFX01PREVMfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHtlcnJvcn0gZnJvbSAnLi4vaGVscGVycy9mb3JtYXQnO1xuaW1wb3J0IHtpc01vZGVsfSBmcm9tICcuLi9oZWxwZXJzL21peGluJztcbmltcG9ydCB7Z2V0UmVmSWR9IGZyb20gJy4uL2hlbHBlcnMvbW9kZWwvZmllbGRzJztcbmltcG9ydCB7XG4gIGdldE1vZGVsQ29sbGVjdGlvbixcbiAgZ2V0TW9kZWxJZCxcbiAgZ2V0TW9kZWxNZXRhS2V5LFxuICBnZXRNb2RlbFR5cGUsXG4gIGdldE9yaWdpbmFsTW9kZWwsXG4gIG1vZGVsVG9KU09OLFxufSBmcm9tICcuLi9oZWxwZXJzL21vZGVsL3V0aWxzJztcbmltcG9ydCB7SU1ldGFNaXhpbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JTWV0YU1peGluJztcbmltcG9ydCB7SU1vZGVsQ29uc3RydWN0b3J9IGZyb20gJy4uL2ludGVyZmFjZXMvSU1vZGVsQ29uc3RydWN0b3InO1xuaW1wb3J0IHtQdXJlTW9kZWx9IGZyb20gJy4uL1B1cmVNb2RlbCc7XG5cbi8qKlxuICogRXh0ZW5kcyB0aGUgbW9kZWwgd2l0aCB0aGUgZXhwb3NlZCBtZXRhIGRhdGFcbiAqXG4gKiBAZXhwb3J0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtJTW9kZWxDb25zdHJ1Y3RvcjxUPn0gQmFzZSBNb2RlbCB0byBleHRlbmRcbiAqIEByZXR1cm5zIEV4dGVuZGVkIG1vZGVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoTWV0YTxUIGV4dGVuZHMgUHVyZU1vZGVsPihCYXNlOiBJTW9kZWxDb25zdHJ1Y3RvcjxUPikge1xuICBjb25zdCBCYXNlQ2xhc3MgPSBCYXNlIGFzIHR5cGVvZiBQdXJlTW9kZWw7XG5cbiAgaWYgKCFpc01vZGVsKEJhc2VDbGFzcykpIHtcbiAgICB0aHJvdyBlcnJvcihERUNPUkFURV9NT0RFTCk7XG4gIH1cblxuICBjbGFzcyBXaXRoTWV0YSBleHRlbmRzIEJhc2VDbGFzcyBpbXBsZW1lbnRzIElNZXRhTWl4aW4ge1xuICAgIEBjb21wdXRlZCBwdWJsaWMgZ2V0IG1ldGEoKSB7XG4gICAgICBjb25zdCByZWZEZWZzID0gZ2V0TW9kZWxNZXRhS2V5KHRoaXMsICdyZWZzJyk7XG4gICAgICBjb25zdCByZWZzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhyZWZEZWZzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgcmVmc1trZXldID0gZ2V0UmVmSWQodGhpcywga2V5KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGNvbGxlY3Rpb246IGdldE1vZGVsQ29sbGVjdGlvbih0aGlzKSxcbiAgICAgICAgaWQ6IGdldE1vZGVsSWQodGhpcyksXG4gICAgICAgIG9yaWdpbmFsOiBnZXRNb2RlbE1ldGFLZXkodGhpcywgJ29yaWdpbmFsSWQnKSAmJiBnZXRPcmlnaW5hbE1vZGVsKHRoaXMpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcmVmcyxcbiAgICAgICAgc25hcHNob3Q6IG1vZGVsVG9KU09OKHRoaXMpLFxuICAgICAgICB0eXBlOiBnZXRNb2RlbFR5cGUodGhpcyksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gV2l0aE1ldGEgYXMgSU1vZGVsQ29uc3RydWN0b3I8SU1ldGFNaXhpbjxUPiAmIFQ+O1xufVxuIl19","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/withMeta.d.ts","text":"import { IMetaMixin } from '../interfaces/IMetaMixin';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { PureModel } from '../PureModel';\r\n/**\r\n * Extends the model with the exposed meta data\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport declare function withMeta<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<IMetaMixin<T> & T>;\r\n"}}

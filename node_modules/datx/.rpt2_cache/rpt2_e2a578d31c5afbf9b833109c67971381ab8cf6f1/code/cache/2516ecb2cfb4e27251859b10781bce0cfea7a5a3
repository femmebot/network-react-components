{"map":"{\"version\":3,\"file\":\"collection.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/collection.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EAAC,eAAe,EAAE,cAAc,EAAC,MAAM,WAAW,CAAC;AAG1D,OAAO,EAAC,SAAS,EAAC,MAAM,cAAc,CAAC;AAEvC,OAAO,EAAC,KAAK,EAAC,MAAM,UAAU,CAAC;AAC/B,OAAO,EAAC,iBAAiB,EAAE,WAAW,EAAC,MAAM,eAAe,CAAC;AAE7D,6BAA6B,UAA0B,EAAE,IAAe;IACtE,IAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAE7C,OAAO,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,sBAAsB,IAAe,EAAE,IAA4B,EAAE,UAA0B;IACnG,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE;QACvB,MAAM,KAAK,CAAC,cAAc,CAAC,CAAC;KAC7B;IAED,IAAM,gBAAgB,GAAG,UAAU,CAAC,WAAoC,CAAC;IACzE,IAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,IAAI,KAAK,IAAI,EAAlB,CAAkB,CAAC,IAAI,gBAAgB,CAAC,YAAY,CAAC;IAC7G,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,KAAK,CAAC,eAAe,EAAE,EAAC,IAAI,MAAA,EAAC,CAAC,CAAC;KACtC;IAED,IAAM,EAAE,GAAG,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,SAAuC,CAAC,CAAC;IAClF,IAAM,aAAa,GAAG,EAAE,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACtD,IAAI,aAAa,EAAE;QACjB,OAAO,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;KACzC;IAED,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,6BAA6B,EAAO;IACxC,OAAO,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC,SAAS,YAAY,SAAS,CAAC,CAAC,CAAC;AAClG,CAAC;AAED,MAAM,qBAAqB,UAA0B,EAAE,IAAsB;IAC3E,OAAO,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAC;AACnE,CAAC\",\"sourcesContent\":[\"import {IRawModel} from 'datx-utils';\\n\\nimport {UNDEFINED_MODEL, UNDEFINED_TYPE} from '../errors';\\nimport {IType} from '../interfaces/IType';\\nimport {PureCollection} from '../PureCollection';\\nimport {PureModel} from '../PureModel';\\nimport {storage} from '../services/storage';\\nimport {error} from './format';\\nimport {getMetaKeyFromRaw, updateModel} from './model/utils';\\n\\nfunction initCollectionModel(collection: PureCollection, data: IRawModel): PureModel {\\n  const type = getMetaKeyFromRaw(data, 'type');\\n\\n  return upsertModel(data, type, collection);\\n}\\n\\nexport function upsertModel(data: IRawModel, type: IType|typeof PureModel, collection: PureCollection): PureModel {\\n  if (!type && type !== 0) {\\n    throw error(UNDEFINED_TYPE);\\n  }\\n\\n  const staticCollection = collection.constructor as typeof PureCollection;\\n  const TypeModel = staticCollection.types.find((item) => item.type === type) || staticCollection.defaultModel;\\n  if (!TypeModel) {\\n    throw error(UNDEFINED_MODEL, {type});\\n  }\\n\\n  const id = getMetaKeyFromRaw(data, 'id', TypeModel as typeof PureModel|undefined);\\n  const existingModel = id && collection.find(type, id);\\n  if (existingModel) {\\n    return updateModel(existingModel, data);\\n  }\\n\\n  return new TypeModel(data, collection);\\n}\\n\\nexport function isSelectorFunction(fn: any) {\\n  return (typeof fn === 'function') && (fn !== PureModel && !(fn.prototype instanceof PureModel));\\n}\\n\\nexport function initModels(collection: PureCollection, data: Array<IRawModel>) {\\n  return data.map((item) => initCollectionModel(collection, item));\\n}\\n\"]}","code":"import { UNDEFINED_MODEL, UNDEFINED_TYPE } from '../errors';\r\nimport { PureModel } from '../PureModel';\r\nimport { error } from './format';\r\nimport { getMetaKeyFromRaw, updateModel } from './model/utils';\r\nfunction initCollectionModel(collection, data) {\r\n    var type = getMetaKeyFromRaw(data, 'type');\r\n    return upsertModel(data, type, collection);\r\n}\r\nexport function upsertModel(data, type, collection) {\r\n    if (!type && type !== 0) {\r\n        throw error(UNDEFINED_TYPE);\r\n    }\r\n    var staticCollection = collection.constructor;\r\n    var TypeModel = staticCollection.types.find(function (item) { return item.type === type; }) || staticCollection.defaultModel;\r\n    if (!TypeModel) {\r\n        throw error(UNDEFINED_MODEL, { type: type });\r\n    }\r\n    var id = getMetaKeyFromRaw(data, 'id', TypeModel);\r\n    var existingModel = id && collection.find(type, id);\r\n    if (existingModel) {\r\n        return updateModel(existingModel, data);\r\n    }\r\n    return new TypeModel(data, collection);\r\n}\r\nexport function isSelectorFunction(fn) {\r\n    return (typeof fn === 'function') && (fn !== PureModel && !(fn.prototype instanceof PureModel));\r\n}\r\nexport function initModels(collection, data) {\r\n    return data.map(function (item) { return initCollectionModel(collection, item); });\r\n}\r\n//# sourceMappingURL=collection.js.map","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/helpers/collection.d.ts","text":"import { IRawModel } from 'datx-utils';\r\nimport { IType } from '../interfaces/IType';\r\nimport { PureCollection } from '../PureCollection';\r\nimport { PureModel } from '../PureModel';\r\nexport declare function upsertModel(data: IRawModel, type: IType | typeof PureModel, collection: PureCollection): PureModel;\r\nexport declare function isSelectorFunction(fn: any): boolean;\r\nexport declare function initModels(collection: PureCollection, data: Array<IRawModel>): PureModel[];\r\n"}}

{"map":"{\"version\":3,\"file\":\"prop.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/prop.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAC,aAAa,EAAC,MAAM,uBAAuB,CAAC;AAGpD,OAAO,EAAC,OAAO,EAAC,MAAM,oBAAoB,CAAC;AAE3C;;;;;;;GAOG;AACH,gBAAqC,GAAM,EAAE,GAAW;IACtD,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,CAAC,CAAC;AACzE,CAAC;AAED,6CAA6C;AAC7C,eAAe,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;IACnC;;;;;OAKG;IACH,YAAY,YAAC,KAAU;QACrB,OAAO,UAAsB,GAAM,EAAE,GAAW;YAC9C,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAChF,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,YAAC,QAAgC;QACpC,OAAO,UAAsB,GAAM,EAAE,GAAW;YAC9C,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,EAAE;gBACvE,KAAK,EAAE,QAAQ;gBACf,IAAI,EAAE,aAAa,CAAC,MAAM;aAC3B,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,MAAM,YAAC,QAAgC,EAAE,QAAiB;QACxD,OAAO,UAAsB,GAAM,EAAE,GAAW;YAC9C,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,EAAE;gBACvE,KAAK,EAAE,QAAQ;gBACf,QAAQ,UAAA;gBACR,IAAI,EAAE,aAAa,CAAC,OAAO;aAC5B,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,WAAW,YAAC,QAAgC;QAC1C,OAAO,UAAsB,GAAM,EAAE,GAAW;YAC9C,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,EAAE;gBACvE,KAAK,EAAE,QAAQ;gBACf,IAAI,EAAE,aAAa,CAAC,cAAc;aACnC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,UAAU,EAAV,UAAgC,GAAM,EAAE,GAAW;QACjD,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,CAAC,CAAC;QACvE,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAA+B,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;;OAMG;IACH,IAAI,EAAJ,UAA0B,GAAM,EAAE,GAAW;QAC3C,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAA+B,EAAE,GAAG,CAAC,CAAC;QACvE,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAA+B,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IACjF,CAAC;CACF,CAAC,CAAC\",\"sourcesContent\":[\"import {ReferenceType} from './enums/ReferenceType';\\nimport {IType} from './interfaces/IType';\\nimport {PureModel} from './PureModel';\\nimport {storage} from './services/storage';\\n\\n/**\\n * Set a model property as tracked\\n *\\n * @template T\\n * @param {T} obj Target model\\n * @param {string} key Property name\\n * @returns {undefined}\\n */\\nfunction propFn<T extends PureModel>(obj: T, key: string) {\\n  storage.addModelDefaultField(obj.constructor as typeof PureModel, key);\\n}\\n\\n// tslint:disable-next-line:no-default-export\\nexport default Object.assign(propFn, {\\n  /**\\n   * Set the default value for the model property\\n   *\\n   * @param {any} value The default property value\\n   * @returns {undefined}\\n   */\\n  defaultValue(value: any) {\\n    return <T extends PureModel>(obj: T, key: string) => {\\n      storage.addModelDefaultField(obj.constructor as typeof PureModel, key, value);\\n    };\\n  },\\n\\n  /**\\n   * Add a reference to a single other model\\n   *\\n   * @param {typeof PureModel} refModel Model type the reference will point to\\n   * @returns {undefined}\\n   */\\n  toOne(refModel: typeof PureModel|IType) {\\n    return <T extends PureModel>(obj: T, key: string) => {\\n      storage.addModelClassReference(obj.constructor as typeof PureModel, key, {\\n        model: refModel,\\n        type: ReferenceType.TO_ONE,\\n      });\\n    };\\n  },\\n\\n  /**\\n   * Add a reference to multiple other models\\n   *\\n   * @param {typeof PureModel} refModel Model type the reference will point to\\n   * @param {string} [property] Use a foreign key from the other model to get this reference (computed back reference)\\n   * @returns {undefined}\\n   */\\n  toMany(refModel: typeof PureModel|IType, property?: string) {\\n    return <T extends PureModel>(obj: T, key: string) => {\\n      storage.addModelClassReference(obj.constructor as typeof PureModel, key, {\\n        model: refModel,\\n        property,\\n        type: ReferenceType.TO_MANY,\\n      });\\n    };\\n  },\\n\\n  /**\\n   * Add a reference to a single or multiple other models\\n   *\\n   * @param {typeof PureModel} refModel Model type the reference will point to\\n   * @returns {undefined}\\n   */\\n  toOneOrMany(refModel: typeof PureModel|IType) {\\n    return <T extends PureModel>(obj: T, key: string) => {\\n      storage.addModelClassReference(obj.constructor as typeof PureModel, key, {\\n        model: refModel,\\n        type: ReferenceType.TO_ONE_OR_MANY,\\n      });\\n    };\\n  },\\n\\n  /**\\n   * Define the identifier property on the model\\n   *\\n   * @param {T} obj Target model\\n   * @param {string} key Identifier property name\\n   * @returns {undefined}\\n   */\\n  identifier<T extends PureModel>(obj: T, key: string) {\\n    storage.addModelDefaultField(obj.constructor as typeof PureModel, key);\\n    storage.setModelClassMetaKey(obj.constructor as typeof PureModel, 'id', key);\\n  },\\n\\n  /**\\n   * Define the type property on the model\\n   *\\n   * @param {T} obj Target model\\n   * @param {string} key Type property name\\n   * @returns {undefined}\\n   */\\n  type<T extends PureModel>(obj: T, key: string) {\\n    storage.addModelDefaultField(obj.constructor as typeof PureModel, key);\\n    storage.setModelClassMetaKey(obj.constructor as typeof PureModel, 'type', key);\\n  },\\n});\\n\"]}","code":"import { ReferenceType } from './enums/ReferenceType';\r\nimport { storage } from './services/storage';\r\n/**\r\n * Set a model property as tracked\r\n *\r\n * @template T\r\n * @param {T} obj Target model\r\n * @param {string} key Property name\r\n * @returns {undefined}\r\n */\r\nfunction propFn(obj, key) {\r\n    storage.addModelDefaultField(obj.constructor, key);\r\n}\r\n// tslint:disable-next-line:no-default-export\r\nexport default Object.assign(propFn, {\r\n    /**\r\n     * Set the default value for the model property\r\n     *\r\n     * @param {any} value The default property value\r\n     * @returns {undefined}\r\n     */\r\n    defaultValue: function (value) {\r\n        return function (obj, key) {\r\n            storage.addModelDefaultField(obj.constructor, key, value);\r\n        };\r\n    },\r\n    /**\r\n     * Add a reference to a single other model\r\n     *\r\n     * @param {typeof PureModel} refModel Model type the reference will point to\r\n     * @returns {undefined}\r\n     */\r\n    toOne: function (refModel) {\r\n        return function (obj, key) {\r\n            storage.addModelClassReference(obj.constructor, key, {\r\n                model: refModel,\r\n                type: ReferenceType.TO_ONE,\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     * Add a reference to multiple other models\r\n     *\r\n     * @param {typeof PureModel} refModel Model type the reference will point to\r\n     * @param {string} [property] Use a foreign key from the other model to get this reference (computed back reference)\r\n     * @returns {undefined}\r\n     */\r\n    toMany: function (refModel, property) {\r\n        return function (obj, key) {\r\n            storage.addModelClassReference(obj.constructor, key, {\r\n                model: refModel,\r\n                property: property,\r\n                type: ReferenceType.TO_MANY,\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     * Add a reference to a single or multiple other models\r\n     *\r\n     * @param {typeof PureModel} refModel Model type the reference will point to\r\n     * @returns {undefined}\r\n     */\r\n    toOneOrMany: function (refModel) {\r\n        return function (obj, key) {\r\n            storage.addModelClassReference(obj.constructor, key, {\r\n                model: refModel,\r\n                type: ReferenceType.TO_ONE_OR_MANY,\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     * Define the identifier property on the model\r\n     *\r\n     * @param {T} obj Target model\r\n     * @param {string} key Identifier property name\r\n     * @returns {undefined}\r\n     */\r\n    identifier: function (obj, key) {\r\n        storage.addModelDefaultField(obj.constructor, key);\r\n        storage.setModelClassMetaKey(obj.constructor, 'id', key);\r\n    },\r\n    /**\r\n     * Define the type property on the model\r\n     *\r\n     * @param {T} obj Target model\r\n     * @param {string} key Type property name\r\n     * @returns {undefined}\r\n     */\r\n    type: function (obj, key) {\r\n        storage.addModelDefaultField(obj.constructor, key);\r\n        storage.setModelClassMetaKey(obj.constructor, 'type', key);\r\n    },\r\n});\r\n//# sourceMappingURL=prop.js.map","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/prop.d.ts","text":"import { PureModel } from './PureModel';\r\ndeclare const _default: (<T extends PureModel>(obj: T, key: string) => void) & {\r\n    defaultValue(value: any): <T extends PureModel>(obj: T, key: string) => void;\r\n    toOne(refModel: string | number | typeof PureModel): <T extends PureModel>(obj: T, key: string) => void;\r\n    toMany(refModel: string | number | typeof PureModel, property?: string | undefined): <T extends PureModel>(obj: T, key: string) => void;\r\n    toOneOrMany(refModel: string | number | typeof PureModel): <T extends PureModel>(obj: T, key: string) => void;\r\n    identifier<T extends PureModel>(obj: T, key: string): void;\r\n    type<T extends PureModel>(obj: T, key: string): void;\r\n};\r\nexport default _default;\r\n"}}

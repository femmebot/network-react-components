{"code":"import * as tslib_1 from \"tslib\";\r\nimport { mapItems } from 'datx-utils';\r\nimport { action, computed, intercept, observable } from 'mobx';\r\nimport { SORTED_NO_WRITE, UNIQUE_MODEL } from './errors';\r\nimport { error } from './helpers/format';\r\nimport { getModelId, getModelType } from './helpers/model/utils';\r\nvar View = /** @class */ (function () {\r\n    function View(modelType, __collection, sortMethod, models, unique) {\r\n        if (models === void 0) { models = []; }\r\n        if (unique === void 0) { unique = false; }\r\n        this.__collection = __collection;\r\n        this.unique = unique;\r\n        this.__models = observable.array([]);\r\n        this.__models.replace(models.map(getModelId));\r\n        this.sortMethod = sortMethod;\r\n        this.modelType = getModelType(modelType);\r\n        // @ts-ignore\r\n        this.__collection.__viewList.push(this);\r\n    }\r\n    Object.defineProperty(View.prototype, \"length\", {\r\n        get: function () {\r\n            return this.__models.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(View.prototype, \"list\", {\r\n        get: function () {\r\n            var _this = this;\r\n            var list = this.__models.map(function (id) { return _this.__collection.find(_this.modelType, id); });\r\n            if (this.sortMethod) {\r\n                var sortFn_1 = typeof this.sortMethod === 'string'\r\n                    ? function (item) { return item[_this.sortMethod]; }\r\n                    : this.sortMethod;\r\n                list.sort(function (a, b) {\r\n                    var valA = a ? sortFn_1(a) : Infinity;\r\n                    var valB = b ? sortFn_1(b) : Infinity;\r\n                    return valA - valB;\r\n                });\r\n            }\r\n            var instances = observable.array(list, { deep: false });\r\n            intercept(instances, this.__partialListUpdate.bind(this));\r\n            return instances;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    View.prototype.toJSON = function () {\r\n        return {\r\n            modelType: this.modelType,\r\n            models: this.__models.slice(),\r\n            unique: this.unique,\r\n        };\r\n    };\r\n    Object.defineProperty(View.prototype, \"snapshot\", {\r\n        get: function () {\r\n            return this.toJSON();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    View.prototype.add = function (data) {\r\n        var _this = this;\r\n        var models = mapItems(data, function (item) { return _this.__collection.add(item, _this.modelType); });\r\n        mapItems(models, function (instance) {\r\n            var id = getModelId(instance);\r\n            if (!_this.unique || _this.__models.indexOf(id) === -1) {\r\n                _this.__models.push(id);\r\n            }\r\n        });\r\n        return models;\r\n    };\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {T|IIdentifier} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    View.prototype.hasItem = function (model) {\r\n        var id = getModelId(model);\r\n        return this.__models.indexOf(id) !== -1;\r\n    };\r\n    /**\r\n     * Remove a model from the view\r\n     *\r\n     * @param {IIdentifier|T} model Model identifier\r\n     * @memberof Collection\r\n     */\r\n    View.prototype.remove = function (model) {\r\n        var id = getModelId(model);\r\n        this.__models.remove(id);\r\n    };\r\n    View.prototype.removeAll = function () {\r\n        this.__models.replace([]);\r\n    };\r\n    View.prototype.__partialListUpdate = function (change) {\r\n        var _this = this;\r\n        if (change.type === 'splice') {\r\n            if (this.sortMethod && change.added.length > 0) {\r\n                throw error(SORTED_NO_WRITE);\r\n            }\r\n            var added = change.added.map(getModelId);\r\n            var toRemove_1 = this.__models.slice(change.index, change.removedCount);\r\n            if (this.unique) {\r\n                added.forEach(function (newItemId) {\r\n                    if (_this.__models.indexOf(newItemId) !== -1 && toRemove_1.indexOf(newItemId) === -1) {\r\n                        throw error(UNIQUE_MODEL);\r\n                    }\r\n                });\r\n            }\r\n            (_a = this.__models).splice.apply(_a, [change.index, change.removedCount].concat(added));\r\n            return null;\r\n        }\r\n        if (this.sortMethod && change.newValue) {\r\n            throw error(SORTED_NO_WRITE);\r\n        }\r\n        var newId = getModelId(change.newValue);\r\n        var idIndex = this.__models.indexOf(newId);\r\n        if (this.unique && idIndex !== -1 && idIndex !== change.index) {\r\n            throw error(UNIQUE_MODEL);\r\n        }\r\n        this.__models[change.index] = newId;\r\n        return null;\r\n        var _a;\r\n    };\r\n    View.prototype.__changeModelId = function (oldId, newId) {\r\n        var oldIdIndex = this.__models.indexOf(oldId);\r\n        if (oldIdIndex !== -1) {\r\n            this.__models[oldIdIndex] = newId;\r\n        }\r\n    };\r\n    tslib_1.__decorate([\r\n        observable\r\n    ], View.prototype, \"sortMethod\", void 0);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"length\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"list\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"snapshot\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"add\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"remove\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"removeAll\", null);\r\n    return View;\r\n}());\r\nexport { View };\r\n//# sourceMappingURL=data:application/json;base64,","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/View.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { IIdentifier } from './interfaces/IIdentifier';\r\nimport { IModelConstructor } from './interfaces/IModelConstructor';\r\nimport { IRawView } from './interfaces/IRawView';\r\nimport { IType } from './interfaces/IType';\r\nimport { PureCollection } from './PureCollection';\r\nimport { PureModel } from './PureModel';\r\nexport declare class View<T extends PureModel = PureModel> {\r\n    protected __collection: PureCollection;\r\n    unique: boolean;\r\n    readonly modelType: IType;\r\n    sortMethod?: string | ((item: T) => any);\r\n    private __models;\r\n    constructor(modelType: IModelConstructor<T> | IType, __collection: PureCollection, sortMethod?: string | ((item: T) => any), models?: Array<IIdentifier | T>, unique?: boolean);\r\n    readonly length: number;\r\n    readonly list: Array<T | null>;\r\n    toJSON(): IRawView;\r\n    readonly snapshot: IRawView;\r\n    /**\r\n     * Add an existing or a new model to the collection\r\n     *\r\n     * @template T\r\n     * @param {T|IRawModel|IDictionary} data Model to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add(data: T | IRawModel | IDictionary): T;\r\n    /**\r\n     * Add an array of existing or new models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<T|IRawModel|IDictionary>} data Array of models to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add(data: Array<T | IRawModel | IDictionary>): Array<T>;\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {T|IIdentifier} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    hasItem(model: T | IIdentifier): boolean;\r\n    /**\r\n     * Remove a model from the view\r\n     *\r\n     * @param {IIdentifier|T} model Model identifier\r\n     * @memberof Collection\r\n     */\r\n    remove(model: IIdentifier | T): void;\r\n    removeAll(): void;\r\n    private __partialListUpdate(change);\r\n    private __changeModelId(oldId, newId);\r\n}\r\n"}}

{"code":"import * as tslib_1 from \"tslib\";\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport { initModelRef } from '../helpers/model/init';\r\nimport { assignModel, cloneModel, modelToJSON, updateModel } from '../helpers/model/utils';\r\n/**\r\n * Extends the model with some handy actions\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport function withActions(Base) {\r\n    var BaseClass = Base;\r\n    if (!isModel(Base)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var WithActions = /** @class */ (function (_super) {\r\n        tslib_1.__extends(WithActions, _super);\r\n        function WithActions() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        WithActions.prototype.update = function (data) {\r\n            updateModel(this, data);\r\n        };\r\n        WithActions.prototype.clone = function () {\r\n            // @ts-ignore\r\n            return cloneModel(this);\r\n        };\r\n        WithActions.prototype.assign = function (key, value) {\r\n            assignModel(this, key, value);\r\n        };\r\n        WithActions.prototype.addReference = function (key, value, options) {\r\n            initModelRef(this, key, options, value);\r\n        };\r\n        WithActions.prototype.toJSON = function () {\r\n            return modelToJSON(this);\r\n        };\r\n        return WithActions;\r\n    }(BaseClass));\r\n    return WithActions;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aEFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWl4aW5zL3dpdGhBY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUN4QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQU96Rjs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxzQkFBMkMsSUFBMEI7SUFDekUsSUFBTSxTQUFTLEdBQUcsSUFBd0IsQ0FBQztJQUUzQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2xCLE1BQU0sS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzdCO0lBRUQ7UUFBMEIsdUNBQVM7UUFBbkM7O1FBeUJBLENBQUM7UUF4QlEsNEJBQU0sR0FBYixVQUFjLElBQWlCO1lBQzdCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUVNLDJCQUFLLEdBQVo7WUFDRSxhQUFhO1lBQ2IsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUVNLDRCQUFNLEdBQWIsVUFBYyxHQUFXLEVBQUUsS0FBVTtZQUNuQyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBRU0sa0NBQVksR0FBbkIsVUFDRSxHQUFXLEVBQ1gsS0FBbUIsRUFDbkIsT0FBNkI7WUFFN0IsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFTSw0QkFBTSxHQUFiO1lBQ0UsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUNILGtCQUFDO0lBQUQsQ0FBQyxBQXpCRCxDQUEwQixTQUFTLEdBeUJsQztJQUVELE9BQU8sV0FBc0QsQ0FBQztBQUNoRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJRGljdGlvbmFyeX0gZnJvbSAnZGF0eC11dGlscyc7XG5cbmltcG9ydCB7REVDT1JBVEVfTU9ERUx9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQge2Vycm9yfSBmcm9tICcuLi9oZWxwZXJzL2Zvcm1hdCc7XG5pbXBvcnQge2lzTW9kZWx9IGZyb20gJy4uL2hlbHBlcnMvbWl4aW4nO1xuaW1wb3J0IHtpbml0TW9kZWxSZWZ9IGZyb20gJy4uL2hlbHBlcnMvbW9kZWwvaW5pdCc7XG5pbXBvcnQge2Fzc2lnbk1vZGVsLCBjbG9uZU1vZGVsLCBtb2RlbFRvSlNPTiwgdXBkYXRlTW9kZWx9IGZyb20gJy4uL2hlbHBlcnMvbW9kZWwvdXRpbHMnO1xuaW1wb3J0IHtJQWN0aW9uc01peGlufSBmcm9tICcuLi9pbnRlcmZhY2VzL0lBY3Rpb25zTWl4aW4nO1xuaW1wb3J0IHtJTW9kZWxDb25zdHJ1Y3Rvcn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JTW9kZWxDb25zdHJ1Y3Rvcic7XG5pbXBvcnQge0lSZWZlcmVuY2VPcHRpb25zfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lSZWZlcmVuY2VPcHRpb25zJztcbmltcG9ydCB7VFJlZlZhbHVlfSBmcm9tICcuLi9pbnRlcmZhY2VzL1RSZWZWYWx1ZSc7XG5pbXBvcnQge1B1cmVNb2RlbH0gZnJvbSAnLi4vUHVyZU1vZGVsJztcblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBtb2RlbCB3aXRoIHNvbWUgaGFuZHkgYWN0aW9uc1xuICpcbiAqIEBleHBvcnRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0lNb2RlbENvbnN0cnVjdG9yPFQ+fSBCYXNlIE1vZGVsIHRvIGV4dGVuZFxuICogQHJldHVybnMgRXh0ZW5kZWQgbW9kZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBY3Rpb25zPFQgZXh0ZW5kcyBQdXJlTW9kZWw+KEJhc2U6IElNb2RlbENvbnN0cnVjdG9yPFQ+KSB7XG4gIGNvbnN0IEJhc2VDbGFzcyA9IEJhc2UgYXMgdHlwZW9mIFB1cmVNb2RlbDtcblxuICBpZiAoIWlzTW9kZWwoQmFzZSkpIHtcbiAgICB0aHJvdyBlcnJvcihERUNPUkFURV9NT0RFTCk7XG4gIH1cblxuICBjbGFzcyBXaXRoQWN0aW9ucyBleHRlbmRzIEJhc2VDbGFzcyBpbXBsZW1lbnRzIElBY3Rpb25zTWl4aW48VD4ge1xuICAgIHB1YmxpYyB1cGRhdGUoZGF0YTogSURpY3Rpb25hcnkpIHtcbiAgICAgIHVwZGF0ZU1vZGVsKHRoaXMsIGRhdGEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9uZSgpOiBJQWN0aW9uc01peGluPFQ+ICYgVCB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gY2xvbmVNb2RlbCh0aGlzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXNzaWduKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICBhc3NpZ25Nb2RlbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkUmVmZXJlbmNlPFYgZXh0ZW5kcyBQdXJlTW9kZWwsIFUgZXh0ZW5kcyB0eXBlb2YgUHVyZU1vZGVsPihcbiAgICAgIGtleTogc3RyaW5nLFxuICAgICAgdmFsdWU6IFRSZWZWYWx1ZTxWPixcbiAgICAgIG9wdGlvbnM6IElSZWZlcmVuY2VPcHRpb25zPFU+LFxuICAgICkge1xuICAgICAgaW5pdE1vZGVsUmVmKHRoaXMsIGtleSwgb3B0aW9ucywgdmFsdWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgICByZXR1cm4gbW9kZWxUb0pTT04odGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFdpdGhBY3Rpb25zIGFzIElNb2RlbENvbnN0cnVjdG9yPElBY3Rpb25zTWl4aW48VD4gJiBUPjtcbn1cbiJdfQ==","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/withActions.d.ts","text":"import { IActionsMixin } from '../interfaces/IActionsMixin';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { PureModel } from '../PureModel';\r\n/**\r\n * Extends the model with some handy actions\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport declare function withActions<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<IActionsMixin<T> & T>;\r\n"}}

{"code":"import * as tslib_1 from \"tslib\";\r\nimport { computed } from 'mobx';\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport { getRefId } from '../helpers/model/fields';\r\nimport { getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, } from '../helpers/model/utils';\r\n/**\r\n * Extends the model with the exposed meta data\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport function withMeta(Base) {\r\n    var BaseClass = Base;\r\n    if (!isModel(BaseClass)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var WithMeta = /** @class */ (function (_super) {\r\n        tslib_1.__extends(WithMeta, _super);\r\n        function WithMeta() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        Object.defineProperty(WithMeta.prototype, \"meta\", {\r\n            get: function () {\r\n                var _this = this;\r\n                var refDefs = getModelMetaKey(this, 'refs');\r\n                var refs = {};\r\n                Object.keys(refDefs).forEach(function (key) {\r\n                    refs[key] = getRefId(_this, key);\r\n                });\r\n                return Object.freeze({\r\n                    collection: getModelCollection(this),\r\n                    id: getModelId(this),\r\n                    original: getModelMetaKey(this, 'originalId') && getOriginalModel(this) || undefined,\r\n                    refs: refs,\r\n                    snapshot: modelToJSON(this),\r\n                    type: getModelType(this),\r\n                });\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        tslib_1.__decorate([\r\n            computed\r\n        ], WithMeta.prototype, \"meta\", null);\r\n        return WithMeta;\r\n    }(BaseClass));\r\n    return WithMeta;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aE1ldGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWl4aW5zL3dpdGhNZXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRTlCLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDakQsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsZUFBZSxFQUNmLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsV0FBVyxHQUNaLE1BQU0sd0JBQXdCLENBQUM7QUFLaEM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sbUJBQXdDLElBQTBCO0lBQ3RFLElBQU0sU0FBUyxHQUFHLElBQXdCLENBQUM7SUFFM0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDtRQUF1QixvQ0FBUztRQUFoQzs7UUFpQkEsQ0FBQztRQWhCVyxzQkFBVywwQkFBSTtpQkFBZjtnQkFBVixpQkFlQztnQkFkQyxJQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUM5QyxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztvQkFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxDQUFDO2dCQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO29CQUNuQixVQUFVLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDO29CQUNwQyxFQUFFLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDcEIsUUFBUSxFQUFFLGVBQWUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUztvQkFDcEYsSUFBSSxNQUFBO29CQUNKLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDO29CQUMzQixJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQztpQkFDekIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQzs7O1dBQUE7UUFmUztZQUFULFFBQVE7NENBZVI7UUFDSCxlQUFDO0tBQUEsQUFqQkQsQ0FBdUIsU0FBUyxHQWlCL0I7SUFFRCxNQUFNLENBQUMsUUFBZ0QsQ0FBQztBQUMxRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb21wdXRlZH0gZnJvbSAnbW9ieCc7XG5cbmltcG9ydCB7REVDT1JBVEVfTU9ERUx9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQge2Vycm9yfSBmcm9tICcuLi9oZWxwZXJzL2Zvcm1hdCc7XG5pbXBvcnQge2lzTW9kZWx9IGZyb20gJy4uL2hlbHBlcnMvbWl4aW4nO1xuaW1wb3J0IHtnZXRSZWZJZH0gZnJvbSAnLi4vaGVscGVycy9tb2RlbC9maWVsZHMnO1xuaW1wb3J0IHtcbiAgZ2V0TW9kZWxDb2xsZWN0aW9uLFxuICBnZXRNb2RlbElkLFxuICBnZXRNb2RlbE1ldGFLZXksXG4gIGdldE1vZGVsVHlwZSxcbiAgZ2V0T3JpZ2luYWxNb2RlbCxcbiAgbW9kZWxUb0pTT04sXG59IGZyb20gJy4uL2hlbHBlcnMvbW9kZWwvdXRpbHMnO1xuaW1wb3J0IHtJTWV0YU1peGlufSBmcm9tICcuLi9pbnRlcmZhY2VzL0lNZXRhTWl4aW4nO1xuaW1wb3J0IHtJTW9kZWxDb25zdHJ1Y3Rvcn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JTW9kZWxDb25zdHJ1Y3Rvcic7XG5pbXBvcnQge1B1cmVNb2RlbH0gZnJvbSAnLi4vUHVyZU1vZGVsJztcblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBtb2RlbCB3aXRoIHRoZSBleHBvc2VkIG1ldGEgZGF0YVxuICpcbiAqIEBleHBvcnRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0lNb2RlbENvbnN0cnVjdG9yPFQ+fSBCYXNlIE1vZGVsIHRvIGV4dGVuZFxuICogQHJldHVybnMgRXh0ZW5kZWQgbW9kZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhNZXRhPFQgZXh0ZW5kcyBQdXJlTW9kZWw+KEJhc2U6IElNb2RlbENvbnN0cnVjdG9yPFQ+KSB7XG4gIGNvbnN0IEJhc2VDbGFzcyA9IEJhc2UgYXMgdHlwZW9mIFB1cmVNb2RlbDtcblxuICBpZiAoIWlzTW9kZWwoQmFzZUNsYXNzKSkge1xuICAgIHRocm93IGVycm9yKERFQ09SQVRFX01PREVMKTtcbiAgfVxuXG4gIGNsYXNzIFdpdGhNZXRhIGV4dGVuZHMgQmFzZUNsYXNzIGltcGxlbWVudHMgSU1ldGFNaXhpbiB7XG4gICAgQGNvbXB1dGVkIHB1YmxpYyBnZXQgbWV0YSgpIHtcbiAgICAgIGNvbnN0IHJlZkRlZnMgPSBnZXRNb2RlbE1ldGFLZXkodGhpcywgJ3JlZnMnKTtcbiAgICAgIGNvbnN0IHJlZnMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKHJlZkRlZnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICByZWZzW2tleV0gPSBnZXRSZWZJZCh0aGlzLCBrZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgY29sbGVjdGlvbjogZ2V0TW9kZWxDb2xsZWN0aW9uKHRoaXMpLFxuICAgICAgICBpZDogZ2V0TW9kZWxJZCh0aGlzKSxcbiAgICAgICAgb3JpZ2luYWw6IGdldE1vZGVsTWV0YUtleSh0aGlzLCAnb3JpZ2luYWxJZCcpICYmIGdldE9yaWdpbmFsTW9kZWwodGhpcykgfHwgdW5kZWZpbmVkLFxuICAgICAgICByZWZzLFxuICAgICAgICBzbmFwc2hvdDogbW9kZWxUb0pTT04odGhpcyksXG4gICAgICAgIHR5cGU6IGdldE1vZGVsVHlwZSh0aGlzKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBXaXRoTWV0YSBhcyBJTW9kZWxDb25zdHJ1Y3RvcjxJTWV0YU1peGluPFQ+ICYgVD47XG59XG4iXX0=","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/withMeta.d.ts","text":"import { IMetaMixin } from '../interfaces/IMetaMixin';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { PureModel } from '../PureModel';\r\n/**\r\n * Extends the model with the exposed meta data\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport declare function withMeta<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<IMetaMixin<T> & T>;\r\n"}}

{"code":"import { assignComputed, META_FIELD } from 'datx-utils';\r\nimport { FieldType } from '../../enums/FieldType';\r\nimport { ReferenceType } from '../../enums/ReferenceType';\r\nimport { ID_REQUIRED } from '../../errors';\r\nimport { storage } from '../../services/storage';\r\nimport { getField, getRef, updateField, updateRef } from './fields';\r\nimport { getModelMetaKey, getModelType, setModelMetaKey } from './utils';\r\nexport function initModelField(obj, key, defValue, type) {\r\n    if (type === void 0) { type = FieldType.DATA; }\r\n    var fields = getModelMetaKey(obj, 'fields');\r\n    // Initialize the observable field to the default value\r\n    storage.setModelDataKey(obj, key, defValue);\r\n    if (fields.indexOf(key) === -1) {\r\n        fields.push(key);\r\n    }\r\n    assignComputed(obj, key, function () { return getField(obj, key); }, function (value) { return updateField(obj, key, value, type); });\r\n}\r\n/**\r\n * Initialize a reference to other models\r\n *\r\n * @export\r\n * @param {PureModel} obj Model to which the reference should be added\r\n * @param {string} key Model property where the reference will be defined\r\n * @param {IReferenceOptions} options Reference options\r\n * @param {TRefValue} initialVal Initial reference value\r\n */\r\nexport function initModelRef(obj, key, options, initialVal) {\r\n    var refs = getModelMetaKey(obj, 'refs');\r\n    // Initialize the observable field to the given value\r\n    refs[key] = options;\r\n    var isArray = options.type === ReferenceType.TO_MANY;\r\n    storage.setModelDataKey(obj, key, isArray ? [] : undefined);\r\n    assignComputed(obj, key, function () { return getRef(obj, key); }, function (value) { return updateRef(obj, key, value); });\r\n    if (!options.property) {\r\n        obj[key] = initialVal;\r\n    }\r\n}\r\nfunction prepareFields(data, meta, model) {\r\n    var staticModel = model.constructor;\r\n    var fields = meta.fields.slice();\r\n    var classRefs = storage.getModelClassReferences(staticModel);\r\n    var refs = Object.assign({}, classRefs, meta.refs);\r\n    var defaults = storage.getModelDefaults(staticModel);\r\n    Object.keys(data).concat(Object.keys(defaults))\r\n        .forEach(function (key) {\r\n        if (!(key in refs) && fields.indexOf(key) === -1) {\r\n            fields.push(key);\r\n        }\r\n    });\r\n    return { defaults: defaults, fields: fields, refs: refs };\r\n}\r\nfunction initModelData(model, data, meta, collection) {\r\n    var _a = prepareFields(data, meta, model), defaults = _a.defaults, fields = _a.fields, refs = _a.refs;\r\n    var staticModel = model.constructor;\r\n    var modelId = storage.getModelClassMetaKey(staticModel, 'id');\r\n    var modelType = storage.getModelClassMetaKey(staticModel, 'type');\r\n    fields.forEach(function (key) {\r\n        var type = FieldType.DATA;\r\n        var value = data[key];\r\n        if (value === undefined) {\r\n            value = defaults[key];\r\n        }\r\n        if (key === (modelId || 'id')) {\r\n            type = FieldType.ID;\r\n            value = meta.id;\r\n        }\r\n        else if (key === modelType) {\r\n            type = FieldType.TYPE;\r\n            value = meta.type;\r\n        }\r\n        initModelField(model, key, value, type);\r\n    });\r\n    if (modelId && !(modelId in fields)) {\r\n        initModelField(model, modelId, meta.id, FieldType.ID);\r\n    }\r\n    Object.keys(refs).forEach(function (key) {\r\n        var opts = refs[key];\r\n        var value = data[key] || defaults[key] || undefined;\r\n        var models = collection ? collection.add(value, getModelType(opts.model)) : value;\r\n        initModelRef(model, key, opts, models);\r\n    });\r\n}\r\nfunction initModelMeta(model, data, collection) {\r\n    var staticModel = model.constructor;\r\n    var modelId = storage.getModelClassMetaKey(staticModel, 'id') || 'id';\r\n    var modelType = storage.getModelClassMetaKey(staticModel, 'type');\r\n    var type = (modelType && data[modelType]) || getModelType(model);\r\n    var id = (modelId && data[modelId]);\r\n    if (!id) {\r\n        if (!staticModel.enableAutoId) {\r\n            throw new Error(ID_REQUIRED);\r\n        }\r\n        id = staticModel.getAutoId();\r\n        while (collection && collection.find(type, id)) {\r\n            id = staticModel.getAutoId();\r\n        }\r\n    }\r\n    var meta = {\r\n        fields: [],\r\n        id: id,\r\n        refs: {},\r\n        type: type,\r\n    };\r\n    var newMeta;\r\n    var toInit = { fields: [], refs: {} };\r\n    if (META_FIELD in data && data[META_FIELD]) {\r\n        var oldMeta = data[META_FIELD];\r\n        toInit.fields = oldMeta.fields;\r\n        delete oldMeta.fields;\r\n        toInit.refs = oldMeta.refs;\r\n        delete oldMeta.refs;\r\n        newMeta = storage.setModelMeta(model, Object.assign(meta, oldMeta));\r\n        delete data[META_FIELD];\r\n    }\r\n    else {\r\n        newMeta = storage.setModelMeta(model, meta);\r\n    }\r\n    return Object.assign({}, newMeta, toInit);\r\n}\r\nexport function initModel(model, rawData, collection) {\r\n    var staticModel = model.constructor;\r\n    var data = Object.assign({}, staticModel.preprocess(rawData));\r\n    setModelMetaKey(model, 'collection', collection);\r\n    var meta = initModelMeta(model, data, collection);\r\n    initModelData(model, data, meta, collection);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL21vZGVsL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGNBQWMsRUFBMEIsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRzlFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFDLFdBQVcsRUFBZSxNQUFNLGNBQWMsQ0FBQztBQU92RCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFL0MsT0FBTyxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNsRSxPQUFPLEVBQUMsZUFBZSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFPdkUsTUFBTSx5QkFDSixHQUFNLEVBQ04sR0FBVyxFQUNYLFFBQWEsRUFDYixJQUFnQztJQUFoQyxxQkFBQSxFQUFBLE9BQWtCLFNBQVMsQ0FBQyxJQUFJO0lBRWhDLElBQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFrQixDQUFDO0lBRS9ELHVEQUF1RDtJQUN2RCxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDNUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsY0FBTSxPQUFBLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVB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SyxDQUFDLFdBQStCLENBQUM7SUFDMUQsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLGVBQWUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELElBQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthc3NpZ25Db21wdXRlZCwgSURpY3Rpb25hcnksIElSYXdNb2RlbCwgTUVUQV9GSUVMRH0gZnJvbSAnZGF0eC11dGlscyc7XG5pbXBvcnQge2NvbXB1dGVkLCBkZWNvcmF0ZSwgZXh0ZW5kT2JzZXJ2YWJsZSwgSU9ic2VydmFibGVPYmplY3QsIGlzT2JzZXJ2YWJsZSwgc2V0fSBmcm9tICdtb2J4JztcblxuaW1wb3J0IHtGaWVsZFR5cGV9IGZyb20gJy4uLy4uL2VudW1zL0ZpZWxkVHlwZSc7XG5pbXBvcnQge1JlZmVyZW5jZVR5cGV9IGZyb20gJy4uLy4uL2VudW1zL1JlZmVyZW5jZVR5cGUnO1xuaW1wb3J0IHtJRF9SRVFVSVJFRCwgTU9ERUxfRVhJU1RTfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtJSWRlbnRpZmllcn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9JSWRlbnRpZmllcic7XG5pbXBvcnQge0lSZWZlcmVuY2VPcHRpb25zfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL0lSZWZlcmVuY2VPcHRpb25zJztcbmltcG9ydCB7SVR5cGV9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvSVR5cGUnO1xuaW1wb3J0IHtUUmVmVmFsdWV9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvVFJlZlZhbHVlJztcbmltcG9ydCB7UHVyZUNvbGxlY3Rpb259IGZyb20gJy4uLy4uL1B1cmVDb2xsZWN0aW9uJztcbmltcG9ydCB7UHVyZU1vZGVsfSBmcm9tICcuLi8uLi9QdXJlTW9kZWwnO1xuaW1wb3J0IHtzdG9yYWdlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdG9yYWdlJztcbmltcG9ydCB7ZXJyb3J9IGZyb20gJy4uL2Zvcm1hdCc7XG5pbXBvcnQge2dldEZpZWxkLCBnZXRSZWYsIHVwZGF0ZUZpZWxkLCB1cGRhdGVSZWZ9IGZyb20gJy4vZmllbGRzJztcbmltcG9ydCB7Z2V0TW9kZWxNZXRhS2V5LCBnZXRNb2RlbFR5cGUsIHNldE1vZGVsTWV0YUtleX0gZnJvbSAnLi91dGlscyc7XG5cbmludGVyZmFjZSBJTWV0YVRvSW5pdCBleHRlbmRzIElEaWN0aW9uYXJ5PGFueT4ge1xuICBmaWVsZHM6IEFycmF5PHN0cmluZz47XG4gIHJlZnM6IElEaWN0aW9uYXJ5PElSZWZlcmVuY2VPcHRpb25zPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRNb2RlbEZpZWxkPFQgZXh0ZW5kcyBQdXJlTW9kZWw+KFxuICBvYmo6IFQsXG4gIGtleTogc3RyaW5nLFxuICBkZWZWYWx1ZTogYW55LFxuICB0eXBlOiBGaWVsZFR5cGUgPSBGaWVsZFR5cGUuREFUQSxcbikge1xuICBjb25zdCBmaWVsZHMgPSBnZXRNb2RlbE1ldGFLZXkob2JqLCAnZmllbGRzJykgYXMgQXJyYXk8c3RyaW5nPjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBvYnNlcnZhYmxlIGZpZWxkIHRvIHRoZSBkZWZhdWx0IHZhbHVlXG4gIHN0b3JhZ2Uuc2V0TW9kZWxEYXRhS2V5KG9iaiwga2V5LCBkZWZWYWx1ZSk7XG4gIGlmIChmaWVsZHMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgIGZpZWxkcy5wdXNoKGtleSk7XG4gIH1cblxuICBhc3NpZ25Db21wdXRlZChvYmosIGtleSwgKCkgPT4gZ2V0RmllbGQob2JqLCBrZXkpLCAodmFsdWUpID0+IHVwZGF0ZUZpZWxkKG9iaiwga2V5LCB2YWx1ZSwgdHlwZSkpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgYSByZWZlcmVuY2UgdG8gb3RoZXIgbW9kZWxzXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtQdXJlTW9kZWx9IG9iaiBNb2RlbCB0byB3aGljaCB0aGUgcmVmZXJlbmNlIHNob3VsZCBiZSBhZGRlZFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBNb2RlbCBwcm9wZXJ0eSB3aGVyZSB0aGUgcmVmZXJlbmNlIHdpbGwgYmUgZGVmaW5lZFxuICogQHBhcmFtIHtJUmVmZXJlbmNlT3B0aW9uc30gb3B0aW9ucyBSZWZlcmVuY2Ugb3B0aW9uc1xuICogQHBhcmFtIHtUUmVmVmFsdWV9IGluaXRpYWxWYWwgSW5pdGlhbCByZWZlcmVuY2UgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRNb2RlbFJlZihvYmo6IFB1cmVNb2RlbCwga2V5OiBzdHJpbmcsIG9wdGlvbnM6IElSZWZlcmVuY2VPcHRpb25zLCBpbml0aWFsVmFsOiBUUmVmVmFsdWUpIHtcbiAgY29uc3QgcmVmcyA9IGdldE1vZGVsTWV0YUtleShvYmosICdyZWZzJyk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgb2JzZXJ2YWJsZSBmaWVsZCB0byB0aGUgZ2l2ZW4gdmFsdWVcbiAgcmVmc1trZXldID0gb3B0aW9ucztcblxuICBjb25zdCBpc0FycmF5ID0gb3B0aW9ucy50eXBlID09PSBSZWZlcmVuY2VUeXBlLlRPX01BTlk7XG4gIHN0b3JhZ2Uuc2V0TW9kZWxEYXRhS2V5KG9iaiwga2V5LCBpc0FycmF5ID8gW10gOiB1bmRlZmluZWQpO1xuXG4gIGFzc2lnbkNvbXB1dGVkKG9iaiwga2V5LCAoKSA9PiBnZXRSZWYob2JqLCBrZXkpLCAodmFsdWUpID0+IHVwZGF0ZVJlZihvYmosIGtleSwgdmFsdWUpKTtcblxuICBpZiAoIW9wdGlvbnMucHJvcGVydHkpIHtcbiAgICBvYmpba2V5XSA9IGluaXRpYWxWYWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZpZWxkcyhkYXRhOiBJUmF3TW9kZWwsIG1ldGE6IElNZXRhVG9Jbml0LCBtb2RlbDogUHVyZU1vZGVsKSB7XG4gIGNvbnN0IHN0YXRpY01vZGVsID0gbW9kZWwuY29uc3RydWN0b3IgYXMgdHlwZW9mIFB1cmVNb2RlbDtcbiAgY29uc3QgZmllbGRzID0gbWV0YS5maWVsZHMuc2xpY2UoKTtcbiAgY29uc3QgY2xhc3NSZWZzID0gc3RvcmFnZS5nZXRNb2RlbENsYXNzUmVmZXJlbmNlcyhzdGF0aWNNb2RlbCk7XG4gIGNvbnN0IHJlZnMgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFzc1JlZnMsIG1ldGEucmVmcyk7XG5cbiAgY29uc3QgZGVmYXVsdHMgPSBzdG9yYWdlLmdldE1vZGVsRGVmYXVsdHMoc3RhdGljTW9kZWwpO1xuXG4gIE9iamVjdC5rZXlzKGRhdGEpLmNvbmNhdChPYmplY3Qua2V5cyhkZWZhdWx0cykpXG4gICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKCEoa2V5IGluIHJlZnMpICYmIGZpZWxkcy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgIGZpZWxkcy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgcmV0dXJuIHtkZWZhdWx0cywgZmllbGRzLCByZWZzfTtcbn1cblxuZnVuY3Rpb24gaW5pdE1vZGVsRGF0YShtb2RlbDogUHVyZU1vZGVsLCBkYXRhOiBJUmF3TW9kZWwsIG1ldGE6IElNZXRhVG9Jbml0LCBjb2xsZWN0aW9uPzogUHVyZUNvbGxlY3Rpb24pIHtcbiAgY29uc3Qge2RlZmF1bHRzLCBmaWVsZHMsIHJlZnN9ID0gcHJlcGFyZUZpZWxkcyhkYXRhLCBtZXRhLCBtb2RlbCk7XG5cbiAgY29uc3Qgc3RhdGljTW9kZWwgPSBtb2RlbC5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgUHVyZU1vZGVsO1xuICBjb25zdCBtb2RlbElkID0gc3RvcmFnZS5nZXRNb2RlbENsYXNzTWV0YUtleShzdGF0aWNNb2RlbCwgJ2lkJyk7XG4gIGNvbnN0IG1vZGVsVHlwZSA9IHN0b3JhZ2UuZ2V0TW9kZWxDbGFzc01ldGFLZXkoc3RhdGljTW9kZWwsICd0eXBlJyk7XG5cbiAgZmllbGRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGxldCB0eXBlID0gRmllbGRUeXBlLkRBVEE7XG4gICAgbGV0IHZhbHVlID0gZGF0YVtrZXldO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IGRlZmF1bHRzW2tleV07XG4gICAgfVxuICAgIGlmIChrZXkgPT09IChtb2RlbElkIHx8ICdpZCcpKSB7XG4gICAgICB0eXBlID0gRmllbGRUeXBlLklEO1xuICAgICAgdmFsdWUgPSBtZXRhLmlkO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBtb2RlbFR5cGUpIHtcbiAgICAgIHR5cGUgPSBGaWVsZFR5cGUuVFlQRTtcbiAgICAgIHZhbHVlID0gbWV0YS50eXBlO1xuICAgIH1cbiAgICBpbml0TW9kZWxGaWVsZChtb2RlbCwga2V5LCB2YWx1ZSwgdHlwZSk7XG4gIH0pO1xuXG4gIGlmIChtb2RlbElkICYmICEobW9kZWxJZCBpbiBmaWVsZHMpKSB7XG4gICAgaW5pdE1vZGVsRmllbGQobW9kZWwsIG1vZGVsSWQsIG1ldGEuaWQsIEZpZWxkVHlwZS5JRCk7XG4gIH1cblxuICBPYmplY3Qua2V5cyhyZWZzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBvcHRzID0gcmVmc1trZXldO1xuICAgIGNvbnN0IHZhbHVlID0gZGF0YVtrZXldIHx8IGRlZmF1bHRzW2tleV0gfHwgdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1vZGVsczogYW55ID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24uYWRkKHZhbHVlLCBnZXRNb2RlbFR5cGUob3B0cy5tb2RlbCkpIDogdmFsdWU7XG4gICAgaW5pdE1vZGVsUmVmKG1vZGVsLCBrZXksIG9wdHMsIG1vZGVscyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0TW9kZWxNZXRhKG1vZGVsOiBQdXJlTW9kZWwsIGRhdGE6IElSYXdNb2RlbCwgY29sbGVjdGlvbj86IFB1cmVDb2xsZWN0aW9uKTogSURpY3Rpb25hcnk8YW55PiAmIElNZXRhVG9Jbml0IHtcbiAgY29uc3Qgc3RhdGljTW9kZWwgPSBtb2RlbC5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgUHVyZU1vZGVsO1xuICBjb25zdCBtb2RlbElkID0gc3RvcmFnZS5nZXRNb2RlbENsYXNzTWV0YUtleShzdGF0aWNNb2RlbCwgJ2lkJykgfHwgJ2lkJztcbiAgY29uc3QgbW9kZWxUeXBlID0gc3RvcmFnZS5nZXRNb2RlbENsYXNzTWV0YUtleShzdGF0aWNNb2RlbCwgJ3R5cGUnKTtcblxuICBjb25zdCB0eXBlID0gKG1vZGVsVHlwZSAmJiBkYXRhW21vZGVsVHlwZV0pIHx8IGdldE1vZGVsVHlwZShtb2RlbCk7XG4gIGxldCBpZCA9IChtb2RlbElkICYmIGRhdGFbbW9kZWxJZF0pO1xuXG4gIGlmICghaWQpIHtcbiAgICBpZiAoIXN0YXRpY01vZGVsLmVuYWJsZUF1dG9JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKElEX1JFUVVJUkVEKTtcbiAgICB9XG4gICAgaWQgPSBzdGF0aWNNb2RlbC5nZXRBdXRvSWQoKTtcbiAgICB3aGlsZSAoY29sbGVjdGlvbiAmJiBjb2xsZWN0aW9uLmZpbmQodHlwZSwgaWQpKSB7XG4gICAgICBpZCA9IHN0YXRpY01vZGVsLmdldEF1dG9JZCgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1ldGEgPSB7XG4gICAgZmllbGRzOiBbXSxcbiAgICBpZCxcbiAgICByZWZzOiB7fSxcbiAgICB0eXBlLFxuICB9O1xuXG4gIGxldCBuZXdNZXRhO1xuICBjb25zdCB0b0luaXQ6IElNZXRhVG9Jbml0ID0ge2ZpZWxkczogW10sIHJlZnM6IHt9fTtcbiAgaWYgKE1FVEFfRklFTEQgaW4gZGF0YSAmJiBkYXRhW01FVEFfRklFTERdKSB7XG5cbiAgICBjb25zdCBvbGRNZXRhID0gZGF0YVtNRVRBX0ZJRUxEXSBhcyBJRGljdGlvbmFyeTxhbnk+O1xuICAgIHRvSW5pdC5maWVsZHMgPSBvbGRNZXRhLmZpZWxkcztcbiAgICBkZWxldGUgb2xkTWV0YS5maWVsZHM7XG4gICAgdG9Jbml0LnJlZnMgPSBvbGRNZXRhLnJlZnM7XG4gICAgZGVsZXRlIG9sZE1ldGEucmVmcztcblxuICAgIG5ld01ldGEgPSBzdG9yYWdlLnNldE1vZGVsTWV0YShtb2RlbCwgT2JqZWN0LmFzc2lnbihtZXRhLCBvbGRNZXRhKSk7XG4gICAgZGVsZXRlIGRhdGFbTUVUQV9GSUVMRF07XG4gIH0gZWxzZSB7XG4gICAgbmV3TWV0YSA9IHN0b3JhZ2Uuc2V0TW9kZWxNZXRhKG1vZGVsLCBtZXRhKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbmV3TWV0YSwgdG9Jbml0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRNb2RlbChtb2RlbDogUHVyZU1vZGVsLCByYXdEYXRhOiBJUmF3TW9kZWwsIGNvbGxlY3Rpb24/OiBQdXJlQ29sbGVjdGlvbikge1xuICBjb25zdCBzdGF0aWNNb2RlbCA9IG1vZGVsLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBQdXJlTW9kZWw7XG4gIGNvbnN0IGRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0aWNNb2RlbC5wcmVwcm9jZXNzKHJhd0RhdGEpKTtcbiAgc2V0TW9kZWxNZXRhS2V5KG1vZGVsLCAnY29sbGVjdGlvbicsIGNvbGxlY3Rpb24pO1xuICBjb25zdCBtZXRhID0gaW5pdE1vZGVsTWV0YShtb2RlbCwgZGF0YSwgY29sbGVjdGlvbik7XG4gIGluaXRNb2RlbERhdGEobW9kZWwsIGRhdGEsIG1ldGEsIGNvbGxlY3Rpb24pO1xufVxuIl19","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/helpers/model/init.d.ts","text":"import { IRawModel } from 'datx-utils';\r\nimport { FieldType } from '../../enums/FieldType';\r\nimport { IReferenceOptions } from '../../interfaces/IReferenceOptions';\r\nimport { TRefValue } from '../../interfaces/TRefValue';\r\nimport { PureCollection } from '../../PureCollection';\r\nimport { PureModel } from '../../PureModel';\r\nexport declare function initModelField<T extends PureModel>(obj: T, key: string, defValue: any, type?: FieldType): void;\r\n/**\r\n * Initialize a reference to other models\r\n *\r\n * @export\r\n * @param {PureModel} obj Model to which the reference should be added\r\n * @param {string} key Model property where the reference will be defined\r\n * @param {IReferenceOptions} options Reference options\r\n * @param {TRefValue} initialVal Initial reference value\r\n */\r\nexport declare function initModelRef(obj: PureModel, key: string, options: IReferenceOptions, initialVal: TRefValue): void;\r\nexport declare function initModel(model: PureModel, rawData: IRawModel, collection?: PureCollection): void;\r\n"}}

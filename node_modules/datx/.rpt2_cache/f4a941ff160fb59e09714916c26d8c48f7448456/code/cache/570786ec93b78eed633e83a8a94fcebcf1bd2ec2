{"code":"import * as tslib_1 from \"tslib\";\r\nimport { action, computed, extendObservable, observable, set } from 'mobx';\r\nimport { MODEL_SINGLE_COLLECTION, UNDEFINED_TYPE } from './errors';\r\nimport { initModels, isSelectorFunction, upsertModel } from './helpers/collection';\r\nimport { error } from './helpers/format';\r\nimport { getModelCollection, getModelId, getModelType, modelToJSON, setModelMetaKey, updateModel, } from './helpers/model/utils';\r\nimport { PureModel } from './PureModel';\r\nvar PureCollection = /** @class */ (function () {\r\n    function PureCollection(data) {\r\n        if (data === void 0) { data = []; }\r\n        this.__data = observable.array([], { deep: false });\r\n        this.__dataMap = {};\r\n        this.__dataList = {};\r\n        extendObservable(this, {});\r\n        this.insert(data);\r\n    }\r\n    /**\r\n     * Function for inserting raw models into the collection. Used when hydrating the collection\r\n     *\r\n     * @param {Array<IRawModel>} data Raw model data\r\n     * @returns {Array<PureModel>} A list of initialized models\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.insert = function (data) {\r\n        var models = initModels(this, data);\r\n        this.__insertModel(models);\r\n        return models;\r\n    };\r\n    PureCollection.prototype.add = function (data, model) {\r\n        return (data instanceof Array) ? this.__addArray(data, model) : this.__addSingle(data, model);\r\n    };\r\n    PureCollection.prototype.find = function (model, id) {\r\n        if (id instanceof PureModel) {\r\n            return id;\r\n        }\r\n        return isSelectorFunction(model)\r\n            ? (this.__data.find(model) || null)\r\n            : (this.__findByType(model, id) || null);\r\n    };\r\n    /**\r\n     * Filter models based on a matching function\r\n     *\r\n     * @param {TFilterFn} test Function used to match the models\r\n     * @returns {(PureModel|null)} The matching models\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.filter = function (test) {\r\n        return this.__data.filter(test);\r\n    };\r\n    /**\r\n     * Find all matching models or all models if no type is given\r\n     *\r\n     * @param {(IType|typeof PureModel)} [model] Model type to select\r\n     * @returns {Array<PureModel>} List of matching models\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.findAll = function (model) {\r\n        if (model) {\r\n            var type = getModelType(model);\r\n            if (!(type in this.__dataList)) {\r\n                set(this.__dataList, (_a = {}, _a[type] = observable.array([]), _a));\r\n            }\r\n            return this.__dataList[type];\r\n        }\r\n        return this.__data;\r\n        var _a;\r\n    };\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {PureModel} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.hasItem = function (model) {\r\n        var id = getModelId(model);\r\n        return Boolean(this.find(model, id));\r\n    };\r\n    PureCollection.prototype.remove = function (obj, id) {\r\n        var model = typeof obj === 'object' ? obj : this.find(obj, id);\r\n        if (model) {\r\n            this.__removeModel(model);\r\n        }\r\n    };\r\n    /**\r\n     * Remove all models of the given model type from the collection\r\n     *\r\n     * @param {(IType|typeof PureModel)} type Model type\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.removeAll = function (type) {\r\n        this.__removeModel(this.findAll(type).slice());\r\n    };\r\n    Object.defineProperty(PureCollection.prototype, \"length\", {\r\n        /**\r\n         * A total count of models in the collection\r\n         *\r\n         * @readonly\r\n         * @type {number}\r\n         * @memberof Collection\r\n         */\r\n        get: function () {\r\n            return this.__data.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the serializable value of the collection\r\n     *\r\n     * @returns {Array<IRawModel>} Pure JS value of the collection\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.toJSON = function () {\r\n        return this.__data.map(modelToJSON);\r\n    };\r\n    Object.defineProperty(PureCollection.prototype, \"snapshot\", {\r\n        get: function () {\r\n            return this.toJSON();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Reset the collection (remove all models)\r\n     *\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.reset = function () {\r\n        this.__data.map(function (model) { return setModelMetaKey(model, 'collection', undefined); });\r\n        this.__data.replace([]);\r\n        this.__dataList = observable({});\r\n        this.__dataMap = observable({});\r\n    };\r\n    PureCollection.prototype.getAllModels = function () {\r\n        return this.__data.slice();\r\n    };\r\n    PureCollection.prototype.__addArray = function (data, model) {\r\n        var _this = this;\r\n        return data.filter(Boolean).map(function (item) { return _this.__addSingle(item, model); });\r\n    };\r\n    PureCollection.prototype.__addSingle = function (data, model) {\r\n        if (!data || typeof data === 'number' || typeof data === 'string') {\r\n            return data;\r\n        }\r\n        if (data instanceof PureModel) {\r\n            if (!this.hasItem(data)) {\r\n                this.__insertModel(data);\r\n            }\r\n            return data;\r\n        }\r\n        if (!model && model !== 0) {\r\n            throw error(UNDEFINED_TYPE);\r\n        }\r\n        var type = getModelType(model);\r\n        var modelInstance = upsertModel(data, type, this);\r\n        this.__insertModel(modelInstance, type);\r\n        return modelInstance;\r\n    };\r\n    PureCollection.prototype.__insertModel = function (model, type, id) {\r\n        var _this = this;\r\n        if (model instanceof Array) {\r\n            return model.forEach(function (item) { return _this.__insertModel(item, type, id); });\r\n        }\r\n        var collection = getModelCollection(model);\r\n        if (collection && collection !== this) {\r\n            throw error(MODEL_SINGLE_COLLECTION);\r\n        }\r\n        var modelType = type || getModelType(model);\r\n        var modelId = id || getModelId(model);\r\n        var stringType = modelType.toString();\r\n        var existingModel = this.find(modelType, modelId);\r\n        if (existingModel) {\r\n            updateModel(existingModel, model);\r\n            return;\r\n        }\r\n        this.__data.push(model);\r\n        if (modelType in this.__dataList) {\r\n            this.__dataList[modelType].push(model);\r\n        }\r\n        else {\r\n            set(this.__dataList, stringType, observable.array([model], { deep: false }));\r\n        }\r\n        if (modelType in this.__dataMap) {\r\n            set(this.__dataMap[modelType], modelId.toString(), model);\r\n        }\r\n        else {\r\n            set(this.__dataMap, stringType, observable.shallowObject((_a = {}, _a[modelId] = model, _a)));\r\n        }\r\n        setModelMetaKey(model, 'collection', this);\r\n        var _a;\r\n    };\r\n    PureCollection.prototype.__removeModel = function (model, type, id) {\r\n        var _this = this;\r\n        if (model instanceof Array) {\r\n            return model.forEach(function (item) { return _this.__removeModel(item, type, id); });\r\n        }\r\n        var modelType = type || getModelType(model);\r\n        var modelId = id || getModelId(model);\r\n        this.__data.remove(model);\r\n        this.__dataList[modelType].remove(model);\r\n        set(this.__dataMap[modelType], modelId.toString(), undefined);\r\n        setModelMetaKey(model, 'collection', undefined);\r\n    };\r\n    PureCollection.prototype.__findByType = function (model, id) {\r\n        var type = getModelType(model);\r\n        var stringType = type.toString();\r\n        if (id) {\r\n            if (!(type in this.__dataMap)) {\r\n                set(this.__dataMap, stringType, (_a = {}, _a[id] = undefined, _a));\r\n            }\r\n            else if (!(id in this.__dataMap[type])) {\r\n                set(this.__dataMap[type], id.toString(), undefined);\r\n            }\r\n            return this.__dataMap[type][id];\r\n        }\r\n        else {\r\n            if (!(type in this.__dataList)) {\r\n                set(this.__dataList, stringType, observable.array([], { deep: false }));\r\n            }\r\n            return this.__dataList[type].length ? this.__dataList[type][0] : null;\r\n        }\r\n        var _a;\r\n    };\r\n    PureCollection.prototype.__changeModelId = function (oldId, newId, type) {\r\n        this.__dataMap[type][newId] = this.__dataMap[type][oldId];\r\n        delete this.__dataMap[type][oldId];\r\n    };\r\n    /**\r\n     * List of models available in the collection\r\n     *\r\n     * @static\r\n     * @type {Array<typeof PureModel>}\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.types = [];\r\n    tslib_1.__decorate([\r\n        observable\r\n    ], PureCollection.prototype, \"__dataMap\", void 0);\r\n    tslib_1.__decorate([\r\n        observable\r\n    ], PureCollection.prototype, \"__dataList\", void 0);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"insert\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"add\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"remove\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"removeAll\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], PureCollection.prototype, \"length\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"reset\", null);\r\n    return PureCollection;\r\n}());\r\nexport { PureCollection };\r\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/PureCollection.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { IIdentifier } from './interfaces/IIdentifier';\r\nimport { IModelConstructor } from './interfaces/IModelConstructor';\r\nimport { IType } from './interfaces/IType';\r\nimport { TFilterFn } from './interfaces/TFilterFn';\r\nimport { PureModel } from './PureModel';\r\nexport declare class PureCollection {\r\n    /**\r\n     * List of models available in the collection\r\n     *\r\n     * @static\r\n     * @type {Array<typeof PureModel>}\r\n     * @memberof Collection\r\n     */\r\n    static types: Array<typeof PureModel | IModelConstructor<PureModel>>;\r\n    static defaultModel?: typeof PureModel;\r\n    private __data;\r\n    private __dataMap;\r\n    private __dataList;\r\n    constructor(data?: Array<IRawModel>);\r\n    /**\r\n     * Function for inserting raw models into the collection. Used when hydrating the collection\r\n     *\r\n     * @param {Array<IRawModel>} data Raw model data\r\n     * @returns {Array<PureModel>} A list of initialized models\r\n     * @memberof Collection\r\n     */\r\n    insert(data: Array<Partial<IRawModel>>): Array<PureModel>;\r\n    /**\r\n     * Add an existing model to the collection\r\n     *\r\n     * @template T\r\n     * @param {T} data Model to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: T): T;\r\n    /**\r\n     * Add an array of existing models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<T>} data Array of models to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: Array<T>): Array<T>;\r\n    /**\r\n     * Add an array of new models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<IRawModel|IDictionary<any>>} data Array of new data to be added\r\n     * @param {(IType|IModelConstructor<T>)} model Model type to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: Array<IRawModel | IDictionary<any>>, model: IType | IModelConstructor<T>): Array<T>;\r\n    /**\r\n     * Add a new model to the collection\r\n     *\r\n     * @template T\r\n     * @param {(IRawModel|IDictionary<any>)} data New data to be added\r\n     * @param {(IType|IModelConstructor<T>)} model Model type to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: IRawModel | IDictionary<any>, model: IType | IModelConstructor<T>): T;\r\n    /**\r\n     * Find a model based on the defined type and (optional) identifier\r\n     *\r\n     * @param {(IType|typeof PureModel|PureModel)} type Model type\r\n     * @param {IIdentifier} [id] Model identifier\r\n     * @returns {(PureModel|null)} The first matching model\r\n     * @memberof Collection\r\n     */\r\n    find<T extends PureModel>(type: IType | T | IModelConstructor<T>, id?: IIdentifier | PureModel): T | null;\r\n    /**\r\n     * Find a model based on a matching function\r\n     *\r\n     * @param {TFilterFn} test Function used to match the model\r\n     * @returns {(PureModel|null)} The first matching model\r\n     * @memberof Collection\r\n     */\r\n    find<T extends PureModel>(test: TFilterFn): T | null;\r\n    /**\r\n     * Filter models based on a matching function\r\n     *\r\n     * @param {TFilterFn} test Function used to match the models\r\n     * @returns {(PureModel|null)} The matching models\r\n     * @memberof Collection\r\n     */\r\n    filter(test: TFilterFn): Array<PureModel>;\r\n    /**\r\n     * Find all matching models or all models if no type is given\r\n     *\r\n     * @param {(IType|typeof PureModel)} [model] Model type to select\r\n     * @returns {Array<PureModel>} List of matching models\r\n     * @memberof Collection\r\n     */\r\n    findAll<T extends PureModel>(model?: IType | IModelConstructor<T>): Array<T>;\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {PureModel} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    hasItem(model: PureModel): boolean;\r\n    /**\r\n     * Remove the first model based on the type and (optional) identifier\r\n     *\r\n     * @param {(IType|typeof PureModel)} type Model type\r\n     * @param {IIdentifier} [id] Model identifier\r\n     * @memberof Collection\r\n     */\r\n    remove(type: IType | typeof PureModel, id?: IIdentifier): any;\r\n    /**\r\n     * Remove the given model from the collection\r\n     *\r\n     * @param {PureModel} model Model to be removed from the collection\r\n     * @memberof Collection\r\n     */\r\n    remove(model: PureModel): any;\r\n    /**\r\n     * Remove all models of the given model type from the collection\r\n     *\r\n     * @param {(IType|typeof PureModel)} type Model type\r\n     * @memberof Collection\r\n     */\r\n    removeAll(type: IType | typeof PureModel): void;\r\n    /**\r\n     * A total count of models in the collection\r\n     *\r\n     * @readonly\r\n     * @type {number}\r\n     * @memberof Collection\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * Get the serializable value of the collection\r\n     *\r\n     * @returns {Array<IRawModel>} Pure JS value of the collection\r\n     * @memberof Collection\r\n     */\r\n    toJSON(): Array<IRawModel>;\r\n    readonly snapshot: IRawModel[];\r\n    /**\r\n     * Reset the collection (remove all models)\r\n     *\r\n     * @memberof Collection\r\n     */\r\n    reset(): void;\r\n    getAllModels(): PureModel[];\r\n    private __addArray<T>(data);\r\n    private __addArray<T>(data, model?);\r\n    private __addSingle<T>(data);\r\n    private __addSingle<T>(data, model?);\r\n    private __insertModel(model, type?, id?);\r\n    private __removeModel(model, type?, id?);\r\n    private __findByType(model, id?);\r\n    private __changeModelId(oldId, newId, type);\r\n}\r\n"}}

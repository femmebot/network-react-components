{"code":"import { META_FIELD, warn } from 'datx-utils';\r\nimport { toJS } from 'mobx';\r\nimport { NO_REFS, NOT_A_CLONE, REF_NEEDS_COLLECTION } from '../../errors';\r\nimport { PureModel } from '../../PureModel';\r\nimport { storage } from '../../services/storage';\r\nimport { error } from '../format';\r\nimport { initModelField } from '../model/init';\r\n/**\r\n * Get the model type\r\n *\r\n * @export\r\n * @param {(IType|typeof PureModel|PureModel)} model Model to be checked\r\n * @returns {IType} Model type\r\n */\r\nexport function getModelType(model) {\r\n    if (typeof model === 'function') {\r\n        return model.type;\r\n    }\r\n    else if (typeof model === 'object') {\r\n        return getModelMetaKey(model, 'type') || model.constructor.type;\r\n    }\r\n    return model;\r\n}\r\n/**\r\n * Get the model identifier\r\n *\r\n * @export\r\n * @param {(PureModel|IIdentifier)} model Model to be checked\r\n * @returns {IIdentifier} Model identifier\r\n */\r\nexport function getModelId(model) {\r\n    if (model instanceof PureModel) {\r\n        return getModelMetaKey(model, 'id');\r\n    }\r\n    return model;\r\n}\r\n/**\r\n * Get a collection the given model belongs to\r\n *\r\n * @export\r\n * @param {PureModel} model Model to be checked\r\n * @returns {PureCollection} A collection the given model belongs to\r\n */\r\nexport function getModelCollection(model) {\r\n    return getModelMetaKey(model, 'collection');\r\n}\r\n/**\r\n * Clone the given model\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} model Model to be clones\r\n * @returns {T} Cloned model object\r\n */\r\nexport function cloneModel(model) {\r\n    var TypeModel = model.constructor;\r\n    var rawData = modelToJSON(model);\r\n    var meta = rawData[META_FIELD];\r\n    meta.originalId = meta.id;\r\n    delete meta.id;\r\n    var clone = new TypeModel(rawData);\r\n    var collection = getModelCollection(model);\r\n    if (collection) {\r\n        collection.add(clone);\r\n    }\r\n    else {\r\n        warn(\"The model is not in the collection. Referencing the original model won't be possible\");\r\n    }\r\n    return clone;\r\n}\r\n/**\r\n * Get the original model for the cloned model\r\n *\r\n * @export\r\n * @param {PureModel} model Cloned model\r\n * @returns {PureModel} Original model\r\n */\r\nexport function getOriginalModel(model) {\r\n    var collection = getModelCollection(model);\r\n    var originalId = getModelMetaKey(model, 'originalId');\r\n    if (originalId) {\r\n        if (!collection) {\r\n            throw error(REF_NEEDS_COLLECTION);\r\n        }\r\n        return collection.find(model, originalId);\r\n    }\r\n    throw error(NOT_A_CLONE);\r\n}\r\n/**\r\n * Bulk update the model data\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} model Model to be updated\r\n * @param {IDictionary<any>} data Data that should be assigned to the model\r\n * @returns {T}\r\n */\r\nexport function updateModel(model, data) {\r\n    var modelId = storage.getModelClassMetaKey(model.constructor, 'id') || 'id';\r\n    var modelType = storage.getModelClassMetaKey(model.constructor, 'type') || 'type';\r\n    var keys = Object.keys(data instanceof PureModel ? modelToJSON(data) : data);\r\n    keys.forEach(function (key) {\r\n        if (key !== META_FIELD && key !== modelId && key !== modelType) {\r\n            assignModel(model, key, data[key]);\r\n        }\r\n    });\r\n    return model;\r\n}\r\n/**\r\n * Assign a property to a model\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} model A model to modify\r\n * @param {string} key Property name\r\n * @param {*} value Property value\r\n */\r\nexport function assignModel(model, key, value) {\r\n    var refs = getModelMetaKey(model, 'refs');\r\n    if (key in refs) {\r\n        assignModelRef(model, key, value);\r\n    }\r\n    else if (value instanceof PureModel) {\r\n        throw error(NO_REFS, { key: key });\r\n    }\r\n    else {\r\n        assignModelField(model, key, value);\r\n    }\r\n}\r\nfunction assignModelField(model, key, value) {\r\n    var fields = getModelMetaKey(model, 'fields');\r\n    if (fields.indexOf(key) !== -1) {\r\n        model[key] = value;\r\n    }\r\n    else {\r\n        initModelField(model, key, value);\r\n    }\r\n}\r\nfunction assignModelRef(model, key, value) {\r\n    var refs = getModelMetaKey(model, 'refs');\r\n    model[key] = value;\r\n}\r\nexport function getMetaKeyFromRaw(data, key, model) {\r\n    if (META_FIELD in data && typeof data[META_FIELD] === 'object' && data[META_FIELD] !== undefined) {\r\n        return data[META_FIELD][key];\r\n    }\r\n    if (model) {\r\n        var modelId = storage.getModelClassMetaKey(model, key);\r\n        return modelId && data[modelId];\r\n    }\r\n    return data && data[key];\r\n}\r\n/**\r\n * Get a serializable value of the model\r\n *\r\n * @export\r\n * @param {PureModel} model Model to serialize\r\n * @returns {IRawModel} Pure JS value of the model\r\n */\r\nexport function modelToJSON(model) {\r\n    var data = toJS(storage.getModelData(model));\r\n    var rawMeta = Object.assign({}, storage.getModelMeta(model));\r\n    delete rawMeta.collection;\r\n    var meta = toJS(rawMeta);\r\n    delete meta.collection;\r\n    var raw = Object.assign(data, (_a = {}, _a[META_FIELD] = meta, _a));\r\n    var staticModel = model.constructor;\r\n    var modelId = storage.getModelClassMetaKey(staticModel, 'id');\r\n    var modelType = storage.getModelClassMetaKey(staticModel, 'type');\r\n    if (meta && modelId) {\r\n        raw[modelId] = meta.id;\r\n    }\r\n    if (meta && modelType) {\r\n        raw[modelType] = meta.type;\r\n    }\r\n    return raw;\r\n    var _a;\r\n}\r\nexport function getModelMetaKey(model, key) {\r\n    return storage.getModelMetaKey(model, key);\r\n}\r\nexport function setModelMetaKey(model, key, value) {\r\n    return storage.setModelMetaKey(model, key, value);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/helpers/model/utils.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { IIdentifier } from '../../interfaces/IIdentifier';\r\nimport { IType } from '../../interfaces/IType';\r\nimport { PureCollection } from '../../PureCollection';\r\nimport { PureModel } from '../../PureModel';\r\n/**\r\n * Get the model type\r\n *\r\n * @export\r\n * @param {(IType|typeof PureModel|PureModel)} model Model to be checked\r\n * @returns {IType} Model type\r\n */\r\nexport declare function getModelType(model: IType | typeof PureModel | PureModel): IType;\r\n/**\r\n * Get the model identifier\r\n *\r\n * @export\r\n * @param {(PureModel|IIdentifier)} model Model to be checked\r\n * @returns {IIdentifier} Model identifier\r\n */\r\nexport declare function getModelId(model: PureModel | IIdentifier): IIdentifier;\r\n/**\r\n * Get a collection the given model belongs to\r\n *\r\n * @export\r\n * @param {PureModel} model Model to be checked\r\n * @returns {PureCollection} A collection the given model belongs to\r\n */\r\nexport declare function getModelCollection(model: PureModel): PureCollection | undefined;\r\n/**\r\n * Clone the given model\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} model Model to be clones\r\n * @returns {T} Cloned model object\r\n */\r\nexport declare function cloneModel<T extends PureModel>(model: T): T;\r\n/**\r\n * Get the original model for the cloned model\r\n *\r\n * @export\r\n * @param {PureModel} model Cloned model\r\n * @returns {PureModel} Original model\r\n */\r\nexport declare function getOriginalModel(model: PureModel): PureModel;\r\n/**\r\n * Bulk update the model data\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} model Model to be updated\r\n * @param {IDictionary<any>} data Data that should be assigned to the model\r\n * @returns {T}\r\n */\r\nexport declare function updateModel<T extends PureModel>(model: T, data: IDictionary<any>): T;\r\n/**\r\n * Assign a property to a model\r\n *\r\n * @export\r\n * @template T\r\n * @param {T} model A model to modify\r\n * @param {string} key Property name\r\n * @param {*} value Property value\r\n */\r\nexport declare function assignModel<T extends PureModel>(model: T, key: string, value: any): void;\r\nexport declare function getMetaKeyFromRaw(data: IRawModel, key: string, model?: typeof PureModel): any;\r\n/**\r\n * Get a serializable value of the model\r\n *\r\n * @export\r\n * @param {PureModel} model Model to serialize\r\n * @returns {IRawModel} Pure JS value of the model\r\n */\r\nexport declare function modelToJSON(model: PureModel): IRawModel;\r\nexport declare function getModelMetaKey(model: PureModel, key: string): any;\r\nexport declare function setModelMetaKey(model: PureModel, key: string, value: any): void;\r\n"}}

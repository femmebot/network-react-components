{"code":"import * as tslib_1 from \"tslib\";\r\nimport { ReferenceType } from '../enums/ReferenceType';\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport prop from '../prop';\r\nexport function setupModel(Base, _a) {\r\n    var _b = _a === void 0 ? { fields: {} } : _a, fields = _b.fields, references = _b.references, type = _b.type, idAttribute = _b.idAttribute, typeAttribute = _b.typeAttribute;\r\n    var BaseClass = Base;\r\n    if (!isModel(BaseClass)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var ModelWithProps = /** @class */ (function (_super) {\r\n        tslib_1.__extends(ModelWithProps, _super);\r\n        function ModelWithProps() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        return ModelWithProps;\r\n    }(BaseClass));\r\n    if (type) {\r\n        ModelWithProps.type = type;\r\n    }\r\n    if (idAttribute) {\r\n        prop.identifier(ModelWithProps.prototype, idAttribute);\r\n    }\r\n    if (typeAttribute) {\r\n        prop.type(ModelWithProps.prototype, typeAttribute);\r\n    }\r\n    if (fields) {\r\n        Object.keys(fields).forEach(function (key) {\r\n            prop.defaultValue(fields[key])(ModelWithProps.prototype, key);\r\n        });\r\n    }\r\n    if (references) {\r\n        Object.keys(references).forEach(function (key) {\r\n            var _a = references[key], model = _a.model, property = _a.property;\r\n            switch (references[key].type) {\r\n                case ReferenceType.TO_ONE:\r\n                    prop.toOne(model)(ModelWithProps.prototype, key);\r\n                    return;\r\n                case ReferenceType.TO_MANY:\r\n                    prop.toMany(model, property)(ModelWithProps.prototype, key);\r\n                    return;\r\n                default:\r\n                    prop.toOneOrMany(model)(ModelWithProps.prototype, key);\r\n                    return;\r\n            }\r\n        });\r\n    }\r\n    return ModelWithProps;\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/setupModel.d.ts","text":"import { IDictionary } from 'datx-utils';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { IReferenceOptions } from '../interfaces/IReferenceOptions';\r\nimport { IType } from '../interfaces/IType';\r\nimport { PureModel } from '../PureModel';\r\nexport declare function setupModel<IModel extends PureModel, IFields extends IDictionary>(Base: IModelConstructor<IModel>, {fields, references, type, idAttribute, typeAttribute}?: {\r\n    fields: IFields;\r\n    references?: IDictionary<IReferenceOptions>;\r\n    type?: IType;\r\n    idAttribute?: string;\r\n    typeAttribute?: string;\r\n}): IModelConstructor<IModel & IFields>;\r\n"}}

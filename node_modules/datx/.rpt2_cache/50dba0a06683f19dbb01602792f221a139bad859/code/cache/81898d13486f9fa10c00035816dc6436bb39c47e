{"code":"import { ReferenceType } from './enums/ReferenceType';\r\nimport { storage } from './services/storage';\r\n/**\r\n * Set a model property as tracked\r\n *\r\n * @template T\r\n * @param {T} obj Target model\r\n * @param {string} key Property name\r\n * @returns {undefined}\r\n */\r\nfunction propFn(obj, key) {\r\n    storage.addModelDefaultField(obj.constructor, key);\r\n}\r\n// tslint:disable-next-line:no-default-export\r\nexport default Object.assign(propFn, {\r\n    /**\r\n     * Set the default value for the model property\r\n     *\r\n     * @param {any} value The default property value\r\n     * @returns {undefined}\r\n     */\r\n    defaultValue: function (value) {\r\n        return function (obj, key) {\r\n            storage.addModelDefaultField(obj.constructor, key, value);\r\n        };\r\n    },\r\n    /**\r\n     * Add a reference to a single other model\r\n     *\r\n     * @param {typeof PureModel} refModel Model type the reference will point to\r\n     * @returns {undefined}\r\n     */\r\n    toOne: function (refModel) {\r\n        return function (obj, key) {\r\n            storage.addModelClassReference(obj.constructor, key, {\r\n                model: refModel,\r\n                type: ReferenceType.TO_ONE,\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     * Add a reference to multiple other models\r\n     *\r\n     * @param {typeof PureModel} refModel Model type the reference will point to\r\n     * @param {string} [property] Use a foreign key from the other model to get this reference (computed back reference)\r\n     * @returns {undefined}\r\n     */\r\n    toMany: function (refModel, property) {\r\n        return function (obj, key) {\r\n            storage.addModelClassReference(obj.constructor, key, {\r\n                model: refModel,\r\n                property: property,\r\n                type: ReferenceType.TO_MANY,\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     * Add a reference to a single or multiple other models\r\n     *\r\n     * @param {typeof PureModel} refModel Model type the reference will point to\r\n     * @returns {undefined}\r\n     */\r\n    toOneOrMany: function (refModel) {\r\n        return function (obj, key) {\r\n            storage.addModelClassReference(obj.constructor, key, {\r\n                model: refModel,\r\n                type: ReferenceType.TO_ONE_OR_MANY,\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     * Define the identifier property on the model\r\n     *\r\n     * @param {T} obj Target model\r\n     * @param {string} key Identifier property name\r\n     * @returns {undefined}\r\n     */\r\n    identifier: function (obj, key) {\r\n        storage.addModelDefaultField(obj.constructor, key);\r\n        storage.setModelClassMetaKey(obj.constructor, 'id', key);\r\n    },\r\n    /**\r\n     * Define the type property on the model\r\n     *\r\n     * @param {T} obj Target model\r\n     * @param {string} key Type property name\r\n     * @returns {undefined}\r\n     */\r\n    type: function (obj, key) {\r\n        storage.addModelDefaultField(obj.constructor, key);\r\n        storage.setModelClassMetaKey(obj.constructor, 'type', key);\r\n    },\r\n});\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/prop.d.ts","text":"import { PureModel } from './PureModel';\r\ndeclare const _default: (<T extends PureModel>(obj: T, key: string) => void) & {\r\n    defaultValue(value: any): <T extends PureModel>(obj: T, key: string) => void;\r\n    toOne(refModel: string | number | typeof PureModel): <T extends PureModel>(obj: T, key: string) => void;\r\n    toMany(refModel: string | number | typeof PureModel, property?: string | undefined): <T extends PureModel>(obj: T, key: string) => void;\r\n    toOneOrMany(refModel: string | number | typeof PureModel): <T extends PureModel>(obj: T, key: string) => void;\r\n    identifier<T extends PureModel>(obj: T, key: string): void;\r\n    type<T extends PureModel>(obj: T, key: string): void;\r\n};\r\nexport default _default;\r\n"}}

{"code":"var REGEX = /\\$\\{\\s*([a-zA-Z0-9\\-\\_]+)\\s*\\}/g;\r\nfunction msg(str, keys) {\r\n    var msgStr = str;\r\n    var match = REGEX.exec(msgStr);\r\n    while (match) {\r\n        msgStr = msgStr.replace(match[0], keys[match[1]]);\r\n        match = REGEX.exec(msgStr);\r\n    }\r\n    return msgStr;\r\n}\r\n// tslint:disable-next-line:export-name\r\nexport function error(str, keys) {\r\n    if (keys === void 0) { keys = {}; }\r\n    return new Error(\"[datx exception] \" + msg(str, keys));\r\n}\r\n//# sourceMappingURL=format.js.map","map":"{\"version\":3,\"file\":\"format.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/format.ts\"],\"names\":[],\"mappings\":\"AAEA,IAAM,KAAK,GAAG,iCAAiC,CAAC;AAEhD,aAAa,GAAW,EAAE,IAAiB;IACzC,IAAI,MAAM,GAAG,GAAG,CAAC;IACjB,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,OAAO,KAAK,EAAE;QACZ,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC5B;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,uCAAuC;AACvC,MAAM,gBAAgB,GAAW,EAAE,IAAsB;IAAtB,qBAAA,EAAA,SAAsB;IACvD,OAAO,IAAI,KAAK,CAAC,sBAAoB,GAAG,CAAC,GAAG,EAAE,IAAI,CAAG,CAAC,CAAC;AACzD,CAAC\",\"sourcesContent\":[\"import {IDictionary} from 'datx-utils';\\n\\nconst REGEX = /\\\\$\\\\{\\\\s*([a-zA-Z0-9\\\\-\\\\_]+)\\\\s*\\\\}/g;\\n\\nfunction msg(str: string, keys: IDictionary) {\\n  let msgStr = str;\\n  let match = REGEX.exec(msgStr);\\n  while (match) {\\n    msgStr = msgStr.replace(match[0], keys[match[1]]);\\n    match = REGEX.exec(msgStr);\\n  }\\n\\n  return msgStr;\\n}\\n\\n// tslint:disable-next-line:export-name\\nexport function error(str: string, keys: IDictionary = {}): Error {\\n  return new Error(`[datx exception] ${msg(str, keys)}`);\\n}\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/helpers/format.d.ts","text":"import { IDictionary } from 'datx-utils';\r\nexport declare function error(str: string, keys?: IDictionary): Error;\r\n"}}

{"code":"import * as tslib_1 from \"tslib\";\r\nimport { mapItems } from 'datx-utils';\r\nimport { action, computed, intercept, observable } from 'mobx';\r\nimport { SORTED_NO_WRITE, UNIQUE_MODEL } from './errors';\r\nimport { error } from './helpers/format';\r\nimport { getModelId, getModelType } from './helpers/model/utils';\r\nvar View = /** @class */ (function () {\r\n    function View(modelType, __collection, sortMethod, models, unique) {\r\n        if (models === void 0) { models = []; }\r\n        if (unique === void 0) { unique = false; }\r\n        this.__collection = __collection;\r\n        this.unique = unique;\r\n        this.__models = observable.array([]);\r\n        this.__models.replace(models.map(getModelId));\r\n        this.sortMethod = sortMethod;\r\n        this.modelType = getModelType(modelType);\r\n        // @ts-ignore\r\n        this.__collection.__viewList.push(this);\r\n    }\r\n    Object.defineProperty(View.prototype, \"length\", {\r\n        get: function () {\r\n            return this.__models.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(View.prototype, \"list\", {\r\n        get: function () {\r\n            var _this = this;\r\n            var list = this.__models.map(function (id) { return _this.__collection.find(_this.modelType, id); });\r\n            if (this.sortMethod) {\r\n                var sortFn_1 = typeof this.sortMethod === 'string'\r\n                    ? function (item) { return item[_this.sortMethod]; }\r\n                    : this.sortMethod;\r\n                list.sort(function (a, b) {\r\n                    var valA = a ? sortFn_1(a) : Infinity;\r\n                    var valB = b ? sortFn_1(b) : Infinity;\r\n                    return valA - valB;\r\n                });\r\n            }\r\n            var instances = observable.array(list, { deep: false });\r\n            intercept(instances, this.__partialListUpdate.bind(this));\r\n            return instances;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    View.prototype.toJSON = function () {\r\n        return {\r\n            modelType: this.modelType,\r\n            models: this.__models.slice(),\r\n            unique: this.unique,\r\n        };\r\n    };\r\n    Object.defineProperty(View.prototype, \"snapshot\", {\r\n        get: function () {\r\n            return this.toJSON();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    View.prototype.add = function (data) {\r\n        var _this = this;\r\n        var models = mapItems(data, function (item) { return _this.__collection.add(item, _this.modelType); });\r\n        mapItems(models, function (instance) {\r\n            var id = getModelId(instance);\r\n            if (!_this.unique || _this.__models.indexOf(id) === -1) {\r\n                _this.__models.push(id);\r\n            }\r\n        });\r\n        return models;\r\n    };\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {T|IIdentifier} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    View.prototype.hasItem = function (model) {\r\n        var id = getModelId(model);\r\n        return this.__models.indexOf(id) !== -1;\r\n    };\r\n    /**\r\n     * Remove a model from the view\r\n     *\r\n     * @param {IIdentifier|T} model Model identifier\r\n     * @memberof Collection\r\n     */\r\n    View.prototype.remove = function (model) {\r\n        var id = getModelId(model);\r\n        this.__models.remove(id);\r\n    };\r\n    View.prototype.removeAll = function () {\r\n        this.__models.replace([]);\r\n    };\r\n    View.prototype.__partialListUpdate = function (change) {\r\n        var _this = this;\r\n        if (change.type === 'splice') {\r\n            if (this.sortMethod && change.added.length > 0) {\r\n                throw error(SORTED_NO_WRITE);\r\n            }\r\n            var added = change.added.map(getModelId);\r\n            var toRemove_1 = this.__models.slice(change.index, change.removedCount);\r\n            if (this.unique) {\r\n                added.forEach(function (newItemId) {\r\n                    if (_this.__models.indexOf(newItemId) !== -1 && toRemove_1.indexOf(newItemId) === -1) {\r\n                        throw error(UNIQUE_MODEL);\r\n                    }\r\n                });\r\n            }\r\n            (_a = this.__models).splice.apply(_a, [change.index, change.removedCount].concat(added));\r\n            return null;\r\n        }\r\n        if (this.sortMethod && change.newValue) {\r\n            throw error(SORTED_NO_WRITE);\r\n        }\r\n        var newId = getModelId(change.newValue);\r\n        var idIndex = this.__models.indexOf(newId);\r\n        if (this.unique && idIndex !== -1 && idIndex !== change.index) {\r\n            throw error(UNIQUE_MODEL);\r\n        }\r\n        this.__models[change.index] = newId;\r\n        return null;\r\n        var _a;\r\n    };\r\n    View.prototype.__changeModelId = function (oldId, newId) {\r\n        var oldIdIndex = this.__models.indexOf(oldId);\r\n        if (oldIdIndex !== -1) {\r\n            this.__models[oldIdIndex] = newId;\r\n        }\r\n    };\r\n    tslib_1.__decorate([\r\n        observable\r\n    ], View.prototype, \"sortMethod\", void 0);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"length\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"list\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"snapshot\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"add\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"remove\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"removeAll\", null);\r\n    return View;\r\n}());\r\nexport { View };\r\n//# sourceMappingURL=View.js.map","map":"{\"version\":3,\"file\":\"View.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/View.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import {IDictionary, IRawModel, mapItems} from 'datx-utils';\\nimport {action, computed, intercept, IObservableArray, observable} from 'mobx';\\n\\nimport {SORTED_NO_WRITE, UNIQUE_MODEL} from './errors';\\nimport {error} from './helpers/format';\\nimport {getModelId, getModelType} from './helpers/model/utils';\\nimport {IIdentifier} from './interfaces/IIdentifier';\\nimport {IModelConstructor} from './interfaces/IModelConstructor';\\nimport {IRawView} from './interfaces/IRawView';\\nimport {IType} from './interfaces/IType';\\nimport {TChange} from './interfaces/TChange';\\nimport {PureCollection} from './PureCollection';\\nimport {PureModel} from './PureModel';\\n\\nexport class View<T extends PureModel = PureModel> {\\n  public readonly modelType: IType;\\n  @observable public sortMethod?: string|((item: T) => any);\\n\\n  private __models: IObservableArray<IIdentifier> = observable.array([]);\\n\\n  constructor(\\n    modelType: IModelConstructor<T>|IType,\\n    protected __collection: PureCollection,\\n    sortMethod?: string|((item: T) => any),\\n    models: Array<IIdentifier|T> = [],\\n    public unique: boolean = false,\\n  ) {\\n    this.__models.replace(models.map(getModelId));\\n    this.sortMethod = sortMethod;\\n    this.modelType = getModelType(modelType);\\n\\n    // @ts-ignore\\n    this.__collection.__viewList.push(this);\\n  }\\n\\n  @computed public get length() {\\n    return this.__models.length;\\n  }\\n\\n  @computed public get list(): Array<T | null> {\\n    const list = this.__models.map((id) => this.__collection.find(this.modelType, id));\\n\\n    if (this.sortMethod) {\\n      const sortFn = typeof this.sortMethod === 'string'\\n        ? (item) => item[this.sortMethod as 'string']\\n        : this.sortMethod;\\n      list.sort((a: T | null, b: T | null) => {\\n        const valA = a ? sortFn(a) : Infinity;\\n        const valB = b ? sortFn(b) : Infinity;\\n\\n        return valA - valB;\\n      });\\n    }\\n\\n    const instances = observable.array(list, {deep: false});\\n\\n    intercept(instances, this.__partialListUpdate.bind(this));\\n\\n    return instances;\\n  }\\n\\n  public toJSON(): IRawView {\\n    return {\\n      modelType: this.modelType,\\n      models: this.__models.slice(),\\n      unique: this.unique,\\n    };\\n  }\\n\\n  @computed public get snapshot() {\\n    return this.toJSON();\\n  }\\n\\n  /**\\n   * Add an existing or a new model to the collection\\n   *\\n   * @template T\\n   * @param {T|IRawModel|IDictionary} data Model to be added\\n   * @returns {T} Added model\\n   * @memberof Collection\\n   */\\n  public add(data: T|IRawModel|IDictionary): T;\\n\\n  /**\\n   * Add an array of existing or new models to the collection\\n   *\\n   * @template T\\n   * @param {Array<T|IRawModel|IDictionary>} data Array of models to be added\\n   * @returns {Array<T>} Added models\\n   * @memberof Collection\\n   */\\n  public add(data: Array<T|IRawModel|IDictionary>): Array<T>;\\n\\n  @action public add(\\n    data: T|IRawModel|IDictionary|Array<T|IRawModel|IDictionary>,\\n  ): T|Array<T> {\\n    const models = mapItems(data, (item) => this.__collection.add<T>(item, this.modelType)) as T | Array<T>;\\n\\n    mapItems(models, (instance) => {\\n      const id = getModelId(instance);\\n      if (!this.unique || this.__models.indexOf(id) === -1) {\\n        this.__models.push(id);\\n      }\\n    });\\n\\n    return models;\\n  }\\n\\n  /**\\n   * Check if a model is in the collection\\n   *\\n   * @param {T|IIdentifier} model Model to check\\n   * @returns {boolean} The given model is in the collection\\n   * @memberof Collection\\n   */\\n  public hasItem(model: T|IIdentifier): boolean {\\n    const id = getModelId(model);\\n\\n    return this.__models.indexOf(id) !== -1;\\n  }\\n\\n  /**\\n   * Remove a model from the view\\n   *\\n   * @param {IIdentifier|T} model Model identifier\\n   * @memberof Collection\\n   */\\n  @action public remove(model: IIdentifier|T) {\\n    const id = getModelId(model);\\n    this.__models.remove(id);\\n  }\\n\\n  @action public removeAll() {\\n    this.__models.replace([]);\\n  }\\n\\n  private __partialListUpdate(change: TChange) {\\n    if (change.type === 'splice') {\\n      if (this.sortMethod && change.added.length > 0) {\\n        throw error(SORTED_NO_WRITE);\\n      }\\n      const added = change.added.map(getModelId);\\n\\n      const toRemove = this.__models.slice(change.index, change.removedCount);\\n      if (this.unique) {\\n        added.forEach((newItemId) => {\\n          if (this.__models.indexOf(newItemId) !== -1 && toRemove.indexOf(newItemId) === -1) {\\n            throw error(UNIQUE_MODEL);\\n          }\\n        });\\n      }\\n\\n      this.__models.splice(change.index, change.removedCount, ...added);\\n\\n      return null;\\n    }\\n\\n    if (this.sortMethod && change.newValue) {\\n      throw error(SORTED_NO_WRITE);\\n    }\\n\\n    const newId = getModelId(change.newValue);\\n    const idIndex = this.__models.indexOf(newId);\\n    if (this.unique && idIndex !== -1 && idIndex !== change.index) {\\n      throw error(UNIQUE_MODEL);\\n    }\\n\\n    this.__models[change.index] = newId;\\n\\n    return null;\\n  }\\n\\n  private __changeModelId(oldId: IIdentifier, newId: IIdentifier) {\\n    const oldIdIndex = this.__models.indexOf(oldId);\\n    if (oldIdIndex !== -1) {\\n      this.__models[oldIdIndex] = newId;\\n    }\\n  }\\n}\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/View.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { IIdentifier } from './interfaces/IIdentifier';\r\nimport { IModelConstructor } from './interfaces/IModelConstructor';\r\nimport { IRawView } from './interfaces/IRawView';\r\nimport { IType } from './interfaces/IType';\r\nimport { PureCollection } from './PureCollection';\r\nimport { PureModel } from './PureModel';\r\nexport declare class View<T extends PureModel = PureModel> {\r\n    protected __collection: PureCollection;\r\n    unique: boolean;\r\n    readonly modelType: IType;\r\n    sortMethod?: string | ((item: T) => any);\r\n    private __models;\r\n    constructor(modelType: IModelConstructor<T> | IType, __collection: PureCollection, sortMethod?: string | ((item: T) => any), models?: Array<IIdentifier | T>, unique?: boolean);\r\n    readonly length: number;\r\n    readonly list: Array<T | null>;\r\n    toJSON(): IRawView;\r\n    readonly snapshot: IRawView;\r\n    /**\r\n     * Add an existing or a new model to the collection\r\n     *\r\n     * @template T\r\n     * @param {T|IRawModel|IDictionary} data Model to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add(data: T | IRawModel | IDictionary): T;\r\n    /**\r\n     * Add an array of existing or new models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<T|IRawModel|IDictionary>} data Array of models to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add(data: Array<T | IRawModel | IDictionary>): Array<T>;\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {T|IIdentifier} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    hasItem(model: T | IIdentifier): boolean;\r\n    /**\r\n     * Remove a model from the view\r\n     *\r\n     * @param {IIdentifier|T} model Model identifier\r\n     * @memberof Collection\r\n     */\r\n    remove(model: IIdentifier | T): void;\r\n    removeAll(): void;\r\n    private __partialListUpdate(change);\r\n    private __changeModelId(oldId, newId);\r\n}\r\n"}}

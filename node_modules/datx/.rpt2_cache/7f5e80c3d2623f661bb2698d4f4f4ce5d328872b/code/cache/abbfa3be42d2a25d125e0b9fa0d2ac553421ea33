{"code":"import { PureCollection } from '../PureCollection';\r\nimport { PureModel } from '../PureModel';\r\nimport { View } from '../View';\r\n/**\r\n * Check if a class is of a certain type\r\n *\r\n * @export\r\n * @param {Function} obj Class to check\r\n * @param {Function} type Type to check\r\n * @returns {boolean} Class is of the given type\r\n */\r\nfunction isOfType(obj, type) {\r\n    var model = obj;\r\n    while (model) {\r\n        if (model === type) {\r\n            return true;\r\n        }\r\n        model = Object.getPrototypeOf(model);\r\n    }\r\n    return false;\r\n}\r\nexport function isModel(obj) {\r\n    return isOfType(obj, PureModel);\r\n}\r\nexport function isCollection(obj) {\r\n    return isOfType(obj, PureCollection);\r\n}\r\nexport function isView(obj) {\r\n    return isOfType(obj, View);\r\n}\r\n//# sourceMappingURL=mixin.js.map","map":"{\"version\":3,\"file\":\"mixin.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/mixin.ts\"],\"names\":[],\"mappings\":\"AAGA,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAC,SAAS,EAAC,MAAM,cAAc,CAAC;AACvC,OAAO,EAAC,IAAI,EAAC,MAAM,SAAS,CAAC;AAE7B;;;;;;;GAOG;AACH,kBAAqB,GAAQ,EAAE,IAAO;IACpC,IAAI,KAAK,GAAG,GAAG,CAAC;IAChB,OAAO,KAAK,EAAE;QACZ,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QACD,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;KACtC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAWD,MAAM,kBAAkB,GAAQ;IAC9B,OAAO,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAClC,CAAC;AAWD,MAAM,uBAAuB,GAAQ;IACnC,OAAO,QAAQ,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AACvC,CAAC;AAWD,MAAM,iBAAiB,GAAQ;IAC7B,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC7B,CAAC\",\"sourcesContent\":[\"import {ICollectionConstructor} from '../interfaces/ICollectionConstructor';\\nimport {IModelConstructor} from '../interfaces/IModelConstructor';\\nimport {IViewConstructor} from '../interfaces/IViewConstructor';\\nimport {PureCollection} from '../PureCollection';\\nimport {PureModel} from '../PureModel';\\nimport {View} from '../View';\\n\\n/**\\n * Check if a class is of a certain type\\n *\\n * @export\\n * @param {Function} obj Class to check\\n * @param {Function} type Type to check\\n * @returns {boolean} Class is of the given type\\n */\\nfunction isOfType<T>(obj: any, type: T): obj is T {\\n  let model = obj;\\n  while (model) {\\n    if (model === type) {\\n      return true;\\n    }\\n    model = Object.getPrototypeOf(model);\\n  }\\n\\n  return false;\\n}\\n\\n/**\\n * Check if a class is a model\\n *\\n * @export\\n * @param {any} obj Class to check\\n * @returns {boolean} Class is a model\\n */\\nexport function isModel(obj: typeof PureModel|IModelConstructor<any>): true;\\nexport function isModel(obj: any): false;\\nexport function isModel(obj: any) {\\n  return isOfType(obj, PureModel);\\n}\\n\\n/**\\n * Check if a class is a collection\\n *\\n * @export\\n * @param {any} obj Class to check\\n * @returns {boolean} Class is a collection\\n */\\nexport function isCollection(obj: typeof PureCollection|ICollectionConstructor<any>): true;\\nexport function isCollection(obj: any): false;\\nexport function isCollection(obj: any) {\\n  return isOfType(obj, PureCollection);\\n}\\n\\n/**\\n * Check if a class is a collection\\n *\\n * @export\\n * @param {any} obj Class to check\\n * @returns {boolean} Class is a collection\\n */\\nexport function isView(obj: typeof View|IViewConstructor<any, any>): true;\\nexport function isView(obj: any): false;\\nexport function isView(obj: any) {\\n  return isOfType(obj, View);\\n}\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/helpers/mixin.d.ts","text":"import { ICollectionConstructor } from '../interfaces/ICollectionConstructor';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { IViewConstructor } from '../interfaces/IViewConstructor';\r\nimport { PureCollection } from '../PureCollection';\r\nimport { PureModel } from '../PureModel';\r\nimport { View } from '../View';\r\n/**\r\n * Check if a class is a model\r\n *\r\n * @export\r\n * @param {any} obj Class to check\r\n * @returns {boolean} Class is a model\r\n */\r\nexport declare function isModel(obj: typeof PureModel | IModelConstructor<any>): true;\r\nexport declare function isModel(obj: any): false;\r\n/**\r\n * Check if a class is a collection\r\n *\r\n * @export\r\n * @param {any} obj Class to check\r\n * @returns {boolean} Class is a collection\r\n */\r\nexport declare function isCollection(obj: typeof PureCollection | ICollectionConstructor<any>): true;\r\nexport declare function isCollection(obj: any): false;\r\n/**\r\n * Check if a class is a collection\r\n *\r\n * @export\r\n * @param {any} obj Class to check\r\n * @returns {boolean} Class is a collection\r\n */\r\nexport declare function isView(obj: typeof View | IViewConstructor<any, any>): true;\r\nexport declare function isView(obj: any): false;\r\n"}}

{"code":"import * as tslib_1 from \"tslib\";\r\nimport { deprecated, mapItems } from 'datx-utils';\r\nimport { isObservableArray } from 'mobx';\r\nimport { FieldType } from './enums/FieldType';\r\nimport { ReferenceType } from './enums/ReferenceType';\r\nimport { updateField } from './helpers/model/fields';\r\nimport { initModelField, initModelRef } from './helpers/model/init';\r\nimport { getModelCollection, getModelId, getModelMetaKey, getModelType, modelToJSON, updateModel, } from './helpers/model/utils';\r\nimport { PureModel } from './PureModel';\r\nimport { storage } from './services/storage';\r\nvar CompatModel = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CompatModel, _super);\r\n    function CompatModel(initialData, collection) {\r\n        var _this = _super.call(this, initialData, collection) || this;\r\n        deprecated('CompatModel is just a migration tool. Please move to Model or PureModel as soon as possible.');\r\n        Object.keys(_this.static.refs).forEach(function (prop) {\r\n            var refs = getModelMetaKey(_this, 'refs');\r\n            if (prop in refs) {\r\n                return;\r\n            }\r\n            var ref = _this.static.refs[prop];\r\n            var data = mapItems(_this[prop] || _this.static.defaults[prop], getModelId);\r\n            delete _this[prop];\r\n            if (typeof ref === 'object') {\r\n                // Back reference\r\n                initModelRef(_this, prop, {\r\n                    model: ref.model,\r\n                    property: ref.property,\r\n                    type: ReferenceType.TO_ONE_OR_MANY,\r\n                }, data);\r\n            }\r\n            else {\r\n                // Normal reference\r\n                initModelRef(_this, prop, {\r\n                    model: ref,\r\n                    type: ReferenceType.TO_ONE_OR_MANY,\r\n                }, data);\r\n            }\r\n        });\r\n        Object.keys(_this.static.defaults).forEach(function (prop) {\r\n            if (!(prop in _this.static.refs) && !(prop in _this)) {\r\n                initModelField(_this, prop, _this.static.defaults[prop]);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    CompatModel.prototype.getRecordId = function () {\r\n        deprecated('model.getRecordId is deprecated. Use getModelId() instead.');\r\n        return getModelId(this);\r\n    };\r\n    CompatModel.prototype.getRecordType = function () {\r\n        deprecated('model.getRecordType is deprecated. Use getModelType() instead.');\r\n        return getModelType(this);\r\n    };\r\n    CompatModel.prototype.assign = function (key, value) {\r\n        deprecated('model.assign is deprecated. Use assignModel() instead.');\r\n        var type = FieldType.DATA;\r\n        var modelId = storage.getModelClassMetaKey(this.static, 'id');\r\n        var modelType = storage.getModelClassMetaKey(this.static, 'type');\r\n        if (key === modelId) {\r\n            type = FieldType.ID;\r\n        }\r\n        else if (key === modelType) {\r\n            type = FieldType.TYPE;\r\n        }\r\n        updateField(this, key, value, type);\r\n        return value;\r\n    };\r\n    CompatModel.prototype.assignRef = function (key, value, type) {\r\n        deprecated('model.assignRef is deprecated. Use initModelRef() instead.');\r\n        var refs = getModelMetaKey(this, 'refs');\r\n        if (refs[key]) {\r\n            return this[key] = value;\r\n        }\r\n        var model = type;\r\n        if (!model) {\r\n            if (value instanceof Array || isObservableArray(value)) {\r\n                model = value.reduce(function (t, m) { return t || getModelType(m); }, null);\r\n            }\r\n            else if (value instanceof PureModel) {\r\n                model = getModelType(value);\r\n            }\r\n        }\r\n        if (!model) {\r\n            throw new Error('The type property is missing');\r\n        }\r\n        initModelRef(this, key, {\r\n            model: model,\r\n            type: ReferenceType.TO_ONE_OR_MANY,\r\n        }, value);\r\n        return this[key];\r\n    };\r\n    CompatModel.prototype.update = function (data) {\r\n        var _this = this;\r\n        deprecated('model.update is deprecated. Use updateModel() instead.');\r\n        var updateData = Object.assign({}, data);\r\n        Object.keys(updateData).forEach(function (key) {\r\n            if (typeof _this[key] === 'function') {\r\n                delete updateData[key];\r\n            }\r\n        });\r\n        return updateModel(this, updateData);\r\n    };\r\n    Object.defineProperty(CompatModel.prototype, \"static\", {\r\n        get: function () {\r\n            deprecated('model.static is deprecated.');\r\n            return this.constructor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompatModel.prototype.toJS = function () {\r\n        deprecated('model.toJS() is deprecated. Use modelToJSON() instead.');\r\n        return modelToJSON(this);\r\n    };\r\n    Object.defineProperty(CompatModel.prototype, \"snapshot\", {\r\n        get: function () {\r\n            deprecated('model.snapshot is deprecated. Use modelToJSON() instead.');\r\n            return modelToJSON(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompatModel.prototype, \"__collection\", {\r\n        get: function () {\r\n            deprecated('model.__collection is deprecated. Use getModelCollection() instead.');\r\n            return getModelCollection(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompatModel.refs = {};\r\n    CompatModel.defaults = {};\r\n    return CompatModel;\r\n}(PureModel));\r\nexport { CompatModel };\r\n//# sourceMappingURL=CompatModel.js.map","map":"{\"version\":3,\"file\":\"CompatModel.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/CompatModel.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import {deprecated, IDictionary, IRawModel, mapItems} from 'datx-utils';\\nimport {isObservableArray, set} from 'mobx';\\n\\nimport {Collection} from './Collection';\\nimport {FieldType} from './enums/FieldType';\\nimport {ReferenceType} from './enums/ReferenceType';\\nimport {updateField} from './helpers/model/fields';\\nimport {initModelField, initModelRef} from './helpers/model/init';\\nimport {\\n  getModelCollection,\\n  getModelId,\\n  getModelMetaKey,\\n  getModelType,\\n  modelToJSON,\\n  updateModel,\\n} from './helpers/model/utils';\\nimport {IReferences} from './interfaces/IReferences';\\nimport {IType} from './interfaces/IType';\\nimport {PureModel} from './PureModel';\\nimport {storage} from './services/storage';\\n\\nexport class CompatModel extends PureModel {\\n  public static refs: IReferences = {};\\n  public static defaults: IDictionary = {};\\n\\n  constructor(initialData: object, collection?: Collection) {\\n    super(initialData, collection);\\n\\n    deprecated('CompatModel is just a migration tool. Please move to Model or PureModel as soon as possible.');\\n\\n    Object.keys(this.static.refs).forEach((prop) => {\\n      const refs = getModelMetaKey(this, 'refs');\\n      if (prop in refs) {\\n        return;\\n      }\\n      const ref = this.static.refs[prop];\\n      const data = mapItems(this[prop] || this.static.defaults[prop], getModelId);\\n      delete this[prop];\\n      if (typeof ref === 'object') {\\n        // Back reference\\n        initModelRef(this, prop, {\\n          model: ref.model,\\n          property: ref.property,\\n          type: ReferenceType.TO_ONE_OR_MANY,\\n        }, data);\\n      } else {\\n        // Normal reference\\n        initModelRef(this, prop, {\\n          model: ref,\\n          type: ReferenceType.TO_ONE_OR_MANY,\\n        }, data);\\n      }\\n    });\\n\\n    Object.keys(this.static.defaults).forEach((prop) => {\\n      if (!(prop in this.static.refs) && !(prop in this)) {\\n        initModelField(this, prop, this.static.defaults[prop]);\\n      }\\n    });\\n  }\\n\\n  public getRecordId() {\\n    deprecated('model.getRecordId is deprecated. Use getModelId() instead.');\\n\\n    return getModelId(this);\\n  }\\n\\n  public getRecordType() {\\n    deprecated('model.getRecordType is deprecated. Use getModelType() instead.');\\n\\n    return getModelType(this);\\n  }\\n\\n  public assign(key: string, value: any) {\\n    deprecated('model.assign is deprecated. Use assignModel() instead.');\\n    let type = FieldType.DATA;\\n    const modelId = storage.getModelClassMetaKey(this.static, 'id');\\n    const modelType = storage.getModelClassMetaKey(this.static, 'type');\\n    if (key === modelId) {\\n      type = FieldType.ID;\\n    } else if (key === modelType) {\\n      type = FieldType.TYPE;\\n    }\\n\\n    updateField(this, key, value, type);\\n\\n    return value;\\n  }\\n\\n  public assignRef(key: string, value: any, type?: IType) {\\n    deprecated('model.assignRef is deprecated. Use initModelRef() instead.');\\n    const refs = getModelMetaKey(this, 'refs');\\n\\n    if (refs[key]) {\\n      return this[key] = value;\\n    }\\n\\n    let model = type;\\n    if (!model) {\\n      if (value instanceof Array || isObservableArray(value)) {\\n        model = value.reduce((t, m) => t || getModelType(m), null);\\n      } else if (value instanceof PureModel) {\\n        model = getModelType(value);\\n      }\\n    }\\n\\n    if (!model) {\\n      throw new Error('The type property is missing');\\n    }\\n\\n    initModelRef(this, key, {\\n      model,\\n      type: ReferenceType.TO_ONE_OR_MANY,\\n    }, value);\\n\\n    return this[key];\\n  }\\n\\n  public update(data: PureModel | IDictionary): object {\\n    deprecated('model.update is deprecated. Use updateModel() instead.');\\n    const updateData = Object.assign({}, data);\\n    Object.keys(updateData).forEach((key) => {\\n      if (typeof this[key] === 'function') {\\n        delete updateData[key];\\n      }\\n    });\\n\\n    return updateModel(this, updateData);\\n  }\\n\\n  public get static() {\\n    deprecated('model.static is deprecated.');\\n\\n    return this.constructor as typeof CompatModel;\\n  }\\n\\n  public toJS() {\\n    deprecated('model.toJS() is deprecated. Use modelToJSON() instead.');\\n\\n    return modelToJSON(this);\\n  }\\n\\n  public get snapshot() {\\n    deprecated('model.snapshot is deprecated. Use modelToJSON() instead.');\\n\\n    return modelToJSON(this);\\n  }\\n\\n  private get __collection() {\\n    deprecated('model.__collection is deprecated. Use getModelCollection() instead.');\\n\\n    return getModelCollection(this);\\n  }\\n}\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/CompatModel.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { Collection } from './Collection';\r\nimport { IReferences } from './interfaces/IReferences';\r\nimport { IType } from './interfaces/IType';\r\nimport { PureModel } from './PureModel';\r\nexport declare class CompatModel extends PureModel {\r\n    static refs: IReferences;\r\n    static defaults: IDictionary;\r\n    constructor(initialData: object, collection?: Collection);\r\n    getRecordId(): IType;\r\n    getRecordType(): IType;\r\n    assign(key: string, value: any): any;\r\n    assignRef(key: string, value: any, type?: IType): any;\r\n    update(data: PureModel | IDictionary): object;\r\n    readonly static: typeof CompatModel;\r\n    toJS(): IRawModel;\r\n    readonly snapshot: IRawModel;\r\n    private readonly __collection;\r\n}\r\n"}}

{"code":"export { Collection } from './Collection';\r\nexport { Model } from './Model';\r\nexport { View } from './View';\r\nexport { PureCollection } from './PureCollection';\r\nexport { PureModel } from './PureModel';\r\nexport { CompatCollection } from './CompatCollection';\r\nexport { CompatModel } from './CompatModel';\r\nexport { getRefId, setRefId, updateModelId, } from './helpers/model/fields';\r\nexport { initModelRef, } from './helpers/model/init';\r\nexport { assignModel, cloneModel, getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, setModelMetaKey, updateModel, } from './helpers/model/utils';\r\nexport { isCollection, isModel, isView, } from './helpers/mixin';\r\nexport { ReferenceType } from './enums/ReferenceType';\r\nexport { setupModel } from './mixins/setupModel';\r\nexport { withActions } from './mixins/withActions';\r\nexport { withMeta } from './mixins/withMeta';\r\nimport prop from './prop';\r\nexport { prop };\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AACxC,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAC,IAAI,EAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAC,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,gBAAgB,EAAC,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAE1C,OAAO,EACL,QAAQ,EACR,QAAQ,EACR,aAAa,GACd,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EACL,YAAY,GACb,MAAM,sBAAsB,CAAC;AAE9B,OAAO,EACL,WAAW,EACX,UAAU,EACV,kBAAkB,EAClB,UAAU,EACV,eAAe,EACf,YAAY,EACZ,gBAAgB,EAChB,WAAW,EACX,eAAe,EACf,WAAW,GACZ,MAAM,uBAAuB,CAAC;AAE/B,OAAO,EACL,YAAY,EACZ,OAAO,EACP,MAAM,GACP,MAAM,iBAAiB,CAAC;AAYzB,OAAO,EAAC,aAAa,EAAC,MAAM,uBAAuB,CAAC;AAEpD,OAAO,EAAC,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAC,WAAW,EAAC,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE3C,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,OAAO,EAAC,IAAI,EAAC,CAAC\",\"sourcesContent\":[\"export {Collection} from './Collection';\\nexport {Model} from './Model';\\nexport {View} from './View';\\nexport {PureCollection} from './PureCollection';\\nexport {PureModel} from './PureModel';\\nexport {CompatCollection} from './CompatCollection';\\nexport {CompatModel} from './CompatModel';\\n\\nexport {\\n  getRefId,\\n  setRefId,\\n  updateModelId,\\n} from './helpers/model/fields';\\n\\nexport {\\n  initModelRef,\\n} from './helpers/model/init';\\n\\nexport {\\n  assignModel,\\n  cloneModel,\\n  getModelCollection,\\n  getModelId,\\n  getModelMetaKey,\\n  getModelType,\\n  getOriginalModel,\\n  modelToJSON,\\n  setModelMetaKey,\\n  updateModel,\\n} from './helpers/model/utils';\\n\\nexport {\\n  isCollection,\\n  isModel,\\n  isView,\\n} from './helpers/mixin';\\n\\nexport {IRawModel} from 'datx-utils';\\n\\nexport {ICollectionConstructor} from './interfaces/ICollectionConstructor';\\nexport {IIdentifier} from './interfaces/IIdentifier';\\nexport {IModelConstructor} from './interfaces/IModelConstructor';\\nexport {IType} from './interfaces/IType';\\nexport {IViewConstructor} from './interfaces/IViewConstructor';\\nexport {IActionsMixin} from './interfaces/IActionsMixin';\\nexport {IMetaMixin} from './interfaces/IMetaMixin';\\n\\nexport {ReferenceType} from './enums/ReferenceType';\\n\\nexport {setupModel} from './mixins/setupModel';\\nexport {withActions} from './mixins/withActions';\\nexport {withMeta} from './mixins/withMeta';\\n\\nimport prop from './prop';\\n\\nexport {prop};\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/index.d.ts","text":"export { Collection } from './Collection';\r\nexport { Model } from './Model';\r\nexport { View } from './View';\r\nexport { PureCollection } from './PureCollection';\r\nexport { PureModel } from './PureModel';\r\nexport { CompatCollection } from './CompatCollection';\r\nexport { CompatModel } from './CompatModel';\r\nexport { getRefId, setRefId, updateModelId } from './helpers/model/fields';\r\nexport { initModelRef } from './helpers/model/init';\r\nexport { assignModel, cloneModel, getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, setModelMetaKey, updateModel } from './helpers/model/utils';\r\nexport { isCollection, isModel, isView } from './helpers/mixin';\r\nexport { IRawModel } from 'datx-utils';\r\nexport { ICollectionConstructor } from './interfaces/ICollectionConstructor';\r\nexport { IIdentifier } from './interfaces/IIdentifier';\r\nexport { IModelConstructor } from './interfaces/IModelConstructor';\r\nexport { IType } from './interfaces/IType';\r\nexport { IViewConstructor } from './interfaces/IViewConstructor';\r\nexport { IActionsMixin } from './interfaces/IActionsMixin';\r\nexport { IMetaMixin } from './interfaces/IMetaMixin';\r\nexport { ReferenceType } from './enums/ReferenceType';\r\nexport { setupModel } from './mixins/setupModel';\r\nexport { withActions } from './mixins/withActions';\r\nexport { withMeta } from './mixins/withMeta';\r\nimport prop from './prop';\r\nexport { prop };\r\n"}}

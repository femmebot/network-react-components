{"code":"import * as tslib_1 from \"tslib\";\r\nimport { action, computed, extendObservable, observable, set } from 'mobx';\r\nimport { MODEL_SINGLE_COLLECTION, UNDEFINED_TYPE, VIEW_NAME_TAKEN } from './errors';\r\nimport { initModels, isSelectorFunction, upsertModel } from './helpers/collection';\r\nimport { error } from './helpers/format';\r\nimport { getModelCollection, getModelId, getModelType, modelToJSON, setModelMetaKey, updateModel, } from './helpers/model/utils';\r\nimport { PureModel } from './PureModel';\r\nimport { View } from './View';\r\nvar PureCollection = /** @class */ (function () {\r\n    function PureCollection(data) {\r\n        if (data === void 0) { data = []; }\r\n        var _this = this;\r\n        this.__data = observable.array([], { deep: false });\r\n        this.__views = [];\r\n        this.__viewList = [];\r\n        this.__dataMap = {};\r\n        this.__dataList = {};\r\n        extendObservable(this, {});\r\n        if (data instanceof Array) {\r\n            this.insert(data);\r\n        }\r\n        else if (data && 'models' in data) {\r\n            this.insert(data.models);\r\n        }\r\n        var staticCollection = this.constructor;\r\n        var initViews = (data && 'views' in data) ? data.views : {};\r\n        Object.keys(staticCollection.views).forEach(function (key) {\r\n            var view = staticCollection.views[key];\r\n            var init = initViews[key] || view;\r\n            _this.addView(key, init.modelType, {\r\n                mixins: view.mixins,\r\n                models: init.models || [],\r\n                sortMethod: view.sortMethod,\r\n                unique: init.unique,\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Function for inserting raw models into the collection. Used when hydrating the collection\r\n     *\r\n     * @param {Array<IRawModel>} data Raw model data\r\n     * @returns {Array<PureModel>} A list of initialized models\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.insert = function (data) {\r\n        var models = initModels(this, data);\r\n        this.__insertModel(models);\r\n        return models;\r\n    };\r\n    PureCollection.prototype.add = function (data, model) {\r\n        return (data instanceof Array) ? this.__addArray(data, model) : this.__addSingle(data, model);\r\n    };\r\n    PureCollection.prototype.find = function (model, id) {\r\n        if (id instanceof PureModel) {\r\n            return id;\r\n        }\r\n        return isSelectorFunction(model)\r\n            ? (this.__data.find(model) || null)\r\n            : (this.__findByType(model, id) || null);\r\n    };\r\n    /**\r\n     * Filter models based on a matching function\r\n     *\r\n     * @param {TFilterFn} test Function used to match the models\r\n     * @returns {(PureModel|null)} The matching models\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.filter = function (test) {\r\n        return this.__data.filter(test);\r\n    };\r\n    /**\r\n     * Find all matching models or all models if no type is given\r\n     *\r\n     * @param {(IType|typeof PureModel)} [model] Model type to select\r\n     * @returns {Array<PureModel>} List of matching models\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.findAll = function (model) {\r\n        if (model) {\r\n            var type = getModelType(model);\r\n            if (!(type in this.__dataList)) {\r\n                set(this.__dataList, (_a = {}, _a[type] = observable.array([]), _a));\r\n            }\r\n            return this.__dataList[type];\r\n        }\r\n        return this.__data;\r\n        var _a;\r\n    };\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {PureModel} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.hasItem = function (model) {\r\n        var id = getModelId(model);\r\n        return Boolean(this.find(model, id));\r\n    };\r\n    PureCollection.prototype.remove = function (obj, id) {\r\n        var model = typeof obj === 'object' ? obj : this.find(obj, id);\r\n        if (model) {\r\n            this.__removeModel(model);\r\n        }\r\n    };\r\n    /**\r\n     * Remove all models of the given model type from the collection\r\n     *\r\n     * @param {(IType|typeof PureModel)} type Model type\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.removeAll = function (type) {\r\n        this.__removeModel(this.findAll(type).slice());\r\n    };\r\n    Object.defineProperty(PureCollection.prototype, \"length\", {\r\n        /**\r\n         * A total count of models in the collection\r\n         *\r\n         * @readonly\r\n         * @type {number}\r\n         * @memberof Collection\r\n         */\r\n        get: function () {\r\n            return this.__data.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the serializable value of the collection\r\n     *\r\n     * @returns {IRawCollection} Pure JS value of the collection\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.toJSON = function () {\r\n        var _this = this;\r\n        var views = {};\r\n        this.__views.forEach(function (key) {\r\n            views[key] = _this[key].toJSON();\r\n        });\r\n        return {\r\n            models: this.__data.map(modelToJSON),\r\n            views: views,\r\n        };\r\n    };\r\n    Object.defineProperty(PureCollection.prototype, \"snapshot\", {\r\n        get: function () {\r\n            return this.toJSON();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Reset the collection (remove all models)\r\n     *\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.prototype.reset = function () {\r\n        this.__data.forEach(function (model) {\r\n            setModelMetaKey(model, 'collection', undefined);\r\n        });\r\n        this.__data.replace([]);\r\n        this.__dataList = observable({}, {}, { deep: false });\r\n        this.__dataMap = observable({}, {}, { deep: false });\r\n    };\r\n    PureCollection.prototype.getAllModels = function () {\r\n        return this.__data.slice();\r\n    };\r\n    /**\r\n     * Add a view to the collection\r\n     *\r\n     * @template T Model type of the view\r\n     * @param {string} name View name\r\n     * @param {(IModelConstructor<T>|IType)} type Model type the view will represent\r\n     * @param {({\r\n     *       sortMethod?: string|((item: T) => any),\r\n     *       models?: Array<IIdentifier|PureModel>,\r\n     *       unique?: boolean,\r\n     *       mixins?: Array<(view: any) => any>,\r\n     *     })} [{sortMethod, models, unique, mixins}={}] View options\r\n     * @returns {View} The created view\r\n     * @memberof PureCollection\r\n     */\r\n    PureCollection.prototype.addView = function (name, type, _a) {\r\n        var _b = _a === void 0 ? {} : _a, sortMethod = _b.sortMethod, _c = _b.models, models = _c === void 0 ? [] : _c, unique = _b.unique, mixins = _b.mixins;\r\n        if (name in this) {\r\n            throw error(VIEW_NAME_TAKEN);\r\n        }\r\n        var ViewConstructor = mixins\r\n            ? mixins.reduce(function (view, mixin) {\r\n                return mixin(view);\r\n            }, View)\r\n            : View;\r\n        this.__views.push(name);\r\n        this[name] = new ViewConstructor(type, this, sortMethod, models, unique);\r\n        return this[name];\r\n    };\r\n    PureCollection.prototype.__addArray = function (data, model) {\r\n        var _this = this;\r\n        return data.filter(Boolean).map(function (item) { return _this.__addSingle(item, model); });\r\n    };\r\n    PureCollection.prototype.__addSingle = function (data, model) {\r\n        if (!data || typeof data === 'number' || typeof data === 'string') {\r\n            return data;\r\n        }\r\n        if (data instanceof PureModel) {\r\n            if (!this.hasItem(data)) {\r\n                this.__insertModel(data);\r\n            }\r\n            return data;\r\n        }\r\n        if (!model && model !== 0) {\r\n            throw error(UNDEFINED_TYPE);\r\n        }\r\n        var type = getModelType(model);\r\n        var modelInstance = upsertModel(data, type, this);\r\n        this.__insertModel(modelInstance, type);\r\n        return modelInstance;\r\n    };\r\n    PureCollection.prototype.__insertModel = function (model, type, id) {\r\n        var _this = this;\r\n        if (model instanceof Array) {\r\n            model.forEach(function (item) {\r\n                _this.__insertModel(item, type, id);\r\n            });\r\n            return;\r\n        }\r\n        var collection = getModelCollection(model);\r\n        if (collection && collection !== this) {\r\n            throw error(MODEL_SINGLE_COLLECTION);\r\n        }\r\n        var modelType = type || getModelType(model);\r\n        var modelId = id || getModelId(model);\r\n        var stringType = modelType.toString();\r\n        var existingModel = this.find(modelType, modelId);\r\n        if (existingModel) {\r\n            updateModel(existingModel, model);\r\n            return;\r\n        }\r\n        this.__data.push(model);\r\n        if (modelType in this.__dataList) {\r\n            this.__dataList[modelType].push(model);\r\n        }\r\n        else {\r\n            set(this.__dataList, stringType, observable.array([model], { deep: false }));\r\n        }\r\n        if (modelType in this.__dataMap) {\r\n            set(this.__dataMap[modelType], modelId.toString(), model);\r\n        }\r\n        else {\r\n            set(this.__dataMap, stringType, observable.object((_a = {}, _a[modelId] = model, _a), {}, { deep: false }));\r\n        }\r\n        setModelMetaKey(model, 'collection', this);\r\n        var _a;\r\n    };\r\n    PureCollection.prototype.__removeModel = function (model, type, id) {\r\n        var _this = this;\r\n        if (model instanceof Array) {\r\n            model.forEach(function (item) {\r\n                _this.__removeModel(item, type, id);\r\n            });\r\n            return;\r\n        }\r\n        var modelType = type || getModelType(model);\r\n        var modelId = id || getModelId(model);\r\n        this.__data.remove(model);\r\n        this.__dataList[modelType].remove(model);\r\n        set(this.__dataMap[modelType], modelId.toString(), undefined);\r\n        setModelMetaKey(model, 'collection', undefined);\r\n    };\r\n    PureCollection.prototype.__findByType = function (model, id) {\r\n        var type = getModelType(model);\r\n        var stringType = type.toString();\r\n        if (id) {\r\n            if (!(type in this.__dataMap)) {\r\n                set(this.__dataMap, stringType, observable.object((_a = {}, _a[id] = undefined, _a), {}, { deep: false }));\r\n            }\r\n            else if (!(id in this.__dataMap[type])) {\r\n                set(this.__dataMap[type], id.toString(), undefined);\r\n            }\r\n            return this.__dataMap[type][id];\r\n        }\r\n        else {\r\n            if (!(type in this.__dataList)) {\r\n                set(this.__dataList, stringType, observable.array([], { deep: false }));\r\n            }\r\n            return this.__dataList[type].length ? this.__dataList[type][0] : null;\r\n        }\r\n        var _a;\r\n    };\r\n    PureCollection.prototype.__changeModelId = function (oldId, newId, type) {\r\n        this.__dataMap[type][newId] = this.__dataMap[type][oldId];\r\n        delete this.__dataMap[type][oldId];\r\n        this.__viewList\r\n            .filter(function (view) { return view.modelType === type; })\r\n            .forEach(function (view) {\r\n            // @ts-ignore - I'm bad and I should feel bad...\r\n            view.__changeModelId(oldId, newId);\r\n        });\r\n    };\r\n    /**\r\n     * List of models available in the collection\r\n     *\r\n     * @static\r\n     * @type {Array<typeof PureModel>}\r\n     * @memberof Collection\r\n     */\r\n    PureCollection.types = [];\r\n    PureCollection.views = {};\r\n    tslib_1.__decorate([\r\n        observable.shallow\r\n    ], PureCollection.prototype, \"__dataMap\", void 0);\r\n    tslib_1.__decorate([\r\n        observable.shallow\r\n    ], PureCollection.prototype, \"__dataList\", void 0);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"insert\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"add\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"remove\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"removeAll\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], PureCollection.prototype, \"length\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], PureCollection.prototype, \"reset\", null);\r\n    return PureCollection;\r\n}());\r\nexport { PureCollection };\r\n//# sourceMappingURL=PureCollection.js.map","map":"{\"version\":3,\"file\":\"PureCollection.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/PureCollection.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import {IDictionary, IRawModel} from 'datx-utils';\\nimport {action, computed, decorate, extendObservable, IObservableArray, IObservableObject, observable, set} from 'mobx';\\n\\nimport {MODEL_SINGLE_COLLECTION, UNDEFINED_MODEL, UNDEFINED_TYPE, VIEW_NAME_TAKEN} from './errors';\\nimport {initModels, isSelectorFunction, upsertModel} from './helpers/collection';\\nimport {error} from './helpers/format';\\nimport {\\n  getModelCollection,\\n  getModelId,\\n  getModelType,\\n  modelToJSON,\\n  setModelMetaKey,\\n  updateModel,\\n} from './helpers/model/utils';\\nimport {IIdentifier} from './interfaces/IIdentifier';\\nimport {IModelConstructor} from './interfaces/IModelConstructor';\\nimport {IRawCollection} from './interfaces/IRawCollection';\\nimport {IRawView} from './interfaces/IRawView';\\nimport {IType} from './interfaces/IType';\\nimport {TFilterFn} from './interfaces/TFilterFn';\\nimport {PureModel} from './PureModel';\\nimport {View} from './View';\\n\\nexport class PureCollection {\\n  /**\\n   * List of models available in the collection\\n   *\\n   * @static\\n   * @type {Array<typeof PureModel>}\\n   * @memberof Collection\\n   */\\n  public static types: Array<typeof PureModel | IModelConstructor> = [];\\n\\n  public static views: IDictionary<{\\n    modelType: IType | PureModel;\\n    sortMethod?: string | ((PureModel) => any);\\n    unique?: boolean;\\n    mixins?: Array<(view: any) => any>;\\n  }> = {};\\n\\n  public static defaultModel?: typeof PureModel;\\n\\n  private __data: IObservableArray<PureModel> = observable.array([], {deep: false});\\n\\n  private __views: Array<string> = [];\\n  private __viewList: Array<View> = [];\\n\\n  @observable.shallow private __dataMap: IDictionary<IDictionary<PureModel>> = {};\\n  @observable.shallow private __dataList: IDictionary<IObservableArray<PureModel>> = {};\\n\\n  constructor(data: Array<IRawModel> | IRawCollection = []) {\\n    extendObservable(this, {});\\n    if (data instanceof Array) {\\n      this.insert(data);\\n    } else if (data && 'models' in data) {\\n      this.insert(data.models);\\n    }\\n\\n    const staticCollection = this.constructor as typeof PureCollection;\\n    const initViews = (data && 'views' in data) ? data.views : {};\\n    Object.keys(staticCollection.views).forEach((key) => {\\n      const view = staticCollection.views[key];\\n      const init = initViews[key] || view;\\n      this.addView(key, init.modelType, {\\n        mixins: view.mixins,\\n        models: init.models || [],\\n        sortMethod: view.sortMethod,\\n        unique: init.unique,\\n      });\\n    });\\n  }\\n\\n  /**\\n   * Function for inserting raw models into the collection. Used when hydrating the collection\\n   *\\n   * @param {Array<IRawModel>} data Raw model data\\n   * @returns {Array<PureModel>} A list of initialized models\\n   * @memberof Collection\\n   */\\n  @action public insert(data: Array<Partial<IRawModel>>): Array<PureModel> {\\n    const models = initModels(this, data);\\n    this.__insertModel(models);\\n\\n    return models;\\n  }\\n\\n  /**\\n   * Add an existing model to the collection\\n   *\\n   * @template T\\n   * @param {T} data Model to be added\\n   * @returns {T} Added model\\n   * @memberof Collection\\n   */\\n  public add<T extends PureModel>(data: T): T;\\n\\n  /**\\n   * Add an array of existing models to the collection\\n   *\\n   * @template T\\n   * @param {Array<T>} data Array of models to be added\\n   * @returns {Array<T>} Added models\\n   * @memberof Collection\\n   */\\n  public add<T extends PureModel>(data: Array<T>): Array<T>;\\n\\n  /**\\n   * Add an array of new models to the collection\\n   *\\n   * @template T\\n   * @param {Array<IRawModel|IDictionary>} data Array of new data to be added\\n   * @param {(IType|IModelConstructor<T>)} model Model type to be added\\n   * @returns {Array<T>} Added models\\n   * @memberof Collection\\n   */\\n  public add<T extends PureModel>(data: Array<IRawModel|IDictionary>, model: IType|IModelConstructor<T>): Array<T>;\\n\\n  /**\\n   * Add a new model to the collection\\n   *\\n   * @template T\\n   * @param {(IRawModel|IDictionary)} data New data to be added\\n   * @param {(IType|IModelConstructor<T>)} model Model type to be added\\n   * @returns {T} Added model\\n   * @memberof Collection\\n   */\\n  public add<T extends PureModel>(data: IRawModel|IDictionary, model: IType|IModelConstructor<T>): T;\\n\\n  @action public add(\\n    data: PureModel|IRawModel|IDictionary|Array<PureModel>|Array<IRawModel|IDictionary>,\\n    model?: IType|IModelConstructor,\\n  ): PureModel|Array<PureModel> {\\n    return (data instanceof Array) ? this.__addArray(data, model) : this.__addSingle(data, model);\\n  }\\n\\n  /**\\n   * Find a model based on the defined type and (optional) identifier\\n   *\\n   * @param {(IType|typeof PureModel|PureModel)} type Model type\\n   * @param {IIdentifier} [id] Model identifier\\n   * @returns {(PureModel|null)} The first matching model\\n   * @memberof Collection\\n   */\\n  public find<T extends PureModel>(type: IType|T|IModelConstructor<T>, id?: IIdentifier|PureModel): T|null;\\n\\n  /**\\n   * Find a model based on a matching function\\n   *\\n   * @param {TFilterFn} test Function used to match the model\\n   * @returns {(PureModel|null)} The first matching model\\n   * @memberof Collection\\n   */\\n  public find<T extends PureModel>(test: TFilterFn): T|null;\\n\\n  public find(model: IType|typeof PureModel|(TFilterFn), id?: IIdentifier|PureModel) {\\n    if (id instanceof PureModel) {\\n      return id;\\n    }\\n\\n    return isSelectorFunction(model)\\n      ? (this.__data.find(model as TFilterFn) || null)\\n      : (this.__findByType(model as typeof PureModel, id) || null);\\n  }\\n\\n  /**\\n   * Filter models based on a matching function\\n   *\\n   * @param {TFilterFn} test Function used to match the models\\n   * @returns {(PureModel|null)} The matching models\\n   * @memberof Collection\\n   */\\n  public filter(test: TFilterFn): Array<PureModel> {\\n    return this.__data.filter(test);\\n  }\\n\\n  /**\\n   * Find all matching models or all models if no type is given\\n   *\\n   * @param {(IType|typeof PureModel)} [model] Model type to select\\n   * @returns {Array<PureModel>} List of matching models\\n   * @memberof Collection\\n   */\\n  public findAll<T extends PureModel>(model?: IType|IModelConstructor<T>): IObservableArray<T> {\\n    if (model) {\\n      const type = getModelType(model);\\n      if (!(type in this.__dataList)) {\\n        set(this.__dataList, {[type]: observable.array([])});\\n      }\\n\\n      return this.__dataList[type] as IObservableArray<T>;\\n    }\\n\\n    return this.__data as IObservableArray<T>;\\n  }\\n\\n  /**\\n   * Check if a model is in the collection\\n   *\\n   * @param {PureModel} model Model to check\\n   * @returns {boolean} The given model is in the collection\\n   * @memberof Collection\\n   */\\n  public hasItem(model: PureModel): boolean {\\n    const id = getModelId(model);\\n\\n    return Boolean(this.find(model, id));\\n  }\\n\\n  /**\\n   * Remove the first model based on the type and (optional) identifier\\n   *\\n   * @param {(IType|typeof PureModel)} type Model type\\n   * @param {IIdentifier} [id] Model identifier\\n   * @memberof Collection\\n   */\\n  public remove(type: IType|typeof PureModel, id?: IIdentifier);\\n\\n  /**\\n   * Remove the given model from the collection\\n   *\\n   * @param {PureModel} model Model to be removed from the collection\\n   * @memberof Collection\\n   */\\n  public remove(model: PureModel);\\n\\n  @action public remove(obj: IType|typeof PureModel|PureModel, id?: IIdentifier) {\\n    const model = typeof obj === 'object' ? obj : this.find(obj, id);\\n    if (model) {\\n      this.__removeModel(model);\\n    }\\n  }\\n\\n  /**\\n   * Remove all models of the given model type from the collection\\n   *\\n   * @param {(IType|typeof PureModel)} type Model type\\n   * @memberof Collection\\n   */\\n  @action public removeAll(type: IType|typeof PureModel) {\\n    this.__removeModel(this.findAll(type).slice());\\n  }\\n\\n  /**\\n   * A total count of models in the collection\\n   *\\n   * @readonly\\n   * @type {number}\\n   * @memberof Collection\\n   */\\n  @computed public get length(): number {\\n    return this.__data.length;\\n  }\\n\\n  /**\\n   * Get the serializable value of the collection\\n   *\\n   * @returns {IRawCollection} Pure JS value of the collection\\n   * @memberof Collection\\n   */\\n  public toJSON(): IRawCollection {\\n    const views: IDictionary<IRawView> = {};\\n\\n    this.__views.forEach((key) => {\\n      views[key] = this[key].toJSON();\\n    });\\n\\n    return {\\n      models: this.__data.map(modelToJSON),\\n      views,\\n    };\\n  }\\n\\n  public get snapshot() {\\n    return this.toJSON();\\n  }\\n\\n  /**\\n   * Reset the collection (remove all models)\\n   *\\n   * @memberof Collection\\n   */\\n  @action public reset() {\\n    this.__data.forEach((model) => {\\n      setModelMetaKey(model, 'collection', undefined);\\n    });\\n    this.__data.replace([]);\\n    this.__dataList = observable({}, {}, {deep: false}) as IObservableObject & IDictionary<IObservableArray<PureModel>>;\\n    this.__dataMap = observable({}, {}, {deep: false}) as IObservableObject &IDictionary<IDictionary<PureModel>>;\\n  }\\n\\n  public getAllModels() {\\n    return this.__data.slice();\\n  }\\n\\n  /**\\n   * Add a view to the collection\\n   *\\n   * @template T Model type of the view\\n   * @param {string} name View name\\n   * @param {(IModelConstructor<T>|IType)} type Model type the view will represent\\n   * @param {({\\n   *       sortMethod?: string|((item: T) => any),\\n   *       models?: Array<IIdentifier|PureModel>,\\n   *       unique?: boolean,\\n   *       mixins?: Array<(view: any) => any>,\\n   *     })} [{sortMethod, models, unique, mixins}={}] View options\\n   * @returns {View} The created view\\n   * @memberof PureCollection\\n   */\\n  public addView<T extends PureModel = PureModel>(\\n    name: string,\\n    type: IModelConstructor<T>|IType,\\n    {sortMethod, models = [], unique, mixins}: {\\n      sortMethod?: string|((item: T) => any);\\n      models?: Array<IIdentifier|T>;\\n      unique?: boolean;\\n      mixins?: Array<(view: any) => any>;\\n    } = {},\\n  ) {\\n    if (name in this) {\\n      throw error(VIEW_NAME_TAKEN);\\n    }\\n\\n    const ViewConstructor = mixins\\n      ? mixins.reduce((view: any, mixin: (view: any) => any) => {\\n          return mixin(view);\\n        }, View) as typeof View\\n      : View;\\n\\n    this.__views.push(name);\\n    this[name] = new ViewConstructor<T>(type, this, sortMethod, models, unique);\\n\\n    return this[name];\\n  }\\n\\n  private __addArray<T extends PureModel>(data: Array<T>): Array<T>;\\n  private __addArray<T extends PureModel>(data: Array<IDictionary>, model?: IType|IModelConstructor<T>): Array<T>;\\n  private __addArray(data: Array<PureModel|IDictionary>, model?: IType|IModelConstructor): Array<PureModel> {\\n    return data.filter(Boolean).map((item) => this.__addSingle(item, model));\\n  }\\n\\n  private __addSingle<T extends PureModel>(data: T): T;\\n  private __addSingle<T extends PureModel>(data: IDictionary, model?: IType|IModelConstructor<T>): T;\\n  private __addSingle(data: PureModel|IDictionary|IIdentifier, model?: IType|IModelConstructor) {\\n    if (!data || typeof data === 'number' || typeof data === 'string') {\\n      return data;\\n    }\\n\\n    if (data instanceof PureModel) {\\n      if (!this.hasItem(data)) {\\n        this.__insertModel(data);\\n      }\\n\\n      return data;\\n    }\\n\\n    if (!model && model !== 0) {\\n      throw error(UNDEFINED_TYPE);\\n    }\\n\\n    const type = getModelType(model as IType|typeof PureModel);\\n    const modelInstance = upsertModel(data, type, this);\\n    this.__insertModel(modelInstance, type);\\n\\n    return modelInstance;\\n  }\\n\\n  private __insertModel(model: PureModel|Array<PureModel>, type?: IType, id?: IIdentifier) {\\n    if (model instanceof Array) {\\n      model.forEach((item) => {\\n        this.__insertModel(item, type, id);\\n      });\\n\\n      return;\\n    }\\n\\n    const collection = getModelCollection(model);\\n    if (collection && collection !== this) {\\n      throw error(MODEL_SINGLE_COLLECTION);\\n    }\\n\\n    const modelType = type || getModelType(model);\\n    const modelId = id || getModelId(model);\\n    const stringType = modelType.toString();\\n\\n    const existingModel = this.find(modelType, modelId);\\n    if (existingModel) {\\n      updateModel(existingModel, model);\\n\\n      return;\\n    }\\n\\n    this.__data.push(model);\\n    if (modelType in this.__dataList) {\\n      this.__dataList[modelType].push(model);\\n    } else {\\n      set(this.__dataList, stringType, observable.array([model], {deep: false}));\\n    }\\n\\n    if (modelType in this.__dataMap) {\\n      set(this.__dataMap[modelType], modelId.toString(), model);\\n    } else {\\n      set(this.__dataMap, stringType, observable.object({[modelId]: model}, {}, {deep: false}));\\n    }\\n    setModelMetaKey(model, 'collection', this);\\n  }\\n\\n  private __removeModel(model: PureModel|Array<PureModel>, type?: IType, id?: IIdentifier) {\\n    if (model instanceof Array) {\\n      model.forEach((item) => {\\n        this.__removeModel(item, type, id);\\n      });\\n\\n      return;\\n    }\\n\\n    const modelType = type || getModelType(model);\\n    const modelId = id || getModelId(model);\\n    this.__data.remove(model);\\n    this.__dataList[modelType].remove(model);\\n    set(this.__dataMap[modelType], modelId.toString(), undefined);\\n    setModelMetaKey(model, 'collection', undefined);\\n  }\\n\\n  private __findByType(model: IType|typeof PureModel|PureModel, id?: IIdentifier) {\\n    const type = getModelType(model);\\n    const stringType = type.toString();\\n\\n    if (id) {\\n      if (!(type in this.__dataMap)) {\\n        set(this.__dataMap, stringType, observable.object({[id]: undefined}, {}, {deep: false}));\\n      } else if (!(id in this.__dataMap[type])) {\\n        set(this.__dataMap[type], id.toString(), undefined);\\n      }\\n\\n      return this.__dataMap[type][id];\\n    } else {\\n      if (!(type in this.__dataList)) {\\n        set(this.__dataList, stringType, observable.array([], {deep: false}));\\n      }\\n\\n      return this.__dataList[type].length ? this.__dataList[type][0] : null;\\n    }\\n  }\\n\\n  private __changeModelId(oldId: IIdentifier, newId: IIdentifier, type: IType) {\\n    this.__dataMap[type][newId] = this.__dataMap[type][oldId];\\n    delete this.__dataMap[type][oldId];\\n\\n    this.__viewList\\n      .filter((view) => view.modelType === type)\\n      .forEach((view) => {\\n        // @ts-ignore - I'm bad and I should feel bad...\\n        view.__changeModelId(oldId, newId);\\n      });\\n  }\\n}\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/PureCollection.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { IObservableArray } from 'mobx';\r\nimport { IIdentifier } from './interfaces/IIdentifier';\r\nimport { IModelConstructor } from './interfaces/IModelConstructor';\r\nimport { IRawCollection } from './interfaces/IRawCollection';\r\nimport { IType } from './interfaces/IType';\r\nimport { TFilterFn } from './interfaces/TFilterFn';\r\nimport { PureModel } from './PureModel';\r\nexport declare class PureCollection {\r\n    /**\r\n     * List of models available in the collection\r\n     *\r\n     * @static\r\n     * @type {Array<typeof PureModel>}\r\n     * @memberof Collection\r\n     */\r\n    static types: Array<typeof PureModel | IModelConstructor>;\r\n    static views: IDictionary<{\r\n        modelType: IType | PureModel;\r\n        sortMethod?: string | ((PureModel) => any);\r\n        unique?: boolean;\r\n        mixins?: Array<(view: any) => any>;\r\n    }>;\r\n    static defaultModel?: typeof PureModel;\r\n    private __data;\r\n    private __views;\r\n    private __viewList;\r\n    private __dataMap;\r\n    private __dataList;\r\n    constructor(data?: Array<IRawModel> | IRawCollection);\r\n    /**\r\n     * Function for inserting raw models into the collection. Used when hydrating the collection\r\n     *\r\n     * @param {Array<IRawModel>} data Raw model data\r\n     * @returns {Array<PureModel>} A list of initialized models\r\n     * @memberof Collection\r\n     */\r\n    insert(data: Array<Partial<IRawModel>>): Array<PureModel>;\r\n    /**\r\n     * Add an existing model to the collection\r\n     *\r\n     * @template T\r\n     * @param {T} data Model to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: T): T;\r\n    /**\r\n     * Add an array of existing models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<T>} data Array of models to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: Array<T>): Array<T>;\r\n    /**\r\n     * Add an array of new models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<IRawModel|IDictionary>} data Array of new data to be added\r\n     * @param {(IType|IModelConstructor<T>)} model Model type to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: Array<IRawModel | IDictionary>, model: IType | IModelConstructor<T>): Array<T>;\r\n    /**\r\n     * Add a new model to the collection\r\n     *\r\n     * @template T\r\n     * @param {(IRawModel|IDictionary)} data New data to be added\r\n     * @param {(IType|IModelConstructor<T>)} model Model type to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add<T extends PureModel>(data: IRawModel | IDictionary, model: IType | IModelConstructor<T>): T;\r\n    /**\r\n     * Find a model based on the defined type and (optional) identifier\r\n     *\r\n     * @param {(IType|typeof PureModel|PureModel)} type Model type\r\n     * @param {IIdentifier} [id] Model identifier\r\n     * @returns {(PureModel|null)} The first matching model\r\n     * @memberof Collection\r\n     */\r\n    find<T extends PureModel>(type: IType | T | IModelConstructor<T>, id?: IIdentifier | PureModel): T | null;\r\n    /**\r\n     * Find a model based on a matching function\r\n     *\r\n     * @param {TFilterFn} test Function used to match the model\r\n     * @returns {(PureModel|null)} The first matching model\r\n     * @memberof Collection\r\n     */\r\n    find<T extends PureModel>(test: TFilterFn): T | null;\r\n    /**\r\n     * Filter models based on a matching function\r\n     *\r\n     * @param {TFilterFn} test Function used to match the models\r\n     * @returns {(PureModel|null)} The matching models\r\n     * @memberof Collection\r\n     */\r\n    filter(test: TFilterFn): Array<PureModel>;\r\n    /**\r\n     * Find all matching models or all models if no type is given\r\n     *\r\n     * @param {(IType|typeof PureModel)} [model] Model type to select\r\n     * @returns {Array<PureModel>} List of matching models\r\n     * @memberof Collection\r\n     */\r\n    findAll<T extends PureModel>(model?: IType | IModelConstructor<T>): IObservableArray<T>;\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {PureModel} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    hasItem(model: PureModel): boolean;\r\n    /**\r\n     * Remove the first model based on the type and (optional) identifier\r\n     *\r\n     * @param {(IType|typeof PureModel)} type Model type\r\n     * @param {IIdentifier} [id] Model identifier\r\n     * @memberof Collection\r\n     */\r\n    remove(type: IType | typeof PureModel, id?: IIdentifier): any;\r\n    /**\r\n     * Remove the given model from the collection\r\n     *\r\n     * @param {PureModel} model Model to be removed from the collection\r\n     * @memberof Collection\r\n     */\r\n    remove(model: PureModel): any;\r\n    /**\r\n     * Remove all models of the given model type from the collection\r\n     *\r\n     * @param {(IType|typeof PureModel)} type Model type\r\n     * @memberof Collection\r\n     */\r\n    removeAll(type: IType | typeof PureModel): void;\r\n    /**\r\n     * A total count of models in the collection\r\n     *\r\n     * @readonly\r\n     * @type {number}\r\n     * @memberof Collection\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * Get the serializable value of the collection\r\n     *\r\n     * @returns {IRawCollection} Pure JS value of the collection\r\n     * @memberof Collection\r\n     */\r\n    toJSON(): IRawCollection;\r\n    readonly snapshot: IRawCollection;\r\n    /**\r\n     * Reset the collection (remove all models)\r\n     *\r\n     * @memberof Collection\r\n     */\r\n    reset(): void;\r\n    getAllModels(): PureModel[];\r\n    /**\r\n     * Add a view to the collection\r\n     *\r\n     * @template T Model type of the view\r\n     * @param {string} name View name\r\n     * @param {(IModelConstructor<T>|IType)} type Model type the view will represent\r\n     * @param {({\r\n     *       sortMethod?: string|((item: T) => any),\r\n     *       models?: Array<IIdentifier|PureModel>,\r\n     *       unique?: boolean,\r\n     *       mixins?: Array<(view: any) => any>,\r\n     *     })} [{sortMethod, models, unique, mixins}={}] View options\r\n     * @returns {View} The created view\r\n     * @memberof PureCollection\r\n     */\r\n    addView<T extends PureModel = PureModel>(name: string, type: IModelConstructor<T> | IType, {sortMethod, models, unique, mixins}?: {\r\n        sortMethod?: string | ((item: T) => any);\r\n        models?: Array<IIdentifier | T>;\r\n        unique?: boolean;\r\n        mixins?: Array<(view: any) => any>;\r\n    }): any;\r\n    private __addArray<T>(data);\r\n    private __addArray<T>(data, model?);\r\n    private __addSingle<T>(data);\r\n    private __addSingle<T>(data, model?);\r\n    private __insertModel(model, type?, id?);\r\n    private __removeModel(model, type?, id?);\r\n    private __findByType(model, id?);\r\n    private __changeModelId(oldId, newId, type);\r\n}\r\n"}}

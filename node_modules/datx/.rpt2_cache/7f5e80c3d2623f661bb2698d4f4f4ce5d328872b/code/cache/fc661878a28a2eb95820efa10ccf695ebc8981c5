{"code":"import * as tslib_1 from \"tslib\";\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport { initModelRef } from '../helpers/model/init';\r\nimport { assignModel, cloneModel, modelToJSON, updateModel } from '../helpers/model/utils';\r\n/**\r\n * Extends the model with some handy actions\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport function withActions(Base) {\r\n    var BaseClass = Base;\r\n    if (!isModel(Base)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var WithActions = /** @class */ (function (_super) {\r\n        tslib_1.__extends(WithActions, _super);\r\n        function WithActions() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        WithActions.prototype.update = function (data) {\r\n            updateModel(this, data);\r\n        };\r\n        WithActions.prototype.clone = function () {\r\n            // @ts-ignore\r\n            return cloneModel(this);\r\n        };\r\n        WithActions.prototype.assign = function (key, value) {\r\n            assignModel(this, key, value);\r\n        };\r\n        WithActions.prototype.addReference = function (key, value, options) {\r\n            initModelRef(this, key, options, value);\r\n        };\r\n        WithActions.prototype.toJSON = function () {\r\n            return modelToJSON(this);\r\n        };\r\n        return WithActions;\r\n    }(BaseClass));\r\n    return WithActions;\r\n}\r\n//# sourceMappingURL=withActions.js.map","map":"{\"version\":3,\"file\":\"withActions.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/mixins/withActions.ts\"],\"names\":[],\"mappings\":\";AAEA,OAAO,EAAC,cAAc,EAAC,MAAM,WAAW,CAAC;AACzC,OAAO,EAAC,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACxC,OAAO,EAAC,OAAO,EAAC,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAC,YAAY,EAAC,MAAM,uBAAuB,CAAC;AACnD,OAAO,EAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAC,MAAM,wBAAwB,CAAC;AAOzF;;;;;;;GAOG;AACH,MAAM,sBAA2C,IAA0B;IACzE,IAAM,SAAS,GAAG,IAAwB,CAAC;IAE3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAClB,MAAM,KAAK,CAAC,cAAc,CAAC,CAAC;KAC7B;IAED;QAA0B,uCAAS;QAAnC;;QAyBA,CAAC;QAxBQ,4BAAM,GAAb,UAAc,IAAiB;YAC7B,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1B,CAAC;QAEM,2BAAK,GAAZ;YACE,aAAa;YACb,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAEM,4BAAM,GAAb,UAAc,GAAW,EAAE,KAAU;YACnC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC;QAEM,kCAAY,GAAnB,UACE,GAAW,EACX,KAAmB,EACnB,OAA6B;YAE7B,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC;QAEM,4BAAM,GAAb;YACE,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QACH,kBAAC;IAAD,CAAC,AAzBD,CAA0B,SAAS,GAyBlC;IAED,OAAO,WAAsD,CAAC;AAChE,CAAC\",\"sourcesContent\":[\"import {IDictionary} from 'datx-utils';\\n\\nimport {DECORATE_MODEL} from '../errors';\\nimport {error} from '../helpers/format';\\nimport {isModel} from '../helpers/mixin';\\nimport {initModelRef} from '../helpers/model/init';\\nimport {assignModel, cloneModel, modelToJSON, updateModel} from '../helpers/model/utils';\\nimport {IActionsMixin} from '../interfaces/IActionsMixin';\\nimport {IModelConstructor} from '../interfaces/IModelConstructor';\\nimport {IReferenceOptions} from '../interfaces/IReferenceOptions';\\nimport {TRefValue} from '../interfaces/TRefValue';\\nimport {PureModel} from '../PureModel';\\n\\n/**\\n * Extends the model with some handy actions\\n *\\n * @export\\n * @template T\\n * @param {IModelConstructor<T>} Base Model to extend\\n * @returns Extended model\\n */\\nexport function withActions<T extends PureModel>(Base: IModelConstructor<T>) {\\n  const BaseClass = Base as typeof PureModel;\\n\\n  if (!isModel(Base)) {\\n    throw error(DECORATE_MODEL);\\n  }\\n\\n  class WithActions extends BaseClass implements IActionsMixin<T> {\\n    public update(data: IDictionary) {\\n      updateModel(this, data);\\n    }\\n\\n    public clone(): IActionsMixin<T> & T {\\n      // @ts-ignore\\n      return cloneModel(this);\\n    }\\n\\n    public assign(key: string, value: any) {\\n      assignModel(this, key, value);\\n    }\\n\\n    public addReference<V extends PureModel, U extends typeof PureModel>(\\n      key: string,\\n      value: TRefValue<V>,\\n      options: IReferenceOptions<U>,\\n    ) {\\n      initModelRef(this, key, options, value);\\n    }\\n\\n    public toJSON() {\\n      return modelToJSON(this);\\n    }\\n  }\\n\\n  return WithActions as IModelConstructor<IActionsMixin<T> & T>;\\n}\\n\"]}","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/withActions.d.ts","text":"import { IActionsMixin } from '../interfaces/IActionsMixin';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { PureModel } from '../PureModel';\r\n/**\r\n * Extends the model with some handy actions\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport declare function withActions<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<IActionsMixin<T> & T>;\r\n"}}

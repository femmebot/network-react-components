{"code":"import * as tslib_1 from \"tslib\";\r\nimport { ReferenceType } from '../enums/ReferenceType';\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport prop from '../prop';\r\nexport function setupModel(Base, _a) {\r\n    var _b = _a === void 0 ? { fields: {} } : _a, fields = _b.fields, references = _b.references, type = _b.type, idAttribute = _b.idAttribute, typeAttribute = _b.typeAttribute;\r\n    var BaseClass = Base;\r\n    if (!isModel(BaseClass)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var ModelWithProps = /** @class */ (function (_super) {\r\n        tslib_1.__extends(ModelWithProps, _super);\r\n        function ModelWithProps() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        return ModelWithProps;\r\n    }(BaseClass));\r\n    if (type) {\r\n        ModelWithProps.type = type;\r\n    }\r\n    if (idAttribute) {\r\n        prop.identifier(ModelWithProps.prototype, idAttribute);\r\n    }\r\n    if (typeAttribute) {\r\n        prop.type(ModelWithProps.prototype, typeAttribute);\r\n    }\r\n    if (fields) {\r\n        Object.keys(fields).forEach(function (key) {\r\n            prop.defaultValue(fields[key])(ModelWithProps.prototype, key);\r\n        });\r\n    }\r\n    if (references) {\r\n        Object.keys(references).forEach(function (key) {\r\n            var _a = references[key], model = _a.model, property = _a.property;\r\n            switch (references[key].type) {\r\n                case ReferenceType.TO_ONE:\r\n                    return prop.toOne(model)(ModelWithProps.prototype, key);\r\n                case ReferenceType.TO_MANY:\r\n                    return prop.toMany(model, property)(ModelWithProps.prototype, key);\r\n                default:\r\n                    return prop.toOneOrMany(model)(ModelWithProps.prototype, key);\r\n            }\r\n        });\r\n    }\r\n    return ModelWithProps;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9taXhpbnMvc2V0dXBNb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUl6QyxPQUFPLElBQUksTUFBTSxTQUFTLENBQUM7QUFHM0IsTUFBTSxxQkFDSixJQUErQixFQUMvQixFQVkyQjtRQVozQix3Q0FZMkIsRUFYekIsa0JBQU0sRUFDTiwwQkFBVSxFQUNWLGNBQUksRUFDSiw0QkFBVyxFQUNYLGdDQUFhO0lBU2YsSUFBTSxTQUFTLEdBQUcsSUFBd0IsQ0FBQztJQUUzQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEO1FBQTZCLDBDQUFTO1FBQXRDOztRQUF3QyxDQUFDO1FBQUQscUJBQUM7SUFBRCxDQUFDLEFBQXpDLENBQTZCLFNBQVMsR0FBRztJQUV6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsY0FBYyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztZQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztZQUM1QixJQUFBLG9CQUFtQyxFQUFsQyxnQkFBSyxFQUFFLHNCQUFRLENBQW9CO1lBQzFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixLQUFLLGFBQWEsQ0FBQyxNQUFNO29CQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMxRCxLQUFLLGFBQWEsQ0FBQyxPQUFPO29CQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDckU7b0JBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsRSxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQXFELENBQUM7QUFDL0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SURpY3Rpb25hcnl9IGZyb20gJ2RhdHgtdXRpbHMnO1xuXG5pbXBvcnQge1JlZmVyZW5jZVR5cGV9IGZyb20gJy4uL2VudW1zL1JlZmVyZW5jZVR5cGUnO1xuaW1wb3J0IHtERUNPUkFURV9NT0RFTH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7ZXJyb3J9IGZyb20gJy4uL2hlbHBlcnMvZm9ybWF0JztcbmltcG9ydCB7aXNNb2RlbH0gZnJvbSAnLi4vaGVscGVycy9taXhpbic7XG5pbXBvcnQge0lNb2RlbENvbnN0cnVjdG9yfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lNb2RlbENvbnN0cnVjdG9yJztcbmltcG9ydCB7SVJlZmVyZW5jZU9wdGlvbnN9IGZyb20gJy4uL2ludGVyZmFjZXMvSVJlZmVyZW5jZU9wdGlvbnMnO1xuaW1wb3J0IHtJVHlwZX0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JVHlwZSc7XG5pbXBvcnQgcHJvcCBmcm9tICcuLi9wcm9wJztcbmltcG9ydCB7UHVyZU1vZGVsfSBmcm9tICcuLi9QdXJlTW9kZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBNb2RlbDxJTW9kZWwgZXh0ZW5kcyBQdXJlTW9kZWwsIElGaWVsZHMgZXh0ZW5kcyBJRGljdGlvbmFyeTxhbnk+PihcbiAgQmFzZTogSU1vZGVsQ29uc3RydWN0b3I8SU1vZGVsPixcbiAge1xuICAgIGZpZWxkcyxcbiAgICByZWZlcmVuY2VzLFxuICAgIHR5cGUsXG4gICAgaWRBdHRyaWJ1dGUsXG4gICAgdHlwZUF0dHJpYnV0ZSxcbiAgfToge1xuICAgIGZpZWxkczogSUZpZWxkcztcbiAgICByZWZlcmVuY2VzPzogSURpY3Rpb25hcnk8SVJlZmVyZW5jZU9wdGlvbnM+O1xuICAgIHR5cGU/OiBJVHlwZTtcbiAgICBpZEF0dHJpYnV0ZT86IHN0cmluZztcbiAgICB0eXBlQXR0cmlidXRlPzogc3RyaW5nO1xuICB9ID0ge2ZpZWxkczoge30gYXMgSUZpZWxkc30sXG4pIHtcbiAgY29uc3QgQmFzZUNsYXNzID0gQmFzZSBhcyB0eXBlb2YgUHVyZU1vZGVsO1xuXG4gIGlmICghaXNNb2RlbChCYXNlQ2xhc3MpKSB7XG4gICAgdGhyb3cgZXJyb3IoREVDT1JBVEVfTU9ERUwpO1xuICB9XG5cbiAgY2xhc3MgTW9kZWxXaXRoUHJvcHMgZXh0ZW5kcyBCYXNlQ2xhc3Mge31cblxuICBpZiAodHlwZSkge1xuICAgIE1vZGVsV2l0aFByb3BzLnR5cGUgPSB0eXBlO1xuICB9XG5cbiAgaWYgKGlkQXR0cmlidXRlKSB7XG4gICAgcHJvcC5pZGVudGlmaWVyKE1vZGVsV2l0aFByb3BzLnByb3RvdHlwZSwgaWRBdHRyaWJ1dGUpO1xuICB9XG5cbiAgaWYgKHR5cGVBdHRyaWJ1dGUpIHtcbiAgICBwcm9wLnR5cGUoTW9kZWxXaXRoUHJvcHMucHJvdG90eXBlLCB0eXBlQXR0cmlidXRlKTtcbiAgfVxuXG4gIGlmIChmaWVsZHMpIHtcbiAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcHJvcC5kZWZhdWx0VmFsdWUoZmllbGRzW2tleV0pKE1vZGVsV2l0aFByb3BzLnByb3RvdHlwZSwga2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZWZlcmVuY2VzKSB7XG4gICAgT2JqZWN0LmtleXMocmVmZXJlbmNlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCB7bW9kZWwsIHByb3BlcnR5fSA9IHJlZmVyZW5jZXNba2V5XTtcbiAgICAgIHN3aXRjaCAocmVmZXJlbmNlc1trZXldLnR5cGUpIHtcbiAgICAgICAgY2FzZSBSZWZlcmVuY2VUeXBlLlRPX09ORTpcbiAgICAgICAgICByZXR1cm4gcHJvcC50b09uZShtb2RlbCkoTW9kZWxXaXRoUHJvcHMucHJvdG90eXBlLCBrZXkpO1xuICAgICAgICBjYXNlIFJlZmVyZW5jZVR5cGUuVE9fTUFOWTpcbiAgICAgICAgICByZXR1cm4gcHJvcC50b01hbnkobW9kZWwsIHByb3BlcnR5KShNb2RlbFdpdGhQcm9wcy5wcm90b3R5cGUsIGtleSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHByb3AudG9PbmVPck1hbnkobW9kZWwpKE1vZGVsV2l0aFByb3BzLnByb3RvdHlwZSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBNb2RlbFdpdGhQcm9wcyBhcyBJTW9kZWxDb25zdHJ1Y3RvcjxJTW9kZWwgJiBJRmllbGRzPjtcbn1cbiJdfQ==","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/setupModel.d.ts","text":"import { IDictionary } from 'datx-utils';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { IReferenceOptions } from '../interfaces/IReferenceOptions';\r\nimport { IType } from '../interfaces/IType';\r\nimport { PureModel } from '../PureModel';\r\nexport declare function setupModel<IModel extends PureModel, IFields extends IDictionary<any>>(Base: IModelConstructor<IModel>, {fields, references, type, idAttribute, typeAttribute}?: {\r\n    fields: IFields;\r\n    references?: IDictionary<IReferenceOptions>;\r\n    type?: IType;\r\n    idAttribute?: string;\r\n    typeAttribute?: string;\r\n}): IModelConstructor<IModel & IFields>;\r\n"}}

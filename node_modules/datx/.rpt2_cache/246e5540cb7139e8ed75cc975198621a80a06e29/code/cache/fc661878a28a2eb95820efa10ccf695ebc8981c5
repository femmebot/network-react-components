{"code":"import * as tslib_1 from \"tslib\";\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport { initModelRef } from '../helpers/model/init';\r\nimport { assignModel, cloneModel, modelToJSON, updateModel } from '../helpers/model/utils';\r\n/**\r\n * Extends the model with some handy actions\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport function withActions(Base) {\r\n    var BaseClass = Base;\r\n    if (!isModel(Base)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var WithActions = /** @class */ (function (_super) {\r\n        tslib_1.__extends(WithActions, _super);\r\n        function WithActions() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        WithActions.prototype.update = function (data) {\r\n            updateModel(this, data);\r\n        };\r\n        WithActions.prototype.clone = function () {\r\n            // @ts-ignore\r\n            return cloneModel(this);\r\n        };\r\n        WithActions.prototype.assign = function (key, value) {\r\n            assignModel(this, key, value);\r\n        };\r\n        WithActions.prototype.addReference = function (key, value, options) {\r\n            initModelRef(this, key, options, value);\r\n        };\r\n        WithActions.prototype.toJSON = function () {\r\n            return modelToJSON(this);\r\n        };\r\n        return WithActions;\r\n    }(BaseClass));\r\n    return WithActions;\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/withActions.d.ts","text":"import { IActionsMixin } from '../interfaces/IActionsMixin';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { PureModel } from '../PureModel';\r\n/**\r\n * Extends the model with some handy actions\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport declare function withActions<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<IActionsMixin<T> & T>;\r\n"}}

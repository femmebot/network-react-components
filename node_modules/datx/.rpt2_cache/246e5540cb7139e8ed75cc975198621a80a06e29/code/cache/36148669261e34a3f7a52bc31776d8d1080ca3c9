{"code":"import * as tslib_1 from \"tslib\";\r\nimport { computed } from 'mobx';\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport { getRefId } from '../helpers/model/fields';\r\nimport { getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, } from '../helpers/model/utils';\r\n/**\r\n * Extends the model with the exposed meta data\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport function withMeta(Base) {\r\n    var BaseClass = Base;\r\n    if (!isModel(BaseClass)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var WithMeta = /** @class */ (function (_super) {\r\n        tslib_1.__extends(WithMeta, _super);\r\n        function WithMeta() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        Object.defineProperty(WithMeta.prototype, \"meta\", {\r\n            get: function () {\r\n                var _this = this;\r\n                var refDefs = getModelMetaKey(this, 'refs');\r\n                var refs = {};\r\n                Object.keys(refDefs).forEach(function (key) {\r\n                    refs[key] = getRefId(_this, key);\r\n                });\r\n                return Object.freeze({\r\n                    collection: getModelCollection(this),\r\n                    id: getModelId(this),\r\n                    original: getModelMetaKey(this, 'originalId') && getOriginalModel(this) || undefined,\r\n                    refs: refs,\r\n                    snapshot: modelToJSON(this),\r\n                    type: getModelType(this),\r\n                });\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        tslib_1.__decorate([\r\n            computed\r\n        ], WithMeta.prototype, \"meta\", null);\r\n        return WithMeta;\r\n    }(BaseClass));\r\n    return WithMeta;\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/withMeta.d.ts","text":"import { IMetaMixin } from '../interfaces/IMetaMixin';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { PureModel } from '../PureModel';\r\n/**\r\n * Extends the model with the exposed meta data\r\n *\r\n * @export\r\n * @template T\r\n * @param {IModelConstructor<T>} Base Model to extend\r\n * @returns Extended model\r\n */\r\nexport declare function withMeta<T extends PureModel>(Base: IModelConstructor<T>): IModelConstructor<IMetaMixin<T> & T>;\r\n"}}

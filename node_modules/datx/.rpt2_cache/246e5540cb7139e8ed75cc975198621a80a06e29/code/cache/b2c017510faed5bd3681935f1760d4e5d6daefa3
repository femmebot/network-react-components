{"code":"import * as tslib_1 from \"tslib\";\r\nimport { deprecated, mapItems } from 'datx-utils';\r\nimport { isObservableArray } from 'mobx';\r\nimport { FieldType } from './enums/FieldType';\r\nimport { ReferenceType } from './enums/ReferenceType';\r\nimport { updateField } from './helpers/model/fields';\r\nimport { initModelField, initModelRef } from './helpers/model/init';\r\nimport { getModelCollection, getModelId, getModelMetaKey, getModelType, modelToJSON, updateModel, } from './helpers/model/utils';\r\nimport { PureModel } from './PureModel';\r\nimport { storage } from './services/storage';\r\nvar CompatModel = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CompatModel, _super);\r\n    function CompatModel(initialData, collection) {\r\n        var _this = _super.call(this, initialData, collection) || this;\r\n        deprecated('CompatModel is just a migration tool. Please move to Model or PureModel as soon as possible.');\r\n        Object.keys(_this.static.refs).forEach(function (prop) {\r\n            var refs = getModelMetaKey(_this, 'refs');\r\n            if (prop in refs) {\r\n                return;\r\n            }\r\n            var ref = _this.static.refs[prop];\r\n            var data = mapItems(_this[prop] || _this.static.defaults[prop], getModelId);\r\n            delete _this[prop];\r\n            if (typeof ref === 'object') {\r\n                // Back reference\r\n                initModelRef(_this, prop, {\r\n                    model: ref.model,\r\n                    property: ref.property,\r\n                    type: ReferenceType.TO_ONE_OR_MANY,\r\n                }, data);\r\n            }\r\n            else {\r\n                // Normal reference\r\n                initModelRef(_this, prop, {\r\n                    model: ref,\r\n                    type: ReferenceType.TO_ONE_OR_MANY,\r\n                }, data);\r\n            }\r\n        });\r\n        Object.keys(_this.static.defaults).forEach(function (prop) {\r\n            if (!(prop in _this.static.refs) && !(prop in _this)) {\r\n                initModelField(_this, prop, _this.static.defaults[prop]);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    CompatModel.prototype.getRecordId = function () {\r\n        deprecated('model.getRecordId is deprecated. Use getModelId() instead.');\r\n        return getModelId(this);\r\n    };\r\n    CompatModel.prototype.getRecordType = function () {\r\n        deprecated('model.getRecordType is deprecated. Use getModelType() instead.');\r\n        return getModelType(this);\r\n    };\r\n    CompatModel.prototype.assign = function (key, value) {\r\n        deprecated('model.assign is deprecated. Use assignModel() instead.');\r\n        var type = FieldType.DATA;\r\n        var modelId = storage.getModelClassMetaKey(this.static, 'id');\r\n        var modelType = storage.getModelClassMetaKey(this.static, 'type');\r\n        if (key === modelId) {\r\n            type = FieldType.ID;\r\n        }\r\n        else if (key === modelType) {\r\n            type = FieldType.TYPE;\r\n        }\r\n        updateField(this, key, value, type);\r\n        return value;\r\n    };\r\n    CompatModel.prototype.assignRef = function (key, value, type) {\r\n        deprecated('model.assignRef is deprecated. Use initModelRef() instead.');\r\n        var refs = getModelMetaKey(this, 'refs');\r\n        if (refs[key]) {\r\n            return this[key] = value;\r\n        }\r\n        var model = type;\r\n        if (!model) {\r\n            if (value instanceof Array || isObservableArray(value)) {\r\n                model = value.reduce(function (t, m) { return t || getModelType(m); }, null);\r\n            }\r\n            else if (value instanceof PureModel) {\r\n                model = getModelType(value);\r\n            }\r\n        }\r\n        if (!model) {\r\n            throw new Error('The type property is missing');\r\n        }\r\n        initModelRef(this, key, {\r\n            model: model,\r\n            type: ReferenceType.TO_ONE_OR_MANY,\r\n        }, value);\r\n        return this[key];\r\n    };\r\n    CompatModel.prototype.update = function (data) {\r\n        var _this = this;\r\n        deprecated('model.update is deprecated. Use updateModel() instead.');\r\n        var updateData = Object.assign({}, data);\r\n        Object.keys(updateData).forEach(function (key) {\r\n            if (typeof _this[key] === 'function') {\r\n                delete updateData[key];\r\n            }\r\n        });\r\n        return updateModel(this, updateData);\r\n    };\r\n    Object.defineProperty(CompatModel.prototype, \"static\", {\r\n        get: function () {\r\n            deprecated('model.static is deprecated.');\r\n            return this.constructor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompatModel.prototype.toJS = function () {\r\n        deprecated('model.toJS() is deprecated. Use modelToJSON() instead.');\r\n        return modelToJSON(this);\r\n    };\r\n    Object.defineProperty(CompatModel.prototype, \"snapshot\", {\r\n        get: function () {\r\n            deprecated('model.snapshot is deprecated. Use modelToJSON() instead.');\r\n            return modelToJSON(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompatModel.prototype, \"__collection\", {\r\n        get: function () {\r\n            deprecated('model.__collection is deprecated. Use getModelCollection() instead.');\r\n            return getModelCollection(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompatModel.refs = {};\r\n    CompatModel.defaults = {};\r\n    return CompatModel;\r\n}(PureModel));\r\nexport { CompatModel };\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/CompatModel.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { Collection } from './Collection';\r\nimport { IReferences } from './interfaces/IReferences';\r\nimport { IType } from './interfaces/IType';\r\nimport { PureModel } from './PureModel';\r\nexport declare class CompatModel extends PureModel {\r\n    static refs: IReferences;\r\n    static defaults: IDictionary;\r\n    constructor(initialData: object, collection?: Collection);\r\n    getRecordId(): IType;\r\n    getRecordType(): IType;\r\n    assign(key: string, value: any): any;\r\n    assignRef(key: string, value: any, type?: IType): any;\r\n    update(data: PureModel | IDictionary): object;\r\n    readonly static: typeof CompatModel;\r\n    toJS(): IRawModel;\r\n    readonly snapshot: IRawModel;\r\n    private readonly __collection;\r\n}\r\n"}}

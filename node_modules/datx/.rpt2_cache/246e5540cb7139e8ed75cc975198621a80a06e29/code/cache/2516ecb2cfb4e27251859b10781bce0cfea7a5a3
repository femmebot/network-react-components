{"code":"import { UNDEFINED_MODEL, UNDEFINED_TYPE } from '../errors';\r\nimport { PureModel } from '../PureModel';\r\nimport { error } from './format';\r\nimport { getMetaKeyFromRaw, updateModel } from './model/utils';\r\nfunction initCollectionModel(collection, data) {\r\n    var type = getMetaKeyFromRaw(data, 'type');\r\n    return upsertModel(data, type, collection);\r\n}\r\nexport function upsertModel(data, type, collection) {\r\n    if (!type && type !== 0) {\r\n        throw error(UNDEFINED_TYPE);\r\n    }\r\n    var staticCollection = collection.constructor;\r\n    var TypeModel = staticCollection.types.find(function (item) { return item.type === type; }) || staticCollection.defaultModel;\r\n    if (!TypeModel) {\r\n        throw error(UNDEFINED_MODEL, { type: type });\r\n    }\r\n    var id = getMetaKeyFromRaw(data, 'id', TypeModel);\r\n    var existingModel = id && collection.find(type, id);\r\n    if (existingModel) {\r\n        return updateModel(existingModel, data);\r\n    }\r\n    return new TypeModel(data, collection);\r\n}\r\nexport function isSelectorFunction(fn) {\r\n    return (typeof fn === 'function') && (fn !== PureModel && !(fn.prototype instanceof PureModel));\r\n}\r\nexport function initModels(collection, data) {\r\n    return data.map(function (item) { return initCollectionModel(collection, item); });\r\n}\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/helpers/collection.d.ts","text":"import { IRawModel } from 'datx-utils';\r\nimport { IType } from '../interfaces/IType';\r\nimport { PureCollection } from '../PureCollection';\r\nimport { PureModel } from '../PureModel';\r\nexport declare function upsertModel(data: IRawModel, type: IType | typeof PureModel, collection: PureCollection): PureModel;\r\nexport declare function isSelectorFunction(fn: any): boolean;\r\nexport declare function initModels(collection: PureCollection, data: Array<IRawModel>): PureModel[];\r\n"}}

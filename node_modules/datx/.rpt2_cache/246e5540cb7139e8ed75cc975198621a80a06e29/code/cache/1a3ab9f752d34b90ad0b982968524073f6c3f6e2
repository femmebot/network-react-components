{"code":"import * as tslib_1 from \"tslib\";\r\nimport { assignComputed, deprecated } from 'datx-utils';\r\nimport { Collection } from './Collection';\r\nimport { CompatModel } from './CompatModel';\r\nimport { getModelType } from './helpers/model/utils';\r\nvar CompatCollection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CompatCollection, _super);\r\n    function CompatCollection(data) {\r\n        var _this = _super.call(this, data) || this;\r\n        deprecated('CompatCollection is just a migration tool. Please move to Collection as soon as possible.');\r\n        var getters = {};\r\n        _this.static.types.forEach(function (model) {\r\n            var type = getModelType(model);\r\n            assignComputed(_this, type.toString(), function () { return _this.findAll(type); });\r\n        });\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CompatCollection.prototype, \"static\", {\r\n        get: function () {\r\n            deprecated('collection.static is deprecated.');\r\n            return this.constructor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompatCollection.prototype.toJS = function () {\r\n        deprecated('collection.toJS() is deprecated. Use collection.toJSON() instead');\r\n        return this.toJSON();\r\n    };\r\n    CompatCollection.types = [CompatModel];\r\n    return CompatCollection;\r\n}(Collection));\r\nexport { CompatCollection };\r\n","dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/CompatCollection.d.ts","text":"import { Collection } from './Collection';\r\nimport { CompatModel } from './CompatModel';\r\nimport { IRawCollection } from './interfaces/IRawCollection';\r\nexport declare class CompatCollection extends Collection {\r\n    static types: (typeof CompatModel)[];\r\n    constructor(data?: any);\r\n    readonly static: typeof CompatCollection;\r\n    toJS(): IRawCollection;\r\n}\r\n"}}

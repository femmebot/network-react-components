{"code":"export { Collection } from './Collection';\r\nexport { Model } from './Model';\r\nexport { PureCollection } from './PureCollection';\r\nexport { PureModel } from './PureModel';\r\nexport { CompatCollection } from './CompatCollection';\r\nexport { CompatModel } from './CompatModel';\r\nexport { getRefId, setRefId, updateModelId, } from './helpers/model/fields';\r\nexport { initModelRef, } from './helpers/model/init';\r\nexport { assignModel, cloneModel, getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, setModelMetaKey, updateModel, } from './helpers/model/utils';\r\nexport { isCollection, isModel, } from './helpers/mixin';\r\nexport { ReferenceType } from './enums/ReferenceType';\r\nexport { setupModel } from './mixins/setupModel';\r\nexport { withActions } from './mixins/withActions';\r\nexport { withMeta } from './mixins/withMeta';\r\nimport prop from './prop';\r\nexport { prop };\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN4QyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUNMLFFBQVEsRUFDUixRQUFRLEVBQ1IsYUFBYSxHQUNkLE1BQU0sd0JBQXdCLENBQUM7QUFFaEMsT0FBTyxFQUNMLFlBQVksR0FDYixNQUFNLHNCQUFzQixDQUFDO0FBRTlCLE9BQU8sRUFDTCxXQUFXLEVBQ1gsVUFBVSxFQUNWLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsZUFBZSxFQUNmLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLGVBQWUsRUFDZixXQUFXLEdBQ1osTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBQ0wsWUFBWSxFQUNaLE9BQU8sR0FDUixNQUFNLGlCQUFpQixDQUFDO0FBV3pCLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVwRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFFMUIsT0FBTyxFQUFDLElBQUksRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtDb2xsZWN0aW9ufSBmcm9tICcuL0NvbGxlY3Rpb24nO1xuZXhwb3J0IHtNb2RlbH0gZnJvbSAnLi9Nb2RlbCc7XG5leHBvcnQge1B1cmVDb2xsZWN0aW9ufSBmcm9tICcuL1B1cmVDb2xsZWN0aW9uJztcbmV4cG9ydCB7UHVyZU1vZGVsfSBmcm9tICcuL1B1cmVNb2RlbCc7XG5leHBvcnQge0NvbXBhdENvbGxlY3Rpb259IGZyb20gJy4vQ29tcGF0Q29sbGVjdGlvbic7XG5leHBvcnQge0NvbXBhdE1vZGVsfSBmcm9tICcuL0NvbXBhdE1vZGVsJztcblxuZXhwb3J0IHtcbiAgZ2V0UmVmSWQsXG4gIHNldFJlZklkLFxuICB1cGRhdGVNb2RlbElkLFxufSBmcm9tICcuL2hlbHBlcnMvbW9kZWwvZmllbGRzJztcblxuZXhwb3J0IHtcbiAgaW5pdE1vZGVsUmVmLFxufSBmcm9tICcuL2hlbHBlcnMvbW9kZWwvaW5pdCc7XG5cbmV4cG9ydCB7XG4gIGFzc2lnbk1vZGVsLFxuICBjbG9uZU1vZGVsLFxuICBnZXRNb2RlbENvbGxlY3Rpb24sXG4gIGdldE1vZGVsSWQsXG4gIGdldE1vZGVsTWV0YUtleSxcbiAgZ2V0TW9kZWxUeXBlLFxuICBnZXRPcmlnaW5hbE1vZGVsLFxuICBtb2RlbFRvSlNPTixcbiAgc2V0TW9kZWxNZXRhS2V5LFxuICB1cGRhdGVNb2RlbCxcbn0gZnJvbSAnLi9oZWxwZXJzL21vZGVsL3V0aWxzJztcblxuZXhwb3J0IHtcbiAgaXNDb2xsZWN0aW9uLFxuICBpc01vZGVsLFxufSBmcm9tICcuL2hlbHBlcnMvbWl4aW4nO1xuXG5leHBvcnQge0lSYXdNb2RlbH0gZnJvbSAnZGF0eC11dGlscyc7XG5cbmV4cG9ydCB7SUNvbGxlY3Rpb25Db25zdHJ1Y3Rvcn0gZnJvbSAnLi9pbnRlcmZhY2VzL0lDb2xsZWN0aW9uQ29uc3RydWN0b3InO1xuZXhwb3J0IHtJSWRlbnRpZmllcn0gZnJvbSAnLi9pbnRlcmZhY2VzL0lJZGVudGlmaWVyJztcbmV4cG9ydCB7SU1vZGVsQ29uc3RydWN0b3J9IGZyb20gJy4vaW50ZXJmYWNlcy9JTW9kZWxDb25zdHJ1Y3Rvcic7XG5leHBvcnQge0lUeXBlfSBmcm9tICcuL2ludGVyZmFjZXMvSVR5cGUnO1xuZXhwb3J0IHtJQWN0aW9uc01peGlufSBmcm9tICcuL2ludGVyZmFjZXMvSUFjdGlvbnNNaXhpbic7XG5leHBvcnQge0lNZXRhTWl4aW59IGZyb20gJy4vaW50ZXJmYWNlcy9JTWV0YU1peGluJztcblxuZXhwb3J0IHtSZWZlcmVuY2VUeXBlfSBmcm9tICcuL2VudW1zL1JlZmVyZW5jZVR5cGUnO1xuXG5leHBvcnQge3NldHVwTW9kZWx9IGZyb20gJy4vbWl4aW5zL3NldHVwTW9kZWwnO1xuZXhwb3J0IHt3aXRoQWN0aW9uc30gZnJvbSAnLi9taXhpbnMvd2l0aEFjdGlvbnMnO1xuZXhwb3J0IHt3aXRoTWV0YX0gZnJvbSAnLi9taXhpbnMvd2l0aE1ldGEnO1xuXG5pbXBvcnQgcHJvcCBmcm9tICcuL3Byb3AnO1xuXG5leHBvcnQge3Byb3B9O1xuIl19","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/index.d.ts","text":"export { Collection } from './Collection';\r\nexport { Model } from './Model';\r\nexport { PureCollection } from './PureCollection';\r\nexport { PureModel } from './PureModel';\r\nexport { CompatCollection } from './CompatCollection';\r\nexport { CompatModel } from './CompatModel';\r\nexport { getRefId, setRefId, updateModelId } from './helpers/model/fields';\r\nexport { initModelRef } from './helpers/model/init';\r\nexport { assignModel, cloneModel, getModelCollection, getModelId, getModelMetaKey, getModelType, getOriginalModel, modelToJSON, setModelMetaKey, updateModel } from './helpers/model/utils';\r\nexport { isCollection, isModel } from './helpers/mixin';\r\nexport { IRawModel } from 'datx-utils';\r\nexport { ICollectionConstructor } from './interfaces/ICollectionConstructor';\r\nexport { IIdentifier } from './interfaces/IIdentifier';\r\nexport { IModelConstructor } from './interfaces/IModelConstructor';\r\nexport { IType } from './interfaces/IType';\r\nexport { IActionsMixin } from './interfaces/IActionsMixin';\r\nexport { IMetaMixin } from './interfaces/IMetaMixin';\r\nexport { ReferenceType } from './enums/ReferenceType';\r\nexport { setupModel } from './mixins/setupModel';\r\nexport { withActions } from './mixins/withActions';\r\nexport { withMeta } from './mixins/withMeta';\r\nimport prop from './prop';\r\nexport { prop };\r\n"}}

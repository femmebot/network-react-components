{"code":"import * as tslib_1 from \"tslib\";\r\nimport { action, computed, intercept, observable } from 'mobx';\r\nimport { SORTED_NO_WRITE, UNIQUE_MODEL } from './errors';\r\nimport { error } from './helpers/format';\r\nimport { getModelId, getModelType } from './helpers/model/utils';\r\nvar View = /** @class */ (function () {\r\n    function View(modelType, __collection, sortMethod, models, unique) {\r\n        if (models === void 0) { models = []; }\r\n        if (unique === void 0) { unique = false; }\r\n        this.__collection = __collection;\r\n        this.unique = unique;\r\n        this.__models = observable.array([]);\r\n        this.__models.replace(models.map(getModelId));\r\n        this.sortMethod = sortMethod;\r\n        this.modelType = getModelType(modelType);\r\n    }\r\n    Object.defineProperty(View.prototype, \"length\", {\r\n        get: function () {\r\n            return this.__models.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(View.prototype, \"list\", {\r\n        get: function () {\r\n            var _this = this;\r\n            var list = this.__models.map(function (id) { return _this.__collection.find(_this.modelType, id); });\r\n            if (this.sortMethod) {\r\n                var sortFn_1 = typeof this.sortMethod === 'string'\r\n                    ? function (item) { return item[_this.sortMethod]; }\r\n                    : this.sortMethod;\r\n                list.sort(function (a, b) {\r\n                    var valA = a ? sortFn_1(a) : Infinity;\r\n                    var valB = b ? sortFn_1(b) : Infinity;\r\n                    return valA - valB;\r\n                });\r\n            }\r\n            var instances = observable.array(list, { deep: false });\r\n            intercept(instances, this.__partialListUpdate.bind(this));\r\n            return instances;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    View.prototype.toJSON = function () {\r\n        return {\r\n            modelType: this.modelType,\r\n            models: this.__models.slice(),\r\n            unique: this.unique,\r\n        };\r\n    };\r\n    Object.defineProperty(View.prototype, \"snapshot\", {\r\n        get: function () {\r\n            return this.toJSON();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    View.prototype.add = function (data) {\r\n        var _this = this;\r\n        var models = this.__collection.add([].concat(data), this.modelType);\r\n        models.forEach(function (instance) {\r\n            var id = getModelId(instance);\r\n            if (!_this.unique || _this.__models.indexOf(id) === -1) {\r\n                _this.__models.push(id);\r\n            }\r\n        });\r\n        return models;\r\n    };\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {PureModel|IIdentifier} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    View.prototype.hasItem = function (model) {\r\n        var id = getModelId(model);\r\n        return this.__models.indexOf(id) !== -1;\r\n    };\r\n    /**\r\n     * Remove a model from the view\r\n     *\r\n     * @param {IIdentifier|PureModel} model Model identifier\r\n     * @memberof Collection\r\n     */\r\n    View.prototype.remove = function (model) {\r\n        var id = getModelId(model);\r\n        this.__models.remove(id);\r\n    };\r\n    View.prototype.removeAll = function () {\r\n        this.__models.replace([]);\r\n    };\r\n    View.prototype.__partialListUpdate = function (change) {\r\n        var _this = this;\r\n        if (change.type === 'splice') {\r\n            if (this.sortMethod && change.added.length > 0) {\r\n                throw error(SORTED_NO_WRITE);\r\n            }\r\n            var added = change.added.map(getModelId);\r\n            var toRemove_1 = this.__models.slice(change.index, change.removedCount);\r\n            if (this.unique) {\r\n                added.forEach(function (newItemId) {\r\n                    if (_this.__models.indexOf(newItemId) !== -1 && toRemove_1.indexOf(newItemId) === -1) {\r\n                        throw error(UNIQUE_MODEL);\r\n                    }\r\n                });\r\n            }\r\n            (_a = this.__models).splice.apply(_a, [change.index, change.removedCount].concat(added));\r\n            return null;\r\n        }\r\n        if (this.sortMethod && change.newValue) {\r\n            throw error(SORTED_NO_WRITE);\r\n        }\r\n        var newId = getModelId(change.newValue);\r\n        var idIndex = this.__models.indexOf(newId);\r\n        if (this.unique && idIndex !== -1 && idIndex !== change.index) {\r\n            throw error(UNIQUE_MODEL);\r\n        }\r\n        this.__models[change.index] = newId;\r\n        return null;\r\n        var _a;\r\n    };\r\n    tslib_1.__decorate([\r\n        observable\r\n    ], View.prototype, \"sortMethod\", void 0);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"length\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"list\", null);\r\n    tslib_1.__decorate([\r\n        computed\r\n    ], View.prototype, \"snapshot\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"add\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"remove\", null);\r\n    tslib_1.__decorate([\r\n        action\r\n    ], View.prototype, \"removeAll\", null);\r\n    return View;\r\n}());\r\nexport { View };\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNyYy9WaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQW9CLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUUvRSxPQUFPLEVBQUMsZUFBZSxFQUFFLFlBQVksRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDdkMsT0FBTyxFQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQVMvRDtJQU1FLGNBQ0UsU0FBcUMsRUFDN0IsWUFBNEIsRUFDcEMsVUFBc0MsRUFDdEMsTUFBeUMsRUFDbEMsTUFBdUI7UUFEOUIsdUJBQUEsRUFBQSxXQUF5QztRQUNsQyx1QkFBQSxFQUFBLGNBQXVCO1FBSHRCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUc3QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQVB4QixhQUFRLEdBQWtDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFTckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFUyxzQkFBVyx3QkFBTTthQUFqQjtZQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFFUyxzQkFBVyxzQkFBSTthQUFmO1lBQVYsaUJBa0JDO1lBakJDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsS0FB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LFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLElBQUksT0FBTyxLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDN0QsTUFBTSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7O0lBQ2QsQ0FBQztJQWxKVztRQUFYLFVBQVU7NENBQStDO0lBZ0JoRDtRQUFULFFBQVE7c0NBRVI7SUFFUztRQUFULFFBQVE7b0NBa0JSO0lBVVM7UUFBVCxRQUFRO3dDQUVSO0lBc0JPO1FBQVAsTUFBTTttQ0FhTjtJQW9CTztRQUFQLE1BQU07c0NBR047SUFFTztRQUFQLE1BQU07eUNBRU47SUFtQ0gsV0FBQztDQUFBLEFBckpELElBcUpDO1NBckpZLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lEaWN0aW9uYXJ5LCBJUmF3TW9kZWx9IGZyb20gJ2RhdHgtdXRpbHMnO1xuaW1wb3J0IHthY3Rpb24sIGNvbXB1dGVkLCBpbnRlcmNlcHQsIElPYnNlcnZhYmxlQXJyYXksIG9ic2VydmFibGV9IGZyb20gJ21vYngnO1xuXG5pbXBvcnQge1NPUlRFRF9OT19XUklURSwgVU5JUVVFX01PREVMfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQge2Vycm9yfSBmcm9tICcuL2hlbHBlcnMvZm9ybWF0JztcbmltcG9ydCB7Z2V0TW9kZWxJZCwgZ2V0TW9kZWxUeXBlfSBmcm9tICcuL2hlbHBlcnMvbW9kZWwvdXRpbHMnO1xuaW1wb3J0IHtJSWRlbnRpZmllcn0gZnJvbSAnLi9pbnRlcmZhY2VzL0lJZGVudGlmaWVyJztcbmltcG9ydCB7SU1vZGVsQ29uc3RydWN0b3J9IGZyb20gJy4vaW50ZXJmYWNlcy9JTW9kZWxDb25zdHJ1Y3Rvcic7XG5pbXBvcnQge0lSYXdWaWV3fSBmcm9tICcuL2ludGVyZmFjZXMvSVJhd1ZpZXcnO1xuaW1wb3J0IHtJVHlwZX0gZnJvbSAnLi9pbnRlcmZhY2VzL0lUeXBlJztcbmltcG9ydCB7VENoYW5nZX0gZnJvbSAnLi9pbnRlcmZhY2VzL1RDaGFuZ2UnO1xuaW1wb3J0IHtQdXJlQ29sbGVjdGlvbn0gZnJvbSAnLi9QdXJlQ29sbGVjdGlvbic7XG5pbXBvcnQge1B1cmVNb2RlbH0gZnJvbSAnLi9QdXJlTW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgVmlldzxUIGV4dGVuZHMgUHVyZU1vZGVsID0gUHVyZU1vZGVsPiB7XG4gIHB1YmxpYyByZWFkb25seSBtb2RlbFR5cGU6IElUeXBlO1xuICBAb2JzZXJ2YWJsZSBwdWJsaWMgc29ydE1ldGhvZD86IHN0cmluZ3woKGl0ZW06IFQpID0+IGFueSk7XG5cbiAgcHJpdmF0ZSBfX21vZGVsczogSU9ic2VydmFibGVBcnJheTxJSWRlbnRpZmllcj4gPSBvYnNlcnZhYmxlLmFycmF5KFtdKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtb2RlbFR5cGU6IElNb2RlbENvbnN0cnVjdG9yPFQ+fElUeXBlLFxuICAgIHByaXZhdGUgX19jb2xsZWN0aW9uOiBQdXJlQ29sbGVjdGlvbixcbiAgICBzb3J0TWV0aG9kPzogc3RyaW5nfCgoaXRlbTogVCkgPT4gYW55KSxcbiAgICBtb2RlbHM6IEFycmF5PElJZGVudGlmaWVyfFB1cmVNb2RlbD4gPSBbXSxcbiAgICBwdWJsaWMgdW5pcXVlOiBib29sZWFuID0gZmFsc2UsXG4gICkge1xuICAgIHRoaXMuX19tb2RlbHMucmVwbGFjZShtb2RlbHMubWFwKGdldE1vZGVsSWQpKTtcbiAgICB0aGlzLnNvcnRNZXRob2QgPSBzb3J0TWV0aG9kO1xuICAgIHRoaXMubW9kZWxUeXBlID0gZ2V0TW9kZWxUeXBlKG1vZGVsVHlwZSk7XG4gIH1cblxuICBAY29tcHV0ZWQgcHVibGljIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19tb2RlbHMubGVuZ3RoO1xuICB9XG5cbiAgQGNvbXB1dGVkIHB1YmxpYyBnZXQgbGlzdCgpOiBBcnJheTxUfG51bGw+IHtcbiAgICBjb25zdCBsaXN0ID0gdGhpcy5fX21vZGVscy5tYXAoKGlkKSA9PiB0aGlzLl9fY29sbGVjdGlvbi5maW5kKHRoaXMubW9kZWxUeXBlLCBpZCkpO1xuXG4gICAgaWYgKHRoaXMuc29ydE1ldGhvZCkge1xuICAgICAgY29uc3Qgc29ydEZuID0gdHlwZW9mIHRoaXMuc29ydE1ldGhvZCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAoaXRlbSkgPT4gaXRlbVt0aGlzLnNvcnRNZXRob2QgYXMgJ3N0cmluZyddXG4gICAgICAgIDogdGhpcy5zb3J0TWV0aG9kO1xuICAgICAgbGlzdC5zb3J0KChhOiBUfG51bGwsIGI6IFR8bnVsbCkgPT4ge1xuICAgICAgICBjb25zdCB2YWxBID0gYSA/IHNvcnRGbihhKSA6IEluZmluaXR5O1xuICAgICAgICBjb25zdCB2YWxCID0gYiA/IHNvcnRGbihiKSA6IEluZmluaXR5O1xuICAgICAgICByZXR1cm4gdmFsQSAtIHZhbEI7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZXMgPSBvYnNlcnZhYmxlLmFycmF5KGxpc3QsIHtkZWVwOiBmYWxzZX0pO1xuXG4gICAgaW50ZXJjZXB0KGluc3RhbmNlcywgdGhpcy5fX3BhcnRpYWxMaXN0VXBkYXRlLmJpbmQodGhpcykpO1xuICAgIHJldHVybiBpbnN0YW5jZXM7XG4gIH1cblxuICBwdWJsaWMgdG9KU09OKCk6IElSYXdWaWV3IHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZWxUeXBlOiB0aGlzLm1vZGVsVHlwZSxcbiAgICAgIG1vZGVsczogdGhpcy5fX21vZGVscy5zbGljZSgpLFxuICAgICAgdW5pcXVlOiB0aGlzLnVuaXF1ZSxcbiAgICB9O1xuICB9XG5cbiAgQGNvbXB1dGVkIHB1YmxpYyBnZXQgc25hcHNob3QoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV4aXN0aW5nIG9yIGEgbmV3IG1vZGVsIHRvIHRoZSBjb2xsZWN0aW9uXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7VHxJUmF3TW9kZWx8SURpY3Rpb25hcnk8YW55Pn0gZGF0YSBNb2RlbCB0byBiZSBhZGRlZFxuICAgKiBAcmV0dXJucyB7VH0gQWRkZWQgbW9kZWxcbiAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25cbiAgICovXG4gIHB1YmxpYyBhZGQoZGF0YTogVHxJUmF3TW9kZWx8SURpY3Rpb25hcnk8YW55Pik6IFQ7XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBhcnJheSBvZiBleGlzdGluZyBvciBuZXcgbW9kZWxzIHRvIHRoZSBjb2xsZWN0aW9uXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7QXJyYXk8VHxJUmF3TW9kZWx8SURpY3Rpb25hcnk8YW55Pj59IGRhdGEgQXJyYXkgb2YgbW9kZWxzIHRvIGJlIGFkZGVkXG4gICAqIEByZXR1cm5zIHtBcnJheTxUPn0gQWRkZWQgbW9kZWxzXG4gICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uXG4gICAqL1xuICBwdWJsaWMgYWRkKGRhdGE6IEFycmF5PFR8SVJhd01vZGVsfElEaWN0aW9uYXJ5PGFueT4+KTogQXJyYXk8VD47XG5cbiAgQGFjdGlvbiBwdWJsaWMgYWRkKFxuICAgIGRhdGE6IFB1cmVNb2RlbHxJUmF3TW9kZWx8SURpY3Rpb25hcnk8YW55PnxBcnJheTxQdXJlTW9kZWw+fEFycmF5PElSYXdNb2RlbHxJRGljdGlvbmFyeTxhbnk+PixcbiAgKTogUHVyZU1vZGVsfEFycmF5PFB1cmVNb2RlbD4ge1xuICAgIGNvbnN0IG1vZGVscyA9IHRoaXMuX19jb2xsZWN0aW9uLmFkZCgoW10gYXMgQXJyYXk8YW55PikuY29uY2F0KGRhdGEpLCB0aGlzLm1vZGVsVHlwZSkgYXMgQXJyYXk8VD47XG5cbiAgICBtb2RlbHMuZm9yRWFjaCgoaW5zdGFuY2UpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gZ2V0TW9kZWxJZChpbnN0YW5jZSk7XG4gICAgICBpZiAoIXRoaXMudW5pcXVlIHx8IHRoaXMuX19tb2RlbHMuaW5kZXhPZihpZCkgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuX19tb2RlbHMucHVzaChpZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbW9kZWxzO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbW9kZWwgaXMgaW4gdGhlIGNvbGxlY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtQdXJlTW9kZWx8SUlkZW50aWZpZXJ9IG1vZGVsIE1vZGVsIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUaGUgZ2l2ZW4gbW9kZWwgaXMgaW4gdGhlIGNvbGxlY3Rpb25cbiAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25cbiAgICovXG4gIHB1YmxpYyBoYXNJdGVtKG1vZGVsOiBQdXJlTW9kZWx8SUlkZW50aWZpZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBpZCA9IGdldE1vZGVsSWQobW9kZWwpO1xuICAgIHJldHVybiB0aGlzLl9fbW9kZWxzLmluZGV4T2YoaWQpICE9PSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBtb2RlbCBmcm9tIHRoZSB2aWV3XG4gICAqXG4gICAqIEBwYXJhbSB7SUlkZW50aWZpZXJ8UHVyZU1vZGVsfSBtb2RlbCBNb2RlbCBpZGVudGlmaWVyXG4gICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uXG4gICAqL1xuICBAYWN0aW9uIHB1YmxpYyByZW1vdmUobW9kZWw6IElJZGVudGlmaWVyfFB1cmVNb2RlbCkge1xuICAgIGNvbnN0IGlkID0gZ2V0TW9kZWxJZChtb2RlbCk7XG4gICAgdGhpcy5fX21vZGVscy5yZW1vdmUoaWQpO1xuICB9XG5cbiAgQGFjdGlvbiBwdWJsaWMgcmVtb3ZlQWxsKCkge1xuICAgIHRoaXMuX19tb2RlbHMucmVwbGFjZShbXSk7XG4gIH1cblxuICBwcml2YXRlIF9fcGFydGlhbExpc3RVcGRhdGUoY2hhbmdlOiBUQ2hhbmdlKSB7XG4gICAgaWYgKGNoYW5nZS50eXBlID09PSAnc3BsaWNlJykge1xuICAgICAgaWYgKHRoaXMuc29ydE1ldGhvZCAmJiBjaGFuZ2UuYWRkZWQubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyBlcnJvcihTT1JURURfTk9fV1JJVEUpO1xuICAgICAgfVxuICAgICAgY29uc3QgYWRkZWQgPSBjaGFuZ2UuYWRkZWQubWFwKGdldE1vZGVsSWQpO1xuXG4gICAgICBjb25zdCB0b1JlbW92ZSA9IHRoaXMuX19tb2RlbHMuc2xpY2UoY2hhbmdlLmluZGV4LCBjaGFuZ2UucmVtb3ZlZENvdW50KTtcbiAgICAgIGlmICh0aGlzLnVuaXF1ZSkge1xuICAgICAgICBhZGRlZC5mb3JFYWNoKChuZXdJdGVtSWQpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5fX21vZGVscy5pbmRleE9mKG5ld0l0ZW1JZCkgIT09IC0xICYmIHRvUmVtb3ZlLmluZGV4T2YobmV3SXRlbUlkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yKFVOSVFVRV9NT0RFTCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fX21vZGVscy5zcGxpY2UoY2hhbmdlLmluZGV4LCBjaGFuZ2UucmVtb3ZlZENvdW50LCAuLi5hZGRlZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zb3J0TWV0aG9kICYmIGNoYW5nZS5uZXdWYWx1ZSkge1xuICAgICAgdGhyb3cgZXJyb3IoU09SVEVEX05PX1dSSVRFKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdJZCA9IGdldE1vZGVsSWQoY2hhbmdlLm5ld1ZhbHVlKTtcbiAgICBjb25zdCBpZEluZGV4ID0gdGhpcy5fX21vZGVscy5pbmRleE9mKG5ld0lkKTtcbiAgICBpZiAodGhpcy51bmlxdWUgJiYgaWRJbmRleCAhPT0gLTEgJiYgaWRJbmRleCAhPT0gY2hhbmdlLmluZGV4KSB7XG4gICAgICB0aHJvdyBlcnJvcihVTklRVUVfTU9ERUwpO1xuICAgIH1cblxuICAgIHRoaXMuX19tb2RlbHNbY2hhbmdlLmluZGV4XSA9IG5ld0lkO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/View.d.ts","text":"import { IDictionary, IRawModel } from 'datx-utils';\r\nimport { IIdentifier } from './interfaces/IIdentifier';\r\nimport { IModelConstructor } from './interfaces/IModelConstructor';\r\nimport { IRawView } from './interfaces/IRawView';\r\nimport { IType } from './interfaces/IType';\r\nimport { PureCollection } from './PureCollection';\r\nimport { PureModel } from './PureModel';\r\nexport declare class View<T extends PureModel = PureModel> {\r\n    private __collection;\r\n    unique: boolean;\r\n    readonly modelType: IType;\r\n    sortMethod?: string | ((item: T) => any);\r\n    private __models;\r\n    constructor(modelType: IModelConstructor<T> | IType, __collection: PureCollection, sortMethod?: string | ((item: T) => any), models?: Array<IIdentifier | PureModel>, unique?: boolean);\r\n    readonly length: number;\r\n    readonly list: Array<T | null>;\r\n    toJSON(): IRawView;\r\n    readonly snapshot: IRawView;\r\n    /**\r\n     * Add an existing or a new model to the collection\r\n     *\r\n     * @template T\r\n     * @param {T|IRawModel|IDictionary<any>} data Model to be added\r\n     * @returns {T} Added model\r\n     * @memberof Collection\r\n     */\r\n    add(data: T | IRawModel | IDictionary<any>): T;\r\n    /**\r\n     * Add an array of existing or new models to the collection\r\n     *\r\n     * @template T\r\n     * @param {Array<T|IRawModel|IDictionary<any>>} data Array of models to be added\r\n     * @returns {Array<T>} Added models\r\n     * @memberof Collection\r\n     */\r\n    add(data: Array<T | IRawModel | IDictionary<any>>): Array<T>;\r\n    /**\r\n     * Check if a model is in the collection\r\n     *\r\n     * @param {PureModel|IIdentifier} model Model to check\r\n     * @returns {boolean} The given model is in the collection\r\n     * @memberof Collection\r\n     */\r\n    hasItem(model: PureModel | IIdentifier): boolean;\r\n    /**\r\n     * Remove a model from the view\r\n     *\r\n     * @param {IIdentifier|PureModel} model Model identifier\r\n     * @memberof Collection\r\n     */\r\n    remove(model: IIdentifier | PureModel): void;\r\n    removeAll(): void;\r\n    private __partialListUpdate(change);\r\n}\r\n"}}

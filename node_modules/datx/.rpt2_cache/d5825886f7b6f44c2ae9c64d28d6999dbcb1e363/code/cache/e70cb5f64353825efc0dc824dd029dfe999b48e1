{"code":"import * as tslib_1 from \"tslib\";\r\nimport { ReferenceType } from '../enums/ReferenceType';\r\nimport { DECORATE_MODEL } from '../errors';\r\nimport { error } from '../helpers/format';\r\nimport { isModel } from '../helpers/mixin';\r\nimport prop from '../prop';\r\nexport function setupModel(Base, _a) {\r\n    var _b = _a === void 0 ? { fields: {} } : _a, fields = _b.fields, references = _b.references, type = _b.type, idAttribute = _b.idAttribute, typeAttribute = _b.typeAttribute;\r\n    var BaseClass = Base;\r\n    if (!isModel(BaseClass)) {\r\n        throw error(DECORATE_MODEL);\r\n    }\r\n    var ModelWithProps = /** @class */ (function (_super) {\r\n        tslib_1.__extends(ModelWithProps, _super);\r\n        function ModelWithProps() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        return ModelWithProps;\r\n    }(BaseClass));\r\n    if (type) {\r\n        ModelWithProps.type = type;\r\n    }\r\n    if (idAttribute) {\r\n        prop.identifier(ModelWithProps.prototype, idAttribute);\r\n    }\r\n    if (typeAttribute) {\r\n        prop.type(ModelWithProps.prototype, typeAttribute);\r\n    }\r\n    if (fields) {\r\n        Object.keys(fields).forEach(function (key) {\r\n            prop.defaultValue(fields[key])(ModelWithProps.prototype, key);\r\n        });\r\n    }\r\n    if (references) {\r\n        Object.keys(references).forEach(function (key) {\r\n            var _a = references[key], model = _a.model, property = _a.property;\r\n            switch (references[key].type) {\r\n                case ReferenceType.TO_ONE:\r\n                    return prop.toOne(model)(ModelWithProps.prototype, key);\r\n                case ReferenceType.TO_MANY:\r\n                    return prop.toMany(model, property)(ModelWithProps.prototype, key);\r\n                default:\r\n                    return prop.toOneOrMany(model)(ModelWithProps.prototype, key);\r\n            }\r\n        });\r\n    }\r\n    return ModelWithProps;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9taXhpbnMvc2V0dXBNb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUl6QyxPQUFPLElBQUksTUFBTSxTQUFTLENBQUM7QUFHM0IsTUFBTSxxQkFDSixJQUErQixFQUMvQixFQVkyQjtRQVozQix3Q0FZMkIsRUFYekIsa0JBQU0sRUFDTiwwQkFBVSxFQUNWLGNBQUksRUFDSiw0QkFBVyxFQUNYLGdDQUFhO0lBU2YsSUFBTSxTQUFTLEdBQUcsSUFBd0IsQ0FBQztJQUUzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ3ZCLE1BQU0sS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzdCO0lBRUQ7UUFBNkIsMENBQVM7UUFBdEM7O1FBQXdDLENBQUM7UUFBRCxxQkFBQztJQUFELENBQUMsQUFBekMsQ0FBNkIsU0FBUyxHQUFHO0lBRXpDLElBQUksSUFBSSxFQUFFO1FBQ1IsY0FBYyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7S0FDNUI7SUFFRCxJQUFJLFdBQVcsRUFBRTtRQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztLQUN4RDtJQUVELElBQUksYUFBYSxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztLQUNwRDtJQUVELElBQUksTUFBTSxFQUFFO1FBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztLQUNKO0lBRUQsSUFBSSxVQUFVLEVBQUU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7WUFDNUIsSUFBQSxvQkFBbUMsRUFBbEMsZ0JBQUssRUFBRSxzQkFBUSxDQUFvQjtZQUMxQyxRQUFRLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQzVCLEtBQUssYUFBYSxDQUFDLE1BQU07b0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMxRCxLQUFLLGFBQWEsQ0FBQyxPQUFPO29CQUN4QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3JFO29CQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2pFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sY0FBcUQsQ0FBQztBQUMvRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJRGljdGlvbmFyeX0gZnJvbSAnZGF0eC11dGlscyc7XG5cbmltcG9ydCB7UmVmZXJlbmNlVHlwZX0gZnJvbSAnLi4vZW51bXMvUmVmZXJlbmNlVHlwZSc7XG5pbXBvcnQge0RFQ09SQVRFX01PREVMfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHtlcnJvcn0gZnJvbSAnLi4vaGVscGVycy9mb3JtYXQnO1xuaW1wb3J0IHtpc01vZGVsfSBmcm9tICcuLi9oZWxwZXJzL21peGluJztcbmltcG9ydCB7SU1vZGVsQ29uc3RydWN0b3J9IGZyb20gJy4uL2ludGVyZmFjZXMvSU1vZGVsQ29uc3RydWN0b3InO1xuaW1wb3J0IHtJUmVmZXJlbmNlT3B0aW9uc30gZnJvbSAnLi4vaW50ZXJmYWNlcy9JUmVmZXJlbmNlT3B0aW9ucyc7XG5pbXBvcnQge0lUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lUeXBlJztcbmltcG9ydCBwcm9wIGZyb20gJy4uL3Byb3AnO1xuaW1wb3J0IHtQdXJlTW9kZWx9IGZyb20gJy4uL1B1cmVNb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cE1vZGVsPElNb2RlbCBleHRlbmRzIFB1cmVNb2RlbCwgSUZpZWxkcyBleHRlbmRzIElEaWN0aW9uYXJ5PGFueT4+KFxuICBCYXNlOiBJTW9kZWxDb25zdHJ1Y3RvcjxJTW9kZWw+LFxuICB7XG4gICAgZmllbGRzLFxuICAgIHJlZmVyZW5jZXMsXG4gICAgdHlwZSxcbiAgICBpZEF0dHJpYnV0ZSxcbiAgICB0eXBlQXR0cmlidXRlLFxuICB9OiB7XG4gICAgZmllbGRzOiBJRmllbGRzO1xuICAgIHJlZmVyZW5jZXM/OiBJRGljdGlvbmFyeTxJUmVmZXJlbmNlT3B0aW9ucz47XG4gICAgdHlwZT86IElUeXBlO1xuICAgIGlkQXR0cmlidXRlPzogc3RyaW5nO1xuICAgIHR5cGVBdHRyaWJ1dGU/OiBzdHJpbmc7XG4gIH0gPSB7ZmllbGRzOiB7fSBhcyBJRmllbGRzfSxcbikge1xuICBjb25zdCBCYXNlQ2xhc3MgPSBCYXNlIGFzIHR5cGVvZiBQdXJlTW9kZWw7XG5cbiAgaWYgKCFpc01vZGVsKEJhc2VDbGFzcykpIHtcbiAgICB0aHJvdyBlcnJvcihERUNPUkFURV9NT0RFTCk7XG4gIH1cblxuICBjbGFzcyBNb2RlbFdpdGhQcm9wcyBleHRlbmRzIEJhc2VDbGFzcyB7fVxuXG4gIGlmICh0eXBlKSB7XG4gICAgTW9kZWxXaXRoUHJvcHMudHlwZSA9IHR5cGU7XG4gIH1cblxuICBpZiAoaWRBdHRyaWJ1dGUpIHtcbiAgICBwcm9wLmlkZW50aWZpZXIoTW9kZWxXaXRoUHJvcHMucHJvdG90eXBlLCBpZEF0dHJpYnV0ZSk7XG4gIH1cblxuICBpZiAodHlwZUF0dHJpYnV0ZSkge1xuICAgIHByb3AudHlwZShNb2RlbFdpdGhQcm9wcy5wcm90b3R5cGUsIHR5cGVBdHRyaWJ1dGUpO1xuICB9XG5cbiAgaWYgKGZpZWxkcykge1xuICAgIE9iamVjdC5rZXlzKGZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm9wLmRlZmF1bHRWYWx1ZShmaWVsZHNba2V5XSkoTW9kZWxXaXRoUHJvcHMucHJvdG90eXBlLCBrZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlZmVyZW5jZXMpIHtcbiAgICBPYmplY3Qua2V5cyhyZWZlcmVuY2VzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHttb2RlbCwgcHJvcGVydHl9ID0gcmVmZXJlbmNlc1trZXldO1xuICAgICAgc3dpdGNoIChyZWZlcmVuY2VzW2tleV0udHlwZSkge1xuICAgICAgICBjYXNlIFJlZmVyZW5jZVR5cGUuVE9fT05FOlxuICAgICAgICAgIHJldHVybiBwcm9wLnRvT25lKG1vZGVsKShNb2RlbFdpdGhQcm9wcy5wcm90b3R5cGUsIGtleSk7XG4gICAgICAgIGNhc2UgUmVmZXJlbmNlVHlwZS5UT19NQU5ZOlxuICAgICAgICAgIHJldHVybiBwcm9wLnRvTWFueShtb2RlbCwgcHJvcGVydHkpKE1vZGVsV2l0aFByb3BzLnByb3RvdHlwZSwga2V5KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcHJvcC50b09uZU9yTWFueShtb2RlbCkoTW9kZWxXaXRoUHJvcHMucHJvdG90eXBlLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIE1vZGVsV2l0aFByb3BzIGFzIElNb2RlbENvbnN0cnVjdG9yPElNb2RlbCAmIElGaWVsZHM+O1xufVxuIl19","map":{"mappings":""},"dts":{"name":"/Users/darko/Projects/mobx/datx/packages/datx/mixins/setupModel.d.ts","text":"import { IDictionary } from 'datx-utils';\r\nimport { IModelConstructor } from '../interfaces/IModelConstructor';\r\nimport { IReferenceOptions } from '../interfaces/IReferenceOptions';\r\nimport { IType } from '../interfaces/IType';\r\nimport { PureModel } from '../PureModel';\r\nexport declare function setupModel<IModel extends PureModel, IFields extends IDictionary<any>>(Base: IModelConstructor<IModel>, {fields, references, type, idAttribute, typeAttribute}?: {\r\n    fields: IFields;\r\n    references?: IDictionary<IReferenceOptions>;\r\n    type?: IType;\r\n    idAttribute?: string;\r\n    typeAttribute?: string;\r\n}): IModelConstructor<IModel & IFields>;\r\n"}}
